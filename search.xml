<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端工程化—配置husky提交前格式化</title>
      <link href="/2023/11/21/TechnicalArticles/Engineering/03%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E2%80%94%E9%85%8D%E7%BD%AEhusky%E6%8F%90%E4%BA%A4%E5%89%8D%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2023/11/21/TechnicalArticles/Engineering/03%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E2%80%94%E9%85%8D%E7%BD%AEhusky%E6%8F%90%E4%BA%A4%E5%89%8D%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端工程化—提交的预先格式化"><a href="#前端工程化—提交的预先格式化" class="headerlink" title="前端工程化—提交的预先格式化"></a>前端工程化—提交的预先格式化</h1><h3 id="Git-commit-的预先格式化"><a href="#Git-commit-的预先格式化" class="headerlink" title="Git commit  的预先格式化"></a>Git commit  的预先格式化</h3><ol><li>安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm i -d husky</span><br><span class="line">pnpm i -d lint-staged</span><br></pre></td></tr></table></figure><ol start="2"><li>package.json中添加命令</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="3"><li>执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run prepare</span><br></pre></td></tr></table></figure><ol start="4"><li>添加文件</li></ol><p>在文件根目录中的.husky文件夹中添加pre-commit文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env sh</span></span><br><span class="line">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class="line"></span><br><span class="line">pnpm exec lint-staged</span><br></pre></td></tr></table></figure><ol start="5"><li>完事儿~</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 工程化 </tag>
            
            <tag> husky </tag>
            
            <tag> lint-staged </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3响应式原理</title>
      <link href="/2023/08/13/TechnicalArticles/Vue/13.vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2023/08/13/TechnicalArticles/Vue/13.vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="vue响应式原理"><a href="#vue响应式原理" class="headerlink" title="vue响应式原理"></a>vue响应式原理</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*——————构建响应式系统——————*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// activeEffect 是否触发effect</span></span><br><span class="line"><span class="keyword">let</span> activeEffect = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">eff</span>) &#123;</span><br><span class="line">    activeEffect = eff</span><br><span class="line">    <span class="title function_">activeEffect</span>()</span><br><span class="line">    activeEffect = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标映射</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="comment">// 追踪</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeEffect) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;track&quot;</span>, target, key)</span><br><span class="line">        <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">        <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">            targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">        <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">            <span class="comment">//创建依赖映射</span></span><br><span class="line">            depsMap.<span class="title function_">set</span>(key, (dep = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">        &#125;</span><br><span class="line">        dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;trigger&quot;</span>, target, key)</span><br><span class="line">    <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (dep) &#123;</span><br><span class="line">        dep.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effect</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">effect</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reactive</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">            <span class="title function_">track</span>(target, key)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> oldValue = target[key]</span><br><span class="line">            <span class="keyword">let</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">            <span class="keyword">if</span> (oldValue != value) &#123;</span><br><span class="line">                <span class="title function_">trigger</span>(target, key)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ref</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">raw</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> r = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">            <span class="title function_">track</span>(r, <span class="string">&quot;vlaue&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(raw !== newVal)&#123;</span><br><span class="line">                raw = newVal </span><br><span class="line">               <span class="title function_">trigger</span>(r, <span class="string">&quot;value&quot;</span>)</span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// computed</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">getter</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title function_">ref</span>()</span><br><span class="line">    <span class="title function_">effect</span>(<span class="function">() =&gt;</span> (result.<span class="property">value</span> = <span class="title function_">getter</span>()))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> product = <span class="title function_">reactive</span>(&#123; <span class="attr">price</span>: <span class="number">5</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;)</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    total = product.<span class="property">price</span> * product.<span class="property">quantity</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total)</span><br><span class="line">product.<span class="property">quantity</span> = <span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3 </tag>
            
            <tag> 响应式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化—Git Commit 提交规范化</title>
      <link href="/2023/08/07/TechnicalArticles/Engineering/01%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E2%80%94Git%20Commit%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83%E5%8C%96/"/>
      <url>/2023/08/07/TechnicalArticles/Engineering/01%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E2%80%94Git%20Commit%20%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端工程化—Git-Commit-提交规范化"><a href="#前端工程化—Git-Commit-提交规范化" class="headerlink" title="前端工程化—Git Commit 提交规范化"></a>前端工程化—Git Commit 提交规范化</h1><p><img src="C:\Users\tanyu.mobi\AppData\Roaming\Typora\typora-user-images\image-20230803105229524.png" alt="image-20230803105229524" title="功能预览"></p><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><h3 id="commitlint"><a href="#commitlint" class="headerlink" title="commitlint"></a>commitlint</h3><p><a href="https://github.com/commitizen/cz-cli">Github</a></p><blockquote><p>检查提交消息是否符合常规提交格式</p></blockquote><p>起步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @commitlint/cli</span><br><span class="line">echo &quot;module.exports = &#123;extends: [&#x27;@commitlint/config-angular&#x27;]&#125;;&quot; &gt; commitlint.config.js</span><br></pre></td></tr></table></figure><h3 id="cz-git"><a href="#cz-git" class="headerlink" title="cz-git"></a>cz-git</h3><p><a href="https://github.com/Zhengqbbb/cz-git">Github</a> <a href="https://cz-git.qbb.sh/zh/">官方文档</a></p><blockquote><p>工程性更强，轻量级，高度自定义， 输出标准格式的 Commitizen 适配器和 CLI </p><p>可与commitlint配合</p></blockquote><h2 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h2><ol><li>安装 commitizen</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i -d commitizen</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 cz-git</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D cz-git</span><br></pre></td></tr></table></figure><ol start="3"><li>配置package.json</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cz&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/cz-git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol start="4"><li>添加配置文件.commitlintrc.js</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .commitlintrc.js</span></span><br><span class="line"><span class="comment">/** @type &#123;import(&#x27;cz-git&#x27;).UserConfig&#125; */</span></span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    rules<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// @see: https://commitlint.js.org/#/reference-rules</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    prompt<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        alias<span class="punctuation">:</span> <span class="punctuation">&#123;</span> fd<span class="punctuation">:</span> <span class="string">&quot;docs: fix typos&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        messages<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            type<span class="punctuation">:</span> <span class="string">&quot;选择你要提交的类型 :&quot;</span><span class="punctuation">,</span></span><br><span class="line">            scope<span class="punctuation">:</span> <span class="string">&quot;选择一个提交范围（可选）:&quot;</span><span class="punctuation">,</span></span><br><span class="line">            customScope<span class="punctuation">:</span> <span class="string">&quot;请输入自定义的提交范围 :&quot;</span><span class="punctuation">,</span></span><br><span class="line">            subject<span class="punctuation">:</span> <span class="string">&quot;填写简短精炼的变更描述 :\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            body<span class="punctuation">:</span> &#x27;填写更加详细的变更描述（可选）。使用 <span class="string">&quot;|&quot;</span> 换行 <span class="punctuation">:</span>\n&#x27;<span class="punctuation">,</span></span><br><span class="line">            breaking<span class="punctuation">:</span> &#x27;列举非兼容性重大的变更（可选）。使用 <span class="string">&quot;|&quot;</span> 换行 <span class="punctuation">:</span>\n&#x27;<span class="punctuation">,</span></span><br><span class="line">            footerPrefixesSelect<span class="punctuation">:</span> <span class="string">&quot;选择关联issue前缀（可选）:&quot;</span><span class="punctuation">,</span></span><br><span class="line">            customFooterPrefix<span class="punctuation">:</span> <span class="string">&quot;输入自定义issue前缀 :&quot;</span><span class="punctuation">,</span></span><br><span class="line">            footer<span class="punctuation">:</span> <span class="string">&quot;列举关联issue (可选) 例如: #31, #I3244 :\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">            confirmCommit<span class="punctuation">:</span> <span class="string">&quot;是否提交或修改commit ?&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        types<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;feat✨&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;feat:     ✨   新增功能 | A new feature&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:sparkles:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;fix🪲&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;fix:      🪲    修复缺陷 | A bug fix&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:bug:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;docs📝&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;docs:     📝   文档更新 | Documentation only changes&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:memo:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;style💄&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;style:    💄   代码格式 | Changes that do not affect the meaning of the code&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:lipstick:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;refactor♻️&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;refactor: ♻️    代码重构 | A code change that neither fixes a bug nor adds a feature&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:recycle:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;perf⚡️&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;perf:     ⚡️   性能提升 | A code change that improves performance&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:zap:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;test✅&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;test:     ✅   测试相关 | Adding missing tests or correcting existing tests&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:white_check_mark:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;build📦️&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;build:    📦️   构建相关 | Changes that affect the build system or external dependencies&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:package:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;ci🎡&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;ci:       🎡   持续集成 | Changes to our CI configuration files and scripts&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:ferris_wheel:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;revert🔙&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;revert:   🔙   回退代码 | Revert to a commit&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:back:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;chore🧹&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;chore:    🧹   其他修改 | Other changes that do not modify src or test files&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:rewind:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;merge🎋&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;merge:    🎋   合并分支 | Merge feature branch into main branch&quot;</span><span class="punctuation">,</span> emoji<span class="punctuation">:</span> <span class="string">&quot;:tree:&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 是否使用Emoji</span></span><br><span class="line">        useEmoji<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        emojiAlign<span class="punctuation">:</span> <span class="string">&quot;center&quot;</span><span class="punctuation">,</span></span><br><span class="line">        useAI<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        aiNumber<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        themeColorCode<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        scopes<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        allowCustomScopes<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        allowEmptyScopes<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        customScopesAlign<span class="punctuation">:</span> <span class="string">&quot;bottom&quot;</span><span class="punctuation">,</span></span><br><span class="line">        customScopesAlias<span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">        emptyScopesAlias<span class="punctuation">:</span> <span class="string">&quot;empty&quot;</span><span class="punctuation">,</span></span><br><span class="line">        upperCaseSubject<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        markBreakingChangeMode<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        allowBreakingChanges<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;feat&quot;</span><span class="punctuation">,</span> <span class="string">&quot;fix&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        breaklineNumber<span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">        breaklineChar<span class="punctuation">:</span> <span class="string">&quot;|&quot;</span><span class="punctuation">,</span></span><br><span class="line">        skipQuestions<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        issuePrefixes<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="comment">// 如果使用 gitee 作为开发管理</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;link&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;link:     链接 ISSUES 进行中&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> value<span class="punctuation">:</span> <span class="string">&quot;closed&quot;</span><span class="punctuation">,</span> name<span class="punctuation">:</span> <span class="string">&quot;closed:   标记 ISSUES 已完成&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        customIssuePrefixAlign<span class="punctuation">:</span> <span class="string">&quot;top&quot;</span><span class="punctuation">,</span></span><br><span class="line">        emptyIssuePrefixAlias<span class="punctuation">:</span> <span class="string">&quot;skip&quot;</span><span class="punctuation">,</span></span><br><span class="line">        customIssuePrefixAlias<span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">        allowCustomIssuePrefix<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        allowEmptyIssuePrefix<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        confirmColorize<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        maxHeaderLength<span class="punctuation">:</span> Infinity<span class="punctuation">,</span></span><br><span class="line">        maxSubjectLength<span class="punctuation">:</span> Infinity<span class="punctuation">,</span></span><br><span class="line">        minSubjectLength<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        scopeOverrides<span class="punctuation">:</span> undefined<span class="punctuation">,</span></span><br><span class="line">        defaultBody<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        defaultIssues<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        defaultScope<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        defaultSubject<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>使用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">pnpm commit</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 工程化 </tag>
            
            <tag> git </tag>
            
            <tag> commit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化—配置Eslint</title>
      <link href="/2023/08/07/TechnicalArticles/Engineering/02%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E2%80%94%E9%85%8D%E7%BD%AEEslint/"/>
      <url>/2023/08/07/TechnicalArticles/Engineering/02%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E2%80%94%E9%85%8D%E7%BD%AEEslint/</url>
      
        <content type="html"><![CDATA[<h1 id="前端工程化—配置Eslint"><a href="#前端工程化—配置Eslint" class="headerlink" title="前端工程化—配置Eslint"></a>前端工程化—配置Eslint</h1><h3 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h3><ol><li>安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i -d  eslint </span><br></pre></td></tr></table></figure><ol start="2"><li>生成配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure><p><img src="C:\Users\tanyu.mobi\AppData\Roaming\Typora\typora-user-images\image-20230803162809431.png" alt="image-20230803162809431"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 工程化 </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题</title>
      <link href="/2023/06/06/TechnicalArticles/LeeCode/%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
      <url>/2023/06/06/TechnicalArticles/LeeCode/%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode刷题1"><a href="#LeetCode刷题1" class="headerlink" title="LeetCode刷题1"></a>LeetCode刷题1</h1><h3 id="一-存在重复元素"><a href="#一-存在重复元素" class="headerlink" title="一.存在重复元素"></a>一.存在重复元素</h3><blockquote><p>给你一个整数数组 nums 。</p><p>如果任一值在数组中出现 至少两次 ，返回 true ；</p><p>如果数组中每个元素互不相同，返回 false 。 </p><blockquote><p><strong>示例 1：</strong></p><p>输入：nums &#x3D; [1,2,3,1]<br>输出：true</p></blockquote></blockquote><h4 id="解法一（暴力枚举法）"><a href="#解法一（暴力枚举法）" class="headerlink" title="解法一（暴力枚举法）"></a>解法一（暴力枚举法）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双重循环</span></span><br><span class="line"><span class="keyword">var</span> nums = <span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span> ; j &lt; nums.<span class="property">length</span> ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == nums[j])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">containsDuplicate</span>(nums));</span><br></pre></td></tr></table></figure><h4 id="解法二（官方做法1）"><a href="#解法二（官方做法1）" class="headerlink" title="解法二（官方做法1）"></a>解法二（官方做法1）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先排序，所以重复的元素必是相邻的</span></span><br><span class="line"><span class="keyword">var</span> nums = <span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="keyword">function</span>(<span class="params">nums</span>)&#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>(a-b))</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; nums.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">containsDuplicate</span>(nums));</span><br></pre></td></tr></table></figure><h4 id="解法三（官方做法2）"><a href="#解法三（官方做法2）" class="headerlink" title="解法三（官方做法2）"></a>解法三（官方做法2）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用哈希表不存在相同元素的特性 </span></span><br><span class="line"><span class="keyword">var</span> nums = <span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (set.<span class="title function_">has</span>(nums[i])) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">         &#125;</span><br><span class="line">         set.<span class="title function_">add</span>(nums[i])</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">containsDuplicate</span>(nums));</span><br></pre></td></tr></table></figure><h3 id="二-最大子数组和"><a href="#二-最大子数组和" class="headerlink" title="二.最大子数组和"></a>二.最大子数组和</h3><blockquote><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。(子数组 是数组中的一个连续部分。)</p><blockquote><p><strong>示例 1：</strong></p><p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p></blockquote></blockquote><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作者：guanpengchn</span></span><br><span class="line"><span class="comment">首先对数组进行遍历，当前最大连续子序列和为 sum，结果为 ans</span></span><br><span class="line"><span class="comment">如果 sum &gt; 0，则说明 sum 对结果有增益效果，则 sum 保留并加上当前遍历数字</span></span><br><span class="line"><span class="comment">如果 sum &lt;= 0，则说明 sum 对结果无增益效果，需要舍弃，则 sum 直接更新为当前遍历数字</span></span><br><span class="line"><span class="comment">每次比较 sum 和 ans的大小，将最大值置为ans，遍历结束返回结果</span></span><br><span class="line"><span class="comment">时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> nums = <span class="keyword">new</span> <span class="title class_">String</span>;</span><br><span class="line">nums = [-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="title class_">Math</span>.<span class="title function_">max</span>(ans, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">maxSubArray</span>(nums));</span><br></pre></td></tr></table></figure><h3 id="三-两数之和"><a href="#三-两数之和" class="headerlink" title="三.两数之和"></a>三.两数之和</h3><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><blockquote><p><strong>示例 1：</strong><br>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p></blockquote></blockquote><h4 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">暴力枚举法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">let</span> target = <span class="number">9</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> [i,j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1.</span>-<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">twoSum</span>(nums, target));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解法二</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">利用哈希表：</span></span><br><span class="line"><span class="comment">我们遍历到数字a时，用target 减去a，就会得到b，若b存在于哈希表中，我们就可以直接返回结果了。</span></span><br><span class="line"><span class="comment">若b不存在，那么我们需要将a存入哈希表，好让后续遍历的数字使用。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">let</span> target = <span class="number">9</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(target - nums[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> [map.<span class="title function_">get</span>(target - nums[i]) , i]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.<span class="title function_">set</span>(nums[i],i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1.</span>-<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">twoSum</span>(nums, target));</span><br></pre></td></tr></table></figure><h3 id="四-合并两个有序数组"><a href="#四-合并两个有序数组" class="headerlink" title="四.合并两个有序数组"></a>四.合并两个有序数组</h3><blockquote><p>给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。</p><p>请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p><blockquote><p><strong>示例1：</strong><br>输入：nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3, nums2 &#x3D; [2,5,6], n &#x3D; 3<br>输出：[1,2,2,3,5,6]<br>解释：需要合并 [1,2,3] 和 [2,5,6] 。<br>合并结果是 [<em><strong>1</strong></em>,<em><strong>2</strong></em>,2,<em><strong>3</strong></em>,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</p></blockquote><blockquote><p><strong>示例2：</strong><br>输入：nums1 &#x3D; [1], m &#x3D; 1, nums2 &#x3D; [], n &#x3D; 0<br>输出：[1]<br>解释：需要合并 [1] 和 [] 。<br>合并结果是 [1] 。</p></blockquote></blockquote><h4 id="解法一-2"><a href="#解法一-2" class="headerlink" title="解法一"></a>解法一</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">简单的土办法，先将数组二合并到数组一，随后再排序</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">let</span> nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"> <span class="keyword">let</span> m = <span class="number">3</span></span><br><span class="line"> <span class="keyword">let</span> nums2 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"> <span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"> <span class="keyword">var</span> merge = <span class="keyword">function</span> (<span class="params">nums1, m, nums2, n</span>) &#123;</span><br><span class="line">     <span class="comment">//array.splice(index,howmany,item1,.....,itemX)</span></span><br><span class="line">     <span class="comment">//第一个参数:必需。规定从何处添加/删除元素。</span></span><br><span class="line">     <span class="comment">//第二个参数:可选。规定应该删除多少元素。必须是数字，但可以是 &quot;0&quot;。</span></span><br><span class="line">     <span class="comment">//第三个参数:可选。要添加到数组的新元素</span></span><br><span class="line">     nums1.<span class="title function_">splice</span>(m, nums1.<span class="property">length</span> - m, ...nums2)</span><br><span class="line">     nums1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a - b))</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="title function_">merge</span>(nums1, m, nums2, n)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums1);</span><br></pre></td></tr></table></figure><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作者：guanpengchn</span></span><br><span class="line"><span class="comment">标签：从后向前数组遍历</span></span><br><span class="line"><span class="comment">因为 nums1 的空间都集中在后面，所以从后向前处理排序的数据会更好，节省空间，一边遍历一边将值填充进去</span></span><br><span class="line"><span class="comment">设置指针 len1 和 len2 分别指向 nums1 和 nums2 的有数字尾部，从尾部值开始比较遍历，同时设置指针 len 指向 nums1 的最末尾，每次遍历比较值大小之后，则进行填充</span></span><br><span class="line"><span class="comment">当 len1&lt;0 时遍历结束，此时 nums2 中海油数据未拷贝完全，将其直接拷贝到 nums1 的前面，最后得到结果数组</span></span><br><span class="line"><span class="comment">时间复杂度：O(m+n)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">3</span></span><br><span class="line"> <span class="keyword">let</span> nums2 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"> <span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span> (<span class="params">nums1, m, nums2, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len1 = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> len2 = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> len = m + n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(len1 &gt;= <span class="number">0</span> &amp;&amp; len2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意--符号在后面，表示先进行计算再减1，这种缩写缩短了代码</span></span><br><span class="line">        nums1[len--] = nums1[len1] &gt; nums2[len2] ? nums1[len1--] : nums2[len2--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">arrayCopy</span>(<span class="params">src, srcIndex, dest, destIndex, length</span>) &#123;</span><br><span class="line">        dest.<span class="title function_">splice</span>(destIndex, length, ...src.<span class="title function_">slice</span>(srcIndex, srcIndex + length));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 表示将nums2数组从下标0位置开始，拷贝到nums1数组中，从下标0位置开始，长度为len2+1</span></span><br><span class="line">    <span class="title function_">arrayCopy</span>(nums2, <span class="number">0</span>, nums1, <span class="number">0</span>, len2 + <span class="number">1</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="title function_">merge</span>(nums1, m, nums2, n)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums1);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeeCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 刷题 </tag>
            
            <tag> LeeCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React重要知识点</title>
      <link href="/2023/06/06/TechnicalArticles/KnowledgePoints/React%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2023/06/06/TechnicalArticles/KnowledgePoints/React%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="React重要知识点"><a href="#React重要知识点" class="headerlink" title="React重要知识点"></a>React重要知识点</h1><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230316090723110.png" alt="image-20230316090723110" title="前端知识体系"></p><h3 id="什么是React"><a href="#什么是React" class="headerlink" title="什么是React"></a>什么是React</h3><p>React 是一个用于构建用户界面的 JavaScript 库。它是由 Facebook 开发并开源的，目前被广泛应用于前端开发中。</p><p>React 的主要特点是使用组件化的方式来构建用户界面。通过将界面拆分成独立可重用的组件，开发者可以更轻松地管理复杂的 UI，提高代码的可维护性和重用性。React 采用了虚拟 DOM（Virtual DOM）的概念，通过diff算法来比较dom树的差异，高效地更新实际 DOM。这种方式避免了直接操作 DOM 的复杂性和低效性，提供了更快的渲染速度和更好的用户体验。</p><p>React 还提供了一套声明式的编程模型，开发者只需要关注组件的状态和属性，通过对状态和属性的变化做出响应来更新界面。React 通过自动处理界面的更新，使得开发者可以更专注于应用的逻辑和交互，而无需手动操作 DOM。</p><h3 id="vue和react的区别"><a href="#vue和react的区别" class="headerlink" title="vue和react的区别"></a>vue和react的区别</h3><p>vue是一门框架，react是一个库</p><p><strong>官方态度</strong></p><ul><li>vue的官方提供了一套完整的开发流程，以追求最佳实现，利用vuex进行全局状态管理，vue-router路由管理，scope进行css的管理</li><li>react则是灵活多变，官方更推崇用户去社区寻找实现方案，不管是全局状态管理还是路由管理，都需要到社区中寻找各种各样的方案</li></ul><p><strong>写法上</strong></p><ul><li>vue是编写template，写入vue文件，写法上接近于原生html（更符合W3C标准）</li><li>react则是编写jsx，写入js文件，写法上更加的灵活，（可在html里嵌套js的写法）</li></ul><p><strong>组件类型</strong></p><p>vue的组件有vue2的选项式组件写法，vue3的组合式写法</p><p>react则可以编写类组件和函数式组件</p><p><strong>语法上</strong></p><ul><li><p>vue推崇指令化编写，官方提供的大量的指令</p></li><li><p>react则推崇原生的js书写，语法上更加灵活</p></li></ul><h3 id="为什么要使用JSX，有什么特点"><a href="#为什么要使用JSX，有什么特点" class="headerlink" title="为什么要使用JSX，有什么特点"></a>为什么要使用JSX，有什么特点</h3><ul><li>可声明变量</li><li>可嵌入表达式</li><li>单标签可以提前闭合</li><li>类名和属性使用驼峰命名</li></ul><h3 id="react的生命周期"><a href="#react的生命周期" class="headerlink" title="react的生命周期"></a>react的生命周期</h3><p>当一个应用或者页面从创建到销毁的过程中，在某个过程会自动调用的函数被称作生命周期钩子函数</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/1654490712545-6bd28fa7-290b-48fb-8d51-bbf5578dad3f.png"></p><p>constructor — render — componentDidMount — componentDidUpdate — componentWillUnmount</p><h3 id="如何进行组件间传值"><a href="#如何进行组件间传值" class="headerlink" title="如何进行组件间传值"></a>如何进行组件间传值</h3><ul><li>父传子</li></ul><p>父组件利用属性直接传值，子组件通过this.props[属性名]直接使用</p><ul><li>字传父</li></ul><p>父组件传入函数，子组件调用函数并传入函数，父组件即可在函数中接收到数据</p><ul><li>兄弟传值</li></ul><p>通过一个公共的父组件，一个兄弟组件通过调用父组件的函数，改变父元素的数据，而该数据会传递给另外一个兄弟组件，从而间接的完成了兄弟间组件传值</p><ul><li>跨组件传值（爷孙传值）</li></ul><p>使用 Provider 和 Consumer组件，利用Provider组件通过属性提供数据，利用Consumer组件通过函数接收数据</p><h3 id="什么是受控组件和非受控组件"><a href="#什么是受控组件和非受控组件" class="headerlink" title="什么是受控组件和非受控组件"></a>什么是受控组件和非受控组件</h3><p>​组件中数据的变化会实时渲染到视图上，视图上数据的变化也会实时的更新到数据中，例如input框中的value和state中的数据的双向绑定</p><h3 id="什么是高阶组件"><a href="#什么是高阶组件" class="headerlink" title="什么是高阶组件"></a>什么是高阶组件</h3><p>官方的定义: 高阶组件是一个<code>参数为组件</code>，并且<code>返回值为新组件</code>的<code>函数</code>;</p><p>两个组件组合成一个新的组件，具有两个组件的优点</p><h3 id="什么是React的renderprops功能"><a href="#什么是React的renderprops功能" class="headerlink" title="什么是React的renderprops功能"></a>什么是React的renderprops功能</h3><p>​父组件传入一个函数给子组件（函数体是要渲染的组件），要渲染的组件中的某些数据需要子组件提供，此时子组件接收到函数并调用，将参数传入，此时父组件通过函数的参数接收到了数据，便可以顺利的通过收到的数据渲染内容</p><h3 id="React为什么会出现Hooks"><a href="#React为什么会出现Hooks" class="headerlink" title="React为什么会出现Hooks"></a>React为什么会出现Hooks</h3><blockquote><p> react hooks引入于16.8</p></blockquote><ol><li>难以维护：由于 React 类组件代码逻辑分裂，因此它们可能变得难以维护。这可能会导致错误和性能问题。</li><li>高内存占用：React 类组件在渲染时需要创建很多实例，这会导致内存占用过高。如果应用程序中有大量的 React 类组件，则可能会导致内存泄漏和性能问题。</li><li>难以测试：由于 React 类组件通常是单例模式，因此它们很难进行单元测试。这意味着开发人员必须依赖于其他测试方法来验证其行为。</li><li>难以调试：由于 React 类组件通常具有复杂的状态管理，因此它们很难调试。这可能会导致错误和性能问题。</li><li>难以重用：由于 React 类组件是单例模式，因此它们很难被其他组件重用。这可能会导致代码重复和不必要的工作。</li><li>react类组件数据和函数距离过远不利于逻辑并和 类似于VUE2和VUE3关系</li></ol><h3 id="React的高阶组件、renderprops、hooks的区别"><a href="#React的高阶组件、renderprops、hooks的区别" class="headerlink" title="React的高阶组件、renderprops、hooks的区别"></a>React的高阶组件、renderprops、hooks的区别</h3><ul><li><p>三者都是用来扩展react组件的功能的工具</p></li><li><p>高阶组件是一种函数式编程的思想：高阶组件是一个<code>参数为组件</code>，并且<code>返回值为新组件</code>的<code>函数</code>;两个组件组合成一个新的组件，具有两个组件的优点</p></li><li><p>renderprops是React的一种特性，传入一个函数，函数的返回值是一个组件，子组件调用这个函数，返回这个组件</p></li><li><p>hooks是 React v16.8 新增的API，也被称为钩子函数，这系列的api提供了大量的增强函数组件的方法，例如添加响应式数据的useState，类似生命周期的响应钩子等，另外用户还可以自定义hooks</p></li></ul><h3 id="react-router-dom的路由跳转"><a href="#react-router-dom的路由跳转" class="headerlink" title="react-router-dom的路由跳转"></a>react-router-dom的路由跳转</h3><ul><li><p>v5版本，使用bwoserRouter包裹的第一层组件可以从props中直接获取match，history，location对象，从而进行相应的操作，但是孙级组件的props不会直接获得以上三个属性，需要使用withrouter的包裹，从而获得以上三个对象。</p></li><li><p>v6版本直接使用useNavigate()</p></li></ul><h3 id="对redux的特性"><a href="#对redux的特性" class="headerlink" title="对redux的特性"></a>对redux的特性</h3><p>状态管理工具</p><p>需要订阅</p><ul><li>actions</li><li>store</li><li>reducers</li></ul><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5.jpeg"></p><h3 id="对MobX的理解"><a href="#对MobX的理解" class="headerlink" title="对MobX的理解"></a>对MobX的理解</h3><p>MobX 是一个用于管理 JavaScript 应用状态的库，它基于 Redux 的思想，提供了一种更加简单、易用的状态管理方式。</p><p>MobX 的核心概念是 Store,它是一个响应式的对象，可以自动跟踪应用程序中的状态变化，并将这些变化反映在应用程序的 UI 中。Store 中的每个属性都是一个观察者，当属性的值发生变化时，Store 会自动更新所有与该属性相关的组件。</p><p>MobX 还提供了一些工具和 API,例如 Action、Observable、connect 等，使得开发者可以轻松地创建和管理 Store,以及将 Store 与其他部分集成在一起。</p><p>相比于 Redux,MobX 提供了更加直观和简单的 API,使得开发者可以更加快速地构建出状态管理逻辑。同时，MobX 还提供了一些高级特性，例如中间件、异步操作等，使得开发者可以更加灵活地处理应用程序的状态变化。</p><p>总之，MobX 是一种非常强大的状态管理库，它可以帮助开发者更好地组织和管理应用程序的状态，从而提高应用程序的可维护性和可扩展性。</p><h3 id="对Redux-ToolKit的理解"><a href="#对Redux-ToolKit的理解" class="headerlink" title="对Redux ToolKit的理解"></a>对Redux ToolKit的理解</h3><p>ReduxToolkit 是一个基于 Redux 的 React 状态管理库，它提供了一些工具和 API,使得开发者可以更加方便地使用 Redux 来管理应用程序的状态。</p><p>ReduxToolkit 的主要功能包括：</p><ol><li>自动生成 connect 函数：ReduxToolkit 可以自动为每个组件生成 connect 函数，从而将组件与 Redux Store 连接起来。这样，开发者就不需要手动编写 connect 函数了。</li><li>提供高阶组件：ReduxToolkit 提供了一些高阶组件， 使得开发者可以更加方便地使用 Redux。</li><li>支持异步操作：ReduxToolkit 支持异步操作，可以在不阻塞主线程的情况下进行数据获取和更新操作。这样可以提高应用程序的性能和响应速度。</li><li>支持多个 Store:ReduxToolkit 支持同时存在多个 Redux Store,从而可以将不同的数据源集成到同一个应用程序中。</li></ol><p>总之，ReduxToolkit 为开发者提供了更加便捷和高效的 Redux 使用方式，可以帮助开发者更好地组织和管理应用程序的状态，从而提高应用程序的可维护性和可扩展性。</p><h3 id="Redux-mbox-ReduxToolkit三者的区别"><a href="#Redux-mbox-ReduxToolkit三者的区别" class="headerlink" title="Redux,mbox,ReduxToolkit三者的区别"></a>Redux,mbox,ReduxToolkit三者的区别</h3><p>Redux、mbox 和 Redux Toolkit 都是用于状态管理的工具，但它们在一些方面有一些区别。</p><ol><li>Redux: Redux 是一个可预测状态容器，用于 JavaScript 应用的状态管理。它是 Flux 架构的一种实现方式。Redux 的核心概念包括 store、action 和 reducer。Redux 使用单一的状态树（单一的 store）来管理整个应用的状态，并使用纯函数的 reducer 来处理状态的更新。Redux 需要开发者手动编写 action 和 reducer，并且需要处理大量的样板代码，例如定义 action 的类型常量和编写 switch-case 语句。</li><li>mbox: mbox 是一个简洁、轻量级的状态管理库，它借鉴了 Redux 的一些思想，但提供了更简单的 API 和更少的样板代码。mbox 的核心概念是 store 和 signal。store 是应用的状态容器，signal 是用于触发状态变更的对象。mbox 使用响应式的方式来管理状态，当 signal 触发时，会自动更新相关的状态。mbox 采用链式调用的方式定义状态和信号，使代码更具可读性和易于维护。</li><li>Redux Toolkit: Redux Toolkit 是一个官方推荐的 Redux 工具包，旨在简化 Redux 的使用和减少样板代码。它提供了一些实用的工具函数和约定，帮助开发者更轻松地编写 Redux 代码。Redux Toolkit 包含了一个称为 createSlice 的函数，用于生成包含 reducer 和 action 的模块化切片（slice），大大简化了编写 reducer 和 action 的过程。它还提供了一个 configureStore 函数，用于快速创建一个预配置的 Redux store。此外，Redux Toolkit 还集成了 immer 库，使得在 reducer 中进行不可变更新变得更加简单。</li></ol><p>总结来说：</p><ul><li>Redux 是一个功能强大的状态管理库，但需要开发者手动编写大量的样板代码。</li><li>mbox 是一个简洁轻量的状态管理库，提供了响应式的状态管理和链式调用的 API。</li><li>Redux Toolkit 是一个简化 Redux 的工具包，提供了更简单的 API 和约定，减少样板代码的编写。</li></ul><p>选择使用哪个工具取决于个人和项目的需求，以及开发团队的偏好和经验。Redux 在大型应用和复杂状态管理方面表现良好，mbox 则更适合小型应用或希望更简单状态管理的场景，而 Redux Toolkit 则可以提供更方便和一致的开发体验。</p><ul><li>Redux需要订阅</li><li>mobx需要包裹组件</li><li>RTK类似于hooks的使用方式</li></ul><h3 id="React-Fiber是什么？"><a href="#React-Fiber是什么？" class="headerlink" title="React Fiber是什么？"></a>React Fiber是什么？</h3><ul><li>React Fiber 是 React 16 中引入的一种新的协调机制（reconciliation algorithm），是对核心算法的重写和重新实现。</li></ul><h3 id="React事件和HTML事件的区别"><a href="#React事件和HTML事件的区别" class="headerlink" title="React事件和HTML事件的区别"></a>React事件和HTML事件的区别</h3><ol><li>事件命名方式：在HTML中，事件名称是以”on”开头，例如”onclick”、”onchange”等。而在React中，事件名称采用驼峰命名法，例如”onClick”、”onChange”等。</li><li>事件绑定方式：在HTML中，可以通过在HTML元素上添加属性来绑定事件，例如<code>&lt;button onclick=&quot;handleClick()&quot;&gt;Click me&lt;/button&gt;</code>。而在React中，可以使用JSX语法来绑定事件，例如<code>&lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/button&gt;</code>。</li><li>事件对象传递：在HTML中，事件处理函数可以通过<code>event</code>参数来访问事件对象，其中包含有关事件的详细信息。而在React中，事件处理函数的参数不是原始的事件对象，而是React合成事件（SyntheticEvent）对象，它是对原生事件的封装，提供了跨浏览器一致性和额外的功能。</li><li>事件冒泡和默认行为：在HTML中，事件冒泡和默认行为是自动处理的。而在React中，默认情况下，事件不会冒泡，也不会触发元素的默认行为。如果需要实现冒泡或取消默认行为，可以显式地调用相应的方法。</li><li>React 事件处理程序必须考虑异步操作和副作用。例如，如果一个事件处理程序执行了一个异步操作并返回一个Promise,那么它必须使用 useEffect 钩子来确保该 Promise 在组件卸载时被正确地处理。</li></ol><h3 id="React声明组件的方式"><a href="#React声明组件的方式" class="headerlink" title="React声明组件的方式"></a>React声明组件的方式</h3><ul><li>function</li><li>箭头函数</li><li>高阶组件</li><li>ES6的class类继承React.Component</li><li>ES5的createClass声明方式</li></ul><h3 id="类组件和函数组件的区别"><a href="#类组件和函数组件的区别" class="headerlink" title="类组件和函数组件的区别"></a>类组件和函数组件的区别</h3><ul><li>类组件有生命周期</li><li>类组件的使用需要被new</li><li>类组件使用数据需要通过this.props或者this.state</li><li>函数式组件捕获了渲染所使用的值。类组件会因为this的改变而失去原来的的值</li><li>类组件逻辑分裂</li></ul><blockquote><p><strong>未来的发展趋势</strong></p><p>由于 React Hooks 的诞生，现在 函数组件成了React 社区主推的方案</p><p>React 团队从 Facebook的实际业务场景触发，通过探索时间切片和并发模式，以及考虑性能的进一步优化和组件间更合理的代码拆分后，认为 <strong>类组件的模式并不能很好地适应未来的趋势</strong>，它们给出了以下3个原因：</p><ol><li>this 的模糊性</li><li>业务逻辑耦合在生命周期中</li><li>React 的组件代码缺乏标准的拆分方式</li></ol><p>而使用 Hooks 的函数组件可以提供比原先更细粒度的逻辑组织和复用，且能更好的适用于时间切片和并发模式</p></blockquote><h3 id="React中Component和PureComponent的区别"><a href="#React中Component和PureComponent的区别" class="headerlink" title="React中Component和PureComponent的区别"></a>React中Component和PureComponent的区别</h3><ul><li>PureComponent是继承自Component的子类，会自动加载shouldComponentUpdate函数</li><li>当组件需要更新的时候会自动调用shouldComponentUpdate函数对props和state进行浅比较</li><li>如果没有变化，则不会触发render函数的渲染</li></ul><h3 id="那些情况会触发React组件的重新渲染？"><a href="#那些情况会触发React组件的重新渲染？" class="headerlink" title="那些情况会触发React组件的重新渲染？"></a>那些情况会触发React组件的重新渲染？</h3><ul><li><p>props，state等数据的变化</p></li><li><p>类组件中的setState()</p></li><li><p>函数组件中的useState钩子里的set函数</p></li><li><p>组件的key值发生了变化</p></li><li><p>组件的 shouldComponentUpdate 方法返回值为 false,表示当前的 props 或 state 没有发生变化，不需要重新渲染</p></li></ul><h3 id="React如何判断何时重新渲染组件？"><a href="#React如何判断何时重新渲染组件？" class="headerlink" title="React如何判断何时重新渲染组件？"></a>React如何判断何时重新渲染组件？</h3><ul><li>使用 shouldComponentUpdate 方法，该方法中根据当前 props 和 state 的变化情况来决定是否需要重新渲染组件。如果返回值为 false,则表示不需要重新渲染；如果返回值为 true,则表示需要重新渲染。</li><li>使用 useEffect 钩子函数，可以用于在组件挂载、更新或卸载时执行一些操作。如果在 useEffect 中改变了组件的状态或者触发了事件，那么 React 会认为组件需要重新渲染。</li></ul><h3 id="React的render函数做了什么？"><a href="#React的render函数做了什么？" class="headerlink" title="React的render函数做了什么？"></a>React的render函数做了什么？</h3><p>React 的 render 函数是组件渲染的核心方法，每一个组件都有自己的render函数，它的作用是将组件的状态和属性的虚拟DOM转换成真实 HTML 元素，渲染到页面上。</p><ul><li>收集数据：获取props、state，对数据进行处理</li><li>生成HTML元素：生成html元素，同时将数据也添加其中，最后渲染到页面上</li><li>添加事件监听：为需要添加事件的元素添加事件的监听</li></ul><h3 id="有状态组件和无状态组件的区别和使用场景"><a href="#有状态组件和无状态组件的区别和使用场景" class="headerlink" title="有状态组件和无状态组件的区别和使用场景"></a>有状态组件和无状态组件的区别和使用场景</h3><p>1、有状态组件指的是可以拥有自己的状态(state)的组件</p><p> <strong>场景包括：</strong></p><ul><li>需要在组件内部保存一些数据的场景，例如表单组件、评论组件等；</li><li>需要在组件内部处理一些复杂的逻辑的场景，例如图表组件、表格组件等；</li><li>需要在多个子组件之间共享数据的场景，例如路由组件、应用程序入口组件等。</li></ul><p>2、无状态组件指的是不能拥有自己状态的组件。通常情况下，无状态组件只接受 props 作为输入，并将这些 props 渲染到页面上。</p><p> <strong>场景包括：</strong></p><ul><li>只要求展示数据的场景，例如图标、按钮、标签等；</li><li>需要在多个组件之间共享数据的场景，例如导航栏、页脚等；</li><li>需要复用相同结构的组件的场景，例如列表、表格等。</li></ul><h3 id="什么是受控组件和非受控组件-1"><a href="#什么是受控组件和非受控组件-1" class="headerlink" title="什么是受控组件和非受控组件"></a>什么是受控组件和非受控组件</h3><p>​受控组件：组件中数据的变化会实时渲染到视图上，视图上数据的变化也会实时的更新到数据中，例如input框中的value和state中的数据的双向绑定</p><p>​非受控组件：包括 div、span 等普通元素，以及 Link、Button 等需要用户交互才能更新状态的组件</p><h3 id="React-Fragment是什么？"><a href="#React-Fragment是什么？" class="headerlink" title="React Fragment是什么？"></a>React Fragment是什么？</h3><p>React Fragment 是 React 中一种特殊的组件</p><p>可以作为React组件的根组件使用，同时这个组件也不会渲染出来，可以减少不必要的性能开销</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一：</span></span><br><span class="line">&lt;<span class="title class_">React</span>.<span class="property">Fragment</span>&gt;</span><br><span class="line">&lt;/<span class="title class_">React</span>.<span class="property">Fragment</span>&gt;</span><br><span class="line"><span class="comment">//写法二：</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="React如何获取dom"><a href="#React如何获取dom" class="headerlink" title="React如何获取dom"></a>React如何获取dom</h3><ul><li>useRef</li><li>原生的document的dom选择器</li><li>利用hooks</li></ul><h3 id="React类组件中绑定this的方式有哪些？"><a href="#React类组件中绑定this的方式有哪些？" class="headerlink" title="React类组件中绑定this的方式有哪些？"></a>React类组件中绑定this的方式有哪些？</h3><ul><li><p>在构造函数内部使用bind绑定this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (props) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">message</span>: <span class="string">&#x27;Allo!&#x27;</span>&#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在render函数中用bind</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.handleClick.bind</span>(<span class="attr">this</span>, &#x27;<span class="attr">赵四</span>&#x27;) &#125;&gt;</span>Hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在render函数中使用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> ()=&gt;</span>&#123; this.handleClick() &#125; &#125;&gt;Hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="React类组件中的setState是同步的还是异步的"><a href="#React类组件中的setState是同步的还是异步的" class="headerlink" title="React类组件中的setState是同步的还是异步的"></a>React类组件中的setState是同步的还是异步的</h3><p>是异步的，setState() 方法并不会立即更新组件的状态，而是将更新后的 state 放入一个队列中，等待下一次渲染时再执行。</p><h3 id="React类组件中的setState第二个参数做什么的"><a href="#React类组件中的setState第二个参数做什么的" class="headerlink" title="React类组件中的setState第二个参数做什么的"></a>React类组件中的setState第二个参数做什么的</h3><p>第二个参数是state数据更新完成后的自动调用的回调函数</p><h3 id="React组件通信的方式"><a href="#React组件通信的方式" class="headerlink" title="React组件通信的方式"></a>React组件通信的方式</h3><p>在 React 中，常见的组件通信方式有以下几种：</p><ol><li><p>Props：父组件通过 props 将数据传递给子组件。子组件可以通过 props 属性来访问这些数据，并在需要时进行使用。</p></li><li><p>Context：React 提供了上下文(Context) API,可以让父组件向子组件传递数据。这种方式可以避免在父子组件之间多层嵌套传递数据的麻烦。</p></li><li><p>Callback 回调函数:父组件可以将一个回调函数作为 prop 传递给子组件，子组件可以在特定事件发生时调用该回调函数，从而将信息传递回父组件。</p></li><li><p>Redux &#x2F; MobX &#x2F; RTK：状态管理库，可以用于管理 React 应用中的全局状态。通过将应用的状态存储在一个中央仓库中，不同的组件可以共享这些状态，从而实现组件之间的通信。</p></li><li><p>React Router：React Router 是 React 官方提供的路由库，可以用于管理单页应用(SPA)中的路由。通过在路由配置中定义不同的组件，可以在不同的路由路径下渲染不同的组件，从而实现组件之间的通信。</p></li></ol><h3 id="React-Router的路由底层实现"><a href="#React-Router的路由底层实现" class="headerlink" title="React Router的路由底层实现"></a>React Router的路由底层实现</h3><p>H5新增的 History API</p><ul><li>hash 底层 原生方法  location.hash &#x3D; xxx </li><li>histroy底层  history.pushState、replaceState、history.go()</li></ul><h3 id="React中Link标签和a标签的区别"><a href="#React中Link标签和a标签的区别" class="headerlink" title="React中Link标签和a标签的区别"></a>React中Link标签和a标签的区别</h3><ul><li>类别：Link标签是React Router提供的组件，a标签则是html原生的标签</li><li>功能：Link 标签可以支持重定向、刷新、历史记录等，a标签只能进行页面跳转</li><li>传参：Link 标签可以通过 to 属性来指定跳转的目标地址，同时还可以通过 params、query、hash、action 等属性来传递参数。而 a 标签不能</li></ul><h3 id="如何解决props嵌套过深问题"><a href="#如何解决props嵌套过深问题" class="headerlink" title="如何解决props嵌套过深问题"></a>如何解决props嵌套过深问题</h3><ol><li>利用context跨组件传值</li><li>使用全局状态管理工具 Redux MobX RTK等</li></ol><h3 id="为什么useState要使用数组不是对象"><a href="#为什么useState要使用数组不是对象" class="headerlink" title="为什么useState要使用数组不是对象"></a>为什么useState要使用数组不是对象</h3><ol><li>可变性：数组是可变的数据结构，可以直接在运行时修改其内容，而对象是不可变的。这种可变性使得在 React 组件中更新状态时更加高效，因为可以直接修改数组中的值而无需创建新的对象。这样可以避免触发不必要的重新渲染，并提高性能。</li><li>索引访问：通过索引，可以快速访问和修改数组中特定位置的元素。而对象需要使用键来访问其属性，这可能需要更多的代码和处理。所以，使用数组作为状态可以提供更方便的索引访问。</li><li>兼容性：早期版本的 React 在状态传递时只对数组进行了浅拷贝，而不是对象。这意味着如果状态是对象，它会在组件之间共享同一个引用，可能会导致状态不同步的问题。但是，从 React 16.8 版本开始，引入了 Hooks，包括 <code>useState</code>，React 在内部会执行浅拷贝，以确保状态的独立性，无论是数组还是对象。</li></ol><h3 id="useEffect和useLayoutEffect的区别"><a href="#useEffect和useLayoutEffect的区别" class="headerlink" title="useEffect和useLayoutEffect的区别"></a>useEffect和useLayoutEffect的区别</h3><p>useEffect 和 useLayoutEffect 都是 React Hooks 提供的状态更新的钩子函数。</p><p><strong>useEffect</strong></p><p>是在组件渲染完成之后，即组件已经渲染到屏幕上后触发。</p><p><strong>useLayoutEffect</strong></p><p>在浏览器完成布局和绘制但尚未呈现到屏幕上时触发，它会在所有 DOM 变更完成后同步执行，阻塞页面渲染。</p><blockquote><p>需要注意的是，由于 <code>useLayoutEffect</code> 是同步执行的，如果在其中进行耗时操作或阻塞浏览器渲染，可能会导致性能问题或页面卡顿。因此，一般情况下应优先考虑使用 <code>useEffect</code>，只有在确实需要在组件渲染后立即执行 DOM 操作或获取布局信息时才使用 <code>useLayoutEffect</code>。</p></blockquote><h3 id="用TS结合React项目写过吗说一下都用在哪里"><a href="#用TS结合React项目写过吗说一下都用在哪里" class="headerlink" title="用TS结合React项目写过吗说一下都用在哪里"></a>用TS结合React项目写过吗说一下都用在哪里</h3><ul><li>定义React组件时，使用FC限制组件类型</li><li>限制props的参数传递类型</li><li>在调用axios接口的时候，限制接口的参数传递的类型</li><li>使用antd组件的Table.Colum时候为render函数传递数据源进行类型限制</li></ul><h3 id="React的设计思路是什么"><a href="#React的设计思路是什么" class="headerlink" title="React的设计思路是什么"></a>React的设计思路是什么</h3><ul><li>组件化开发：整个应用程序看作是由多个组件组成的，每个组件都有自己的状态和行为</li><li>虚拟 DOM：React 通过使用虚拟 DOM(Virtual DOM)来提高渲染性能。</li><li>JSX：React 使用 JSX 来描述 UI 元素，JSX 语法类似于 HTML,但是可以嵌套表达式和函数调用。</li><li>单项数据流：React 采用单向数据流的设计思想，即从父组件到子组件的数据传递只能是单向的。</li></ul><h3 id="React如何实现v-show"><a href="#React如何实现v-show" class="headerlink" title="React如何实现v-show"></a>React如何实现v-show</h3><p>父子传参，传递一个控制显隐的属性，子组件根据这个参数的值，来判断是否添加display:none属性来控制显隐，从而实现的v-show的功能</p><h3 id="React遍历数据渲染的方法有哪些？"><a href="#React遍历数据渲染的方法有哪些？" class="headerlink" title="React遍历数据渲染的方法有哪些？"></a>React遍历数据渲染的方法有哪些？</h3><ul><li>Array.map()</li><li>Array.forEach()</li><li>也可以使用for循环，但是需要将数据存入数组，将数组渲染到页面</li></ul><h3 id="React错误边界"><a href="#React错误边界" class="headerlink" title="React错误边界"></a>React错误边界</h3><p>使用getDerivedStateFromError生命周期函数去捕获错误</p><h3 id="使用过那些React-hooks？"><a href="#使用过那些React-hooks？" class="headerlink" title="使用过那些React hooks？"></a>使用过那些React hooks？</h3><h4 id="数据相关hooks"><a href="#数据相关hooks" class="headerlink" title="数据相关hooks"></a>数据相关hooks</h4><h5 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h5><p>定义响应式数据</p><h5 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h5><p>可以帮助我们跨越组件层级直接传递变量，实现数据共享</p><p>Provider提供， Consumer获取</p><h5 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h5><p>计算属性</p><h5 id="useFef"><a href="#useFef" class="headerlink" title="useFef"></a>useFef</h5><p>用于获取组件或者dom对象</p><h5 id="useId"><a href="#useId" class="headerlink" title="useId"></a>useId</h5><p>用于在 React 组件中生成唯一标识符（ID）的自定义钩子函数。</p><h4 id="路由相关hooks"><a href="#路由相关hooks" class="headerlink" title="路由相关hooks"></a>路由相关hooks</h4><h5 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h5><p>可以解构获取当前跳转好的路由地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; pathname &#125; = <span class="title function_">useLocation</span>(); <span class="comment">// 获取请求路径</span></span><br></pre></td></tr></table></figure><h5 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h5><p>路由跳转的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">navigate</span>(<span class="string">&quot;/home&quot;</span>, &#123; <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><h5 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h5><p>获得路由跳转传过来的参数</p><p><strong>例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转+传参</span></span><br><span class="line"><span class="title function_">navigate</span>(<span class="string">&#x27;/detail/&#x27;</span>+item.<span class="property">proid</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接受并解构参数</span></span><br><span class="line"><span class="keyword">const</span> &#123;proid&#125; = <span class="title function_">useParams</span>()</span><br></pre></td></tr></table></figure><h4 id="状态相关钩子hooks"><a href="#状态相关钩子hooks" class="headerlink" title="状态相关钩子hooks"></a>状态相关钩子hooks</h4><h5 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h5><p>是在组件渲染之后执行的钩子函数，用于处理异步操作、订阅事件、操作 DOM 等副作用。（是异步的）</p><h5 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h5><p> 在组件渲染之后、DOM 更新之前同步执行。</p><blockquote><p>需要注意的是，由于 <code>useLayoutEffect</code> 是同步执行的，如果在其中进行耗时操作或阻塞浏览器渲染，可能会导致性能问题或页面卡顿。因此，一般情况下应优先考虑使用 <code>useEffect</code>，只有在确实需要在组件渲染后立即执行 DOM 操作或获取布局信息时才使用 <code>useLayoutEffect</code>。</p></blockquote><h5 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h5><p>缓存函数</p><p>当依赖的数据变化时，会调用其中的回调函数</p><h5 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h5><p>主要作用就是获取Redux更新state</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="useTransition"><a href="#useTransition" class="headerlink" title="useTransition"></a>useTransition</h5><p>用于在并发模式下处理异步更新的过渡效果。</p><h5 id="createPortal"><a href="#createPortal" class="headerlink" title="createPortal"></a>createPortal</h5><p>传送门钩子</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 重要知识点汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器进程相关</title>
      <link href="/2023/06/06/TechnicalArticles/browser/02.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/06/06/TechnicalArticles/browser/02.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器进程相关"><a href="#浏览器进程相关" class="headerlink" title="浏览器进程相关"></a>浏览器进程相关</h1><h3 id="线程与进程的区别如下"><a href="#线程与进程的区别如下" class="headerlink" title="线程与进程的区别如下:"></a>线程与进程的区别如下:</h3><ol><li><p>进程是计算机资源分配的最小单位，线程是资源调度的最小单位。</p></li><li><p>线程是在进程下运行的。一个进程可以包含多个线程。</p></li><li><p>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间。而线程是共享进程中的数据的，使用相同的地址空间。</p></li><li><p>同一进程下不同线程间数据容易共享，不同进程间数据很难共享。</p></li><li><p>线程之间没有单独的地址空间，一个线程死掉，整个进程也死掉。而一个进程死掉并不会对另外一个进程造成影响。</p></li></ol><h3 id="一、浏览器四大进程"><a href="#一、浏览器四大进程" class="headerlink" title="一、浏览器四大进程"></a>一、浏览器四大进程</h3><ol><li><strong>主进程：</strong>负责协调、主控，只有一个。</li></ol><p>  主要作用：</p><ul><li>负责浏览器界面显示，与用户交互。如前进，后退等</li><li>负责各个页面的管理，创建和销毁其他进程</li><li>将渲染（Renderer）进程得到的内存中的Bitmap（位图），绘制到用户界面上</li><li>网络资源的管理，下载等</li></ul><ol start="2"><li><strong>第三方插件进程：</strong>每种类型的插件对应一个进程，仅当使用该插件时才创建</li><li><strong>GPU进程：</strong>最多一个，用于3D绘制等</li><li><strong>渲染进程：</strong>（即通常所说的浏览器内核）（Renderer进程，内部是多线程的）：主要作用为页面渲染，脚本执行，事件处理等</li></ol><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230304083814094.png" alt="image-20230304083814094"></p><h3 id="二-浏览器多进程的优势"><a href="#二-浏览器多进程的优势" class="headerlink" title="二.浏览器多进程的优势"></a>二.浏览器多进程的优势</h3><p>相比于单进程浏览器，多进程有如下优点：</p><ul><li>避免单个page crash影响整个浏览器</li><li>避免第三方插件crash影响整个浏览器</li><li>多进程充分利用多核优势</li><li>方便使用沙盒模型隔离插件等进程，提高浏览器稳定性</li></ul><p>简单点理解：如果浏览器是单进程，那么某个Tab页崩溃了，就影响了整个浏览器，体验有多差；同理如果插件崩溃了也会影响整个浏览器；而且多进程还有其它的诸多优势。当然，多进程，内存等资源消耗也会更大，有点空间换时间的意思。</p><h3 id="三-渲染进程包括哪些线程"><a href="#三-渲染进程包括哪些线程" class="headerlink" title="三.渲染进程包括哪些线程"></a>三.渲染进程包括哪些线程</h3><h4 id="GUI渲染线程"><a href="#GUI渲染线程" class="headerlink" title="GUI渲染线程"></a>GUI渲染线程</h4><ul><li>负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。</li><li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行</li><li>注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中<strong>等到JS引擎空闲时</strong>立即被执行。</li></ul><h4 id="JS引擎线程-单线程"><a href="#JS引擎线程-单线程" class="headerlink" title="JS引擎线程(单线程)"></a>JS引擎线程(单线程)</h4><ul><li>也称为JS内核，负责处理Javascript脚本程序。（例如常常听到的谷歌浏览器的V8引擎，新版火狐的JaegerMonkey引擎等）</li><li>JS引擎线程负责解析Javascript脚本，运行代码。</li><li>JS引擎一直等待着<strong>任务队列</strong>中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序</li><li>同样注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li></ul><h4 id="事件触发线程"><a href="#事件触发线程" class="headerlink" title="事件触发线程"></a>事件触发线程</h4><ul><li>归属于渲染进程而不是JS引擎，用来控制<strong>事件轮询</strong>（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）</li><li>当JS引擎执行代码块如鼠标点击、AJAX异步请求等，会将对应任务添加到事件触发线程中</li><li>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理<strong>任务队列</strong>的队尾，等待JS引擎的处理</li><li>注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）</li></ul><h4 id="定时触发器线程"><a href="#定时触发器线程" class="headerlink" title="定时触发器线程"></a>定时触发器线程</h4><ul><li>定时器setInterval与setTimeout所在线程</li><li>浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果任务队列处于阻塞线程状态就会影响记计时的准确）</li><li>因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）</li><li>注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。</li></ul><h4 id="异步http请求线程"><a href="#异步http请求线程" class="headerlink" title="异步http请求线程"></a>异步http请求线程</h4><ul><li><p>用于处理请求<a href="https://link.jianshu.com/?t=http://www.w3school.com.cn/xml/xml_http.asp">XMLHttpRequest</a>，在连接后是通过浏览器新开一个线程请求。如ajax，是浏览器新开一个http线程</p></li><li><p>将检测到状态变更（如ajax返回结果）时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入js引擎线程的事件队列中。再由JavaScript引擎执行。</p></li></ul><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/1894758-e4ac3502e802d838.png" alt="img"></p><p>知道了这几个线程，那么通过这几个线程，js是怎么执行的呢？</p><h4 id="一-渲染进程中的线程之间的关系"><a href="#一-渲染进程中的线程之间的关系" class="headerlink" title="一.渲染进程中的线程之间的关系"></a>一.渲染进程中的线程之间的关系</h4><blockquote><p>GUI渲染线程与JS引擎线程互斥</p></blockquote><p>由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JS线程和GUI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。</p><p>因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JS引擎为互斥的关系，当JS引擎执行时GUI线程会被挂起，<br>GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。</p><blockquote><p>JS阻塞页面加载</p></blockquote><p>从上述的互斥关系，可以推导出，JS如果执行时间过长就会阻塞页面。</p><p>譬如，假设JS引擎正在进行巨量的计算，所以JS引擎很可能很久很久后才能空闲，所以导致页面渲染加载阻塞。这就牵扯到script标签在html中的存放位置。具体可以看我另一篇文章 <a href="https://www.jianshu.com/p/86250c123e53">为什么script标签一般放在body下面</a></p><h4 id="二-js引擎是单线程的"><a href="#二-js引擎是单线程的" class="headerlink" title="二.js引擎是单线程的"></a>二.js引擎是单线程的</h4><p>我们知道js是单线程的。也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>参考阮一峰大神的文章<a href="https://link.jianshu.com/?t=http://www.ruanyifeng.com/blog/2014/10/event-loop.html">js事件轮询（Event Loop）</a></p><ul><li>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</li><li>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</li><li>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</li></ul><h4 id="三-js事件轮询"><a href="#三-js事件轮询" class="headerlink" title="三.js事件轮询"></a>三.js事件轮询</h4><p>上面我们已经知道JS引擎是单线程，任务应该是按顺序执行的，那么怎么会有同步异步之说？</p><ul><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</li><li>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</li><li>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</li><li>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</li></ul><p>理解了同步异步。其实其最本质原因就是基于js的事件轮询机制。</p><ol><li>所有同步任务都在主线程（即js引擎线程）上执行，形成一个执行栈</li><li>而异步任务均由事件触发线程控制，其有一个任务队列。只要异步任务有了运行结果，就在”任务队列”之中放置回调事件。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。所以所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。</li><li>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，按顺序结束等待状态，进入执行栈，开始执行。</li><li>主线程不断重复上面的第三步</li><li>只要主线程空了，就会去读取”任务队列”，这个过程会不断重复。这就是JavaScript的运行机制。又称为Event Loop（事件循环或者轮询）。</li></ol><h4 id="四-定时器触发线程"><a href="#四-定时器触发线程" class="headerlink" title="四.定时器触发线程"></a>四.定时器触发线程</h4><p>上述事件循环机制的核心是：JS引擎线程和事件触发线程</p><p>js来控制主线程，事件触发来控制任务队列就如主线程。</p><p>为什么要单独的定时器线程？因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确，因此很有必要单独开一个线程用来计时。</p><p>什么时候会用到定时器线程？当使用setTimeout或setInterval时，它需要定时器线程计时，计时完成后就会将特定的事件推入事件触发线程的任务队列中。等待进入主线程执行。</p><p>譬如:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello!&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这段代码的作用是当1000毫秒计时完毕后（由定时器线程计时），将回调函数推入事件队列中，等待主线程执行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello!&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;begin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//begin hello</span></span><br></pre></td></tr></table></figure><p>这段代码的效果是表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p><p><strong>注意：</strong></p><ul><li>虽然代码的本意是0毫秒后就推入事件队列，但是html5标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。</li><li>就算不等待4ms，就算假设0毫秒就推入事件队列，也会先执行begin（因为只有主线程可执行栈内空了后才会主动读取事件队列）。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。同理setInterval则是每次都精确的隔一段时间推入一个事件（但是，事件的实际执行时间不一定就准确，还有可能是这个事件还没执行完毕，下一个事件就来了）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染相关知识</title>
      <link href="/2023/06/06/TechnicalArticles/browser/01.%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/06/06/TechnicalArticles/browser/01.%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器渲染相关知识"><a href="#浏览器渲染相关知识" class="headerlink" title="浏览器渲染相关知识"></a>浏览器渲染相关知识</h1><h3 id="浏览器的渲染流程"><a href="#浏览器的渲染流程" class="headerlink" title="浏览器的渲染流程"></a>浏览器的渲染流程</h3><p>渲染流程主要有4个步骤</p><ul><li>解析 HTML 生成DOM 树</li><li>解析 CSS 样式生成 CSSOM 树，CSSOM 树与 DOM 树结合生成 Render tree</li><li>布局 Render Tree 对每个节点进行布局处理，确定在屏幕上的位置</li><li>绘制 Render Tree，遍历渲染树将每个节点绘制出来</li></ul><p>为了优化用户体验，渲染引擎不会等到 HTML 解析完才创建布局渲染树</p><p><strong>「生成 DOM 树」</strong><br>DOM 树的构建是一个深度遍历过程，也就是说只有在所有子节点都构建好后才会去构建当前节点的下一个兄弟节点</p><p><strong>「生成 Render 树」</strong><br>生成 DOM 树的同时会生成 CSSOM 树，根据 CSSOM 和 DOM 树构建 Render Tree，渲染树包括颜色，尺寸等显示属性的矩形</p><h3 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h3><h4 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h4><p>回流也叫「重排」，指「几何属性」需要改变的渲染。</p><p>每一次的回流都会将网页内容「重新渲染」，只是我们人眼感觉不到有任何变化，但是它确实是会清空页面的，再从页面的左上角的第一个像素点从左到右从上到下这样一点一点渲染，每次回流都会是这样的过程，只是感觉不到而已</p><blockquote><p>渲染树的节点发生改变，影响了该节点的几何属性，导致该节点位置发生变化，此时就会触发浏览器回流并重新生成渲染树。</p></blockquote><p>常见的几何属性：布局，尺寸这些可以用尺子量出来的属性</p><ul><li>display</li><li>float</li><li>grid</li><li>width</li><li>padding</li></ul><p><strong>这些属性的改变都会导致回流</strong></p><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a><strong>重绘</strong></h4><p>重绘指更改「外观属性」而不影响「集合属性」的渲染，类似于颜色这些。相比于回流，重绘的作用不会那么强烈。</p><p>渲染树的节点发生改变，但不影响该节点的集合属性，回流对浏览器性能的消耗是远大于重绘的。并且回流就必然带来重绘，重绘不一定需要回流</p><p><strong>「外观属性」</strong></p><ul><li>clip</li><li>background</li><li>text</li></ul><h4 id="如何避免回流和重绘"><a href="#如何避免回流和重绘" class="headerlink" title="如何避免回流和重绘"></a>如何避免回流和重绘</h4><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h5><p>1、避免使用table布局。</p><p>2、尽可能在DOM树的最末端改变class。</p><p>3、避免设置多层内联样式。</p><p>4、将动画效果应用到position属性为absolute或fixed的元素上。</p><p>5、避免使用CSS表达式（例如：calc()）。</p><h5 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript:"></a>JavaScript:</h5><p>1、避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。</p><p>2、避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。<br>3、也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。<br>4、避免频繁读取会引发回流&#x2F;重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。5、对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</p><h3 id="css3动画和JS动画的区别"><a href="#css3动画和JS动画的区别" class="headerlink" title="css3动画和JS动画的区别"></a>css3动画和JS动画的区别</h3><h4 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a><strong>CSS3 动画</strong></h4><p>CSS3 动画也被称为补间动画，原因是只需要添加关键帧的位置，其他的未定义的帧会被自动生成</p><p>因为我们只设置了几个关键帧的位置，所以在进行动画控制的时候比较困难，不能再半路暂停动画，或者在动画过程中添加一些其他操作，都不大容易</p><p>但是 CSS 动画也有很多的好处</p><ul><li>浏览器可以对动画进行优化</li><li>帧速不好的浏览器，CSS3 可以自然降级兼容</li><li>代码简单，调优方向固定</li></ul><h4 id="JS-动画"><a href="#JS-动画" class="headerlink" title="JS 动画"></a>JS 动画</h4><p>首先，JS 动画是逐帧动画，在时间帧上绘制内容，一帧一帧的，所以他的可再造性很高，几乎可以完成任何你想要的动画形式。但是由于逐帧动画的内容不一样，会增加制作的负担，占用比较大的资源空间。</p><p>但是它也有很多的优势</p><ul><li>细腻的动画</li><li>可控性高</li><li>炫酷高级的动画</li></ul><h4 id="CSS-动画与-JS-动画对比"><a href="#CSS-动画与-JS-动画对比" class="headerlink" title="CSS 动画与 JS 动画对比"></a>CSS 动画与 JS 动画对比</h4><p>为什么CSS动画要「更高效」？</p><p><strong>「第一点」</strong><br>从实现动画的复杂度来看，CSS 动画大多数都是补间动画，而 JS 动画是逐帧动画。当然这里我们不谈论实现的效果</p><p><strong>「第二点」</strong><br>编码的高效，采用 JS 去实现的动画，无论多简单的动画，都需要去控制整个过程，当然你可能会说可以采用一些库来解决这些问题，但是这些库的实际运行可能要比原生实现的效率要低的多</p><p><strong>「第三点」</strong><br>性能的高效，在我们前面讲到了回流和重绘，如果我们要操作一个元素向右移动，我们可能需要控制dom.style.left 属性，每次来<strong>「改变元素的位置」</strong>，而结合我们所说的，「几何属性」的改变必然会引起「回流」，回流必然引起重绘，可想而知如果我们采用 JS 来实现动画，这个代价有多大，这会造成浏览器在不断的计算页面，从而导致浏览器内存堆积。同时由于 JavaScript 运行在浏览器的主线程中，主线程中还有其他的重要任务在运行，因而可能会受到干扰导致「线程阻塞」，从而导致<strong>「丢帧」</strong></p><p>而 CSS 的动画是运行在合成线程中的，不会阻塞主线程，并且在合成线程中完成的动作不会触发回流和重绘</p><p>当然还有一个重要的点：JS 动画运行在 CPU，而 CSS 动画运行在 GPU</p><p>总的来说， CSS动画的渲染成本小，并且它的执行效率高于 JavaScript 动画</p><p><strong>什么时候使用 JS 动画呢？</strong></p><ul><li>「只要能用 CSS 实现的动画，就不要采用 JS 去实现」，可以多采用 CSS 预处理器去做更多复杂的动画</li><li>如果动画相较复杂，我们可以采用 JS + canvas 去尝试</li><li>最后再考虑纯 JS 实现</li></ul><h3 id="所以为什么使用css3动画而不是js动画"><a href="#所以为什么使用css3动画而不是js动画" class="headerlink" title="所以为什么使用css3动画而不是js动画"></a>所以为什么使用css3动画而不是js动画</h3><ul><li>因为js动画是运行在浏览器主线程上的，并且每一次改变几何属性很容易造成浏览器的回流和重绘，导致浏览器会不断的计算页面，容易导致线程阻塞，卡顿</li><li>css3动画是运行在合成线程上的，不会导致线程阻塞</li><li>并且js动画运行在CPU上，css3动画运行在GPU上，在动画的计算上，GPU性能明显由于CPU</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 渲染 </tag>
            
            <tag> 回流 </tag>
            
            <tag> 重绘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue重要知识点</title>
      <link href="/2023/06/06/TechnicalArticles/KnowledgePoints/Vue%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2023/06/06/TechnicalArticles/KnowledgePoints/Vue%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue重要知识点"><a href="#Vue重要知识点" class="headerlink" title="Vue重要知识点"></a>Vue重要知识点</h1><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230316090723110.png" alt="image-20230316090723110" title="前端知识体系"></p><h3 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h3><p>vue是一套用于构建用户界面的渐进式js框架，基于mvvm模型和虚拟dom的思想，可够快速构建高效的前端应用程序</p><h3 id="什么是MVVM模型"><a href="#什么是MVVM模型" class="headerlink" title="什么是MVVM模型"></a>什么是MVVM模型</h3><p>是Model-View-ViewModel的简写，本质是个MVC的改进版</p><ul><li>M：模型Model  —&gt;也就是data中的数据</li><li>V：视图View  —&gt;也就是模板代码</li><li>VM：视图模型ViewModel  —&gt;也就是Vue实例（vm）</li></ul><p><img src="https://img-blog.csdnimg.cn/3b2deed9e76142798a44ee3bbc33f39b.png" alt="img"></p><h3 id="Vue双向数据绑定的实现"><a href="#Vue双向数据绑定的实现" class="headerlink" title="Vue双向数据绑定的实现"></a>Vue双向数据绑定的实现</h3><ul><li>Object.defineProperty 来进行数据劫持</li><li>递归data中的数据来进行劫持</li><li>当前ObServer监听对应的输入框的内容发生变化</li><li>重新设置对应的data中的数据（this._data）</li><li>数据重新设置再进行对应的模板比对渲染对应的页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;</span><br><span class="line">            el,</span><br><span class="line">            data</span><br><span class="line">        &#125; = options</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">el</span> = el <span class="comment">//挂载点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data <span class="comment">//数据</span></span><br><span class="line">        <span class="comment">//用于劫持的容器</span></span><br><span class="line">        <span class="variable language_">this</span>.</span><br><span class="line">        _</span><br><span class="line">        data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">        <span class="comment">//获取对应的内容 el里面内容</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">        <span class="comment">//读取里面的 &#123;&#123;&#125;&#125;的内容 进行替换</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">textContent</span> = <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">innerHTML</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">kidnap</span>(<span class="variable language_">this</span>.<span class="property">data</span>, <span class="variable language_">this</span>.<span class="property">_data</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">comparis</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归遍历data中的数据进行劫持 (递归遍历data中的数据进行劫持操作)</span></span><br><span class="line">    <span class="title function_">kidnap</span>(<span class="params">obj, _obj</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="comment">//如果它是一个对象继续往下劫持</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">kidnap</span>(obj[key], _obj[key])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Object.defineProperty来进行劫持</span></span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">                <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                    _</span><br><span class="line">                    obj[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">                    _</span><br><span class="line">                    obj[key] = newValue</span><br><span class="line">                    that.<span class="title function_">comparis</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模板比对解析</span></span><br><span class="line">    <span class="title function_">comparis</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//&#123;&#123;message&#125;&#125; &#123;message.age.age&#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">textContent</span>.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([\w.]*)\&#125;\&#125;/ig</span>, <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//&#123;&#123;message&#125;&#125;</span></span><br><span class="line">            <span class="comment">//读取对应的里面key 利用data里面的数据来进行替换</span></span><br><span class="line">            <span class="comment">// console.log(RegExp.$1) //读取分组1里面的内容</span></span><br><span class="line">            <span class="keyword">var</span> arr = v.<span class="title function_">substring</span>(<span class="number">2</span>, v.<span class="property">length</span> - <span class="number">2</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">            <span class="comment">//遍历获取数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">                value = value[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历arr获取数据</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//读取对应的input框的v-model属性进行替换</span></span><br><span class="line">        <span class="comment">//先找input框</span></span><br><span class="line">        <span class="keyword">let</span> inputs = <span class="variable language_">this</span>.<span class="property">content</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">        <span class="comment">//获取所有具备v-model属性的input框架</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(inputs).<span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> v.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-model&#x27;</span>)</span><br><span class="line">        &#125;).<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> key = v.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-model&#x27;</span>)</span><br><span class="line">            <span class="comment">//利用观察者模式进行监听</span></span><br><span class="line">            <span class="comment">//调用obServer</span></span><br><span class="line">            v.<span class="property">oninput</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                that.<span class="property">data</span>[key] = v.<span class="property">value</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//读取对应的v-model 设置对应的内容</span></span><br><span class="line">            v.<span class="property">value</span> = that.<span class="property">data</span>[key]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h3><ul><li><p>computed可以自己定义并劫持数据，watch只能监听来自data和props中</p></li><li><p>computed支持缓存，相依赖的数据发生改变才会重新计算，不支持异步操作</p></li><li><p>watch不支持缓存，只要监听的数据变化就会触发相应操作，支持异步操作</p></li><li><p>computed 有get和set属性</p></li><li><p>watch 有handler、deep、immediate</p></li></ul><h3 id="computed和methods的区别"><a href="#computed和methods的区别" class="headerlink" title="computed和methods的区别"></a>computed和methods的区别</h3><ul><li>computed会缓存数据，只有当数据变化了才会重新计算</li><li>methods每次调用都会重新编译计算</li><li>computed的效率高于methods</li><li>computed中定义的是属性而不是函数，所以使用时直接用<code>&#123;&#123;xxx&#125;&#125;</code>，而methods中定义的是函数，因此使用时需要<code>&#123;&#123;xxx()&#125;&#125;</code>。</li></ul><h3 id="vue有哪些生命周期钩子"><a href="#vue有哪些生命周期钩子" class="headerlink" title="vue有哪些生命周期钩子"></a>vue有哪些生命周期钩子</h3><p>生命周期就是从一个应用  从出生到消亡的过程 在特殊时候会自动调用的回调函数</p><table><thead><tr><th>vue2生命周期</th><th>vue3生命周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup</td></tr><tr><td>created</td><td>setup</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnMount</td></tr><tr><td>destroyed</td><td>onUnMounted</td></tr></tbody></table><h3 id="vue3对于vue2有了那些变化"><a href="#vue3对于vue2有了那些变化" class="headerlink" title="vue3对于vue2有了那些变化"></a>vue3对于vue2有了那些变化</h3><ul><li>底层实现原理从Object.defineProperty改为了Proxy</li><li>重写了虚拟dom和Tree-Shaking</li><li>更好的支持TypeScript</li><li>新增了组合式API（Composition API）</li><li>新增组件（Fragment组件可以没有根标签 、Teleport将html结构移动到指定位置、Suspense等待异步组件时渲染一些额外内容）</li><li>更新换代了新的生命周期钩子函数</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>移除了filter过滤器</li><li>性能提升（打包大小减少41%、初次渲染快55%, 更新渲染快133%、内存减少54%）</li></ul><h3 id="vue中组件传值的方式"><a href="#vue中组件传值的方式" class="headerlink" title="vue中组件传值的方式"></a>vue中组件传值的方式</h3><p>父子间传值：</p><p>props</p><p>provide inject</p><p>eventBus</p><p>$emit</p><p>$attrs</p><p>兄弟间传值：</p><p>bus</p><p>作用域插槽</p><p>三方插件</p><h3 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex"></a>什么是Vuex</h3><p>Vuex用于全局状态管理</p><ul><li>State：基本数据(数据源存放地)</li><li>Getters：从基本数据派生出来的数据</li><li>Mutations：提交更改数据的方法，同步</li><li>Actions：可进行异步的数据请求，像一个装饰器，包裹mutations，使之可以异步。</li><li>Modules：模块化Vuex</li></ul><h3 id="mixin和vuex的区别"><a href="#mixin和vuex的区别" class="headerlink" title="mixin和vuex的区别"></a>mixin和vuex的区别</h3><p>Mixins，中文意思是混入，所以它的功能是混合。对象和引人mixins的组件混合。</p><p>Mixins：可以定义共用的变量，在每个组件中使用，引入组件中之后，各个变量是相互独立的，值的修改在组件中不会相互影响。<br>如果相同对象，组件会覆盖mixins</p><p>vuex：用来做状态管理的，里面定义的变量在每个组件中均可以使用和修改，在任一组件中修改此变量的值之后，其他组件中此变量的值也会随之修改。</p><h3 id="mixin和setup的区别"><a href="#mixin和setup的区别" class="headerlink" title="mixin和setup的区别"></a>mixin和setup的区别</h3><p>mixin 很容易发生冲突：因为每个特性的属性都被合并到同一个组件中，所以为了避免 property 名冲突和调试，你仍然需要了解其他每个特性。</p><p>可重用性是有限的：我们不能向 mixin 传递任何参数来改变它的逻辑，这降低了它们在抽象逻辑方面的灵活性。</p><h3 id="Vue中的插槽"><a href="#Vue中的插槽" class="headerlink" title="Vue中的插槽"></a>Vue中的插槽</h3><ul><li>匿名插槽</li><li>具名插槽</li><li>作用域插槽</li></ul><p><strong>总结</strong></p><ul><li>使用slot来定义插槽</li><li>匿名插槽又称默认插槽，内容默认传递给对应的具名插槽</li><li>slot标签通过name属性来指定插槽名</li><li>需要插入的内容建议用template标签包裹</li><li>作用域插槽是扩大了对应的组件作用域，通过对应的插槽数据中的属性来传递数据</li><li>父组件使用对应的slot-scope属性来接收对应的传递的属性对象（2.6之前的写法）</li><li>v-slot（2.6及以上版本才支持）（v-slot:name）可简写为(#name)</li><li>v-slot和slot的写法不要混用，容易造成兼容问题</li></ul><h3 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h3><p>都是vue的指令，用法也相同，根据表达式的Boolean值来控制元素的显隐</p><p><strong>显示效果</strong></p><p>v-if控制的元素在隐藏后，是直接在文档消失了，</p><p>v-show控制的元素在隐藏后，是依旧存在于文档，只是没有显示出来</p><p><strong>原理</strong></p><p>v-if是控制虚拟dom的存在与否来间接控制真实dom的存在，故性能开销更大</p><p>v-show是控制元素的css属性display，来控制元素的显隐藏，故性能开销更小</p><p><strong>应用</strong></p><p>在需要较少的切换时，甚至是一次性的切换时，建议使用v-if</p><p>在需要频繁切换时，建议使用v-show</p><h3 id="vue中的-nextTick的使用"><a href="#vue中的-nextTick的使用" class="headerlink" title="vue中的$nextTick的使用"></a>vue中的$nextTick的使用</h3><p>当你修改了data的值然后马上获取这个dom元素的值，是不能获取到更新后的值，</p><p>你需要使用$nextTick这个回调，让修改后的data值渲染更新到dom元素之后在获取，才能成功</p><h3 id="对渐进式框架的理解"><a href="#对渐进式框架的理解" class="headerlink" title="对渐进式框架的理解"></a>对渐进式框架的理解</h3><p><strong>渐进式代表的含义是：<code>主张最少</code>。</strong>就是用你想用或者能用的功能特性，你不想用的部分功能可以先不用</p><h3 id="vue常见修饰符"><a href="#vue常见修饰符" class="headerlink" title="vue常见修饰符"></a>vue常见修饰符</h3><ul><li>.stop：等同于JavaScript中的event.stopPropagation()，防止事件冒泡；</li><li>.prevent：等同于JavaScript中的event.preventDefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；</li><li>.capture：与事件冒泡的方向相反，事件捕获由外到内；</li><li>.self：只会触发自己范围内的事件，不包含子元素；</li><li>.once：只会触发一次。</li></ul><h3 id="v-if和v-show的区别-1"><a href="#v-if和v-show的区别-1" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h3><p>都是vue的指令，用法也相同，根据表达式的Boolean值来控制元素的显隐</p><p><strong>显示效果</strong></p><p>v-if控制的元素在隐藏后，是直接在文档消失了，</p><p>v-show控制的元素在隐藏后，是依旧存在于文档，只是没有显示出来</p><p><strong>原理</strong></p><p>v-if是控制虚拟dom的存在与否来间接控制真实dom的存在，故性能开销更大</p><p>v-show是控制元素的csss属性display，来控制元素的显隐藏，故性能开销更小</p><p><strong>应用</strong></p><p>在需要较少的切换时，甚至是一次性的切换时，建议使用v-if</p><p>在需要频繁切换时，建议使用v-show</p><h3 id="vue中组件传值的方式-1"><a href="#vue中组件传值的方式-1" class="headerlink" title="vue中组件传值的方式"></a>vue中组件传值的方式</h3><p>父子间传值：</p><p>props</p><p>provide inject</p><p>bus</p><p>$emit</p><p>$attrs</p><p>兄弟间传值：</p><p>bus</p><p>作用域插槽</p><p>三方插件</p><h3 id="为什么组件中的data是一个函数而不是对象"><a href="#为什么组件中的data是一个函数而不是对象" class="headerlink" title="为什么组件中的data是一个函数而不是对象"></a>为什么组件中的data是一个函数而不是对象</h3><ul><li><p>对象可能会存在覆盖，造成全局污染</p></li><li><p>组件是可复用的vue实例，一个组件被创建好之后，就可能被用在各个地方，而组件不管被复用了多少次，组件中的data数据都应该是相互隔离，互不影响的，基于这一理念，组件每复用一次，data数据就应该被复制一次，之后，当某一处复用的地方组件内data数据被改变时，其他复用地方组件的data数据不受影响。</p></li><li><p>组件中的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份data，就会造成一个变了全都会变的结果。</p></li><li><p>根实例对象data可以是对象也可以是函数（根实例是单例），不会产生数据污染情况</p></li></ul><h3 id="script标签的async和defer属性的区别"><a href="#script标签的async和defer属性的区别" class="headerlink" title="script标签的async和defer属性的区别"></a>script标签的async和defer属性的区别</h3><h3 id="query传参和params传参的区别"><a href="#query传参和params传参的区别" class="headerlink" title="query传参和params传参的区别"></a>query传参和params传参的区别</h3><ul><li>首先就是写法得不同，query 得写法是 用 path 来编写传参地址，而 params 得写法是用 name 来编写传参地址，你可以看一下编写路由时候得相关属性，你也可以输出一下 路由对象信息 看一下</li><li>接收方法不同， 一个用 query 来接收， 一个用 params 接收 ，总结就是谁发得 谁去接收</li><li>query 在刷新页面得时候参数不会消失，而 params 刷新页面得时候会参数消失，可以考虑本地存储解决</li><li>query 传得参数都是显示在url 地址栏当中，而 params 传参不会显示在地址栏</li></ul><h3 id="vue中用了哪些设计模式"><a href="#vue中用了哪些设计模式" class="headerlink" title="vue中用了哪些设计模式"></a>vue中用了哪些设计模式</h3><p>​Vue是一个综合性前端框架，它利用了一些设计模式来让代码更易于维护、可读性高、更好地解耦。下面是Vue中常用的设计模式的中文介绍。</p><ol><li><p>发布&#x2F;订阅模式（观察者模式）</p><p>   发布&#x2F;订阅模式是一种松散耦合设计模式，其中一个组件（发布方）发出事件，而其他组件（订阅方）则监听并处理它。<br>   在Vue中，我们可以使用<code>$on(eventName, callback)</code>方法订阅事件，使用<code>$emit(eventName, args)</code>方法发布事件。这个模式常用于事件总线和父子组件通信。<br>   观察者模式定义对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会收到通知并自动更新。这种模式有时也被称为发布&#x2F;订阅模式。在Vue中，父组件可以作为观察者订阅子组件的状态变化（例如子组件向父组件发送$emit消息），并更新自己的状态，而子组件则可以作为被观察者发送通知通知父组件更新状态。</p></li><li><p>单例模式</p><p>   单例模式是一种只允许创建一个对象的模式。在Vue中，这可以通过将一个对象实例化一次，然后在整个应用中共享它的方法和数据。<br>   Vue使用单例模式来创建全局组件（例如vue-router和vuex store）。global Vue对象也是唯一的，因此在整个应用程序中只能有一个实例。</p></li><li><p>工厂模式</p><p>   工厂模式是一种对象创建模式，其中一个对象的实例化是由一个工厂类负责的。Vue中可以使用工厂模式创建组件，这使我们可以动态地根据不同的数据创建不同的组件。<br>   在Vue中，我们可以使用动态组件来实现这一点。动态组件是由一个组件工厂函数创建的，该函数接收一个组件名称和一个组件对象，并返回一个新的组件对象。这样，我们就可以在运行时动态地创建并加载组件了。</p></li><li><p>适配器模式</p><p>   适配器模式是一种结构性设计模式，它允许不兼容的接口之间进行通信。在Vue中，我们可以使用适配器模式适配不同的数据源。</p></li></ol><h3 id="什么是哈夫曼树-Huffman-Tree"><a href="#什么是哈夫曼树-Huffman-Tree" class="headerlink" title="什么是哈夫曼树(Huffman Tree)"></a>什么是哈夫曼树(Huffman Tree)</h3><p>​哈夫曼树又称<strong>最优二叉树</strong>，是一种<strong>带权路径长度最短</strong>的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。树的路径长度是从树根到每一结点的路径长度之和，记为WPL&#x3D;（W1<em>L1+W2</em>L2+W3<em>L3+…+Wn</em>Ln），N个权值Wi（i&#x3D;1,2,…n）构成一棵有N个叶结点的二叉树，相应的叶结点的路径长度为Li（i&#x3D;1,2,…n）。可以证明哈夫曼树的WPL是最小的。</p><h3 id="vite-和-vue-cli的区别"><a href="#vite-和-vue-cli的区别" class="headerlink" title="vite 和 vue-cli的区别"></a>vite 和 vue-cli的区别</h3><h3 id="v-for为什么需要绑定key值"><a href="#v-for为什么需要绑定key值" class="headerlink" title="v-for为什么需要绑定key值"></a>v-for为什么需要绑定key值</h3><p>关键词：<strong>性能优化</strong>、<strong>diff算法节点比对</strong>、<strong>key不能是index</strong></p><p>为了性能优化 因为vue使用了虚拟DOM，更新DOM时用diff算法对节点进行一一比对，比如有很多li元素，要在某个位置插入一个li元素，但没有给li上加key，那么在进行运算的时候，就会将所有li元素重新渲染一遍，但是如果有key，那么它就会按照key一一比对li元素，只需要创建新的li元素，插入即可，不需要对其他元素进行修改和重新渲染。</p><p>key也不能是li元素的index，因为假设我们给数组前插入一个新元素，它的下标是0，那么和原来的第一个元素重复了，整个数组的key都发生了改变，这样就跟没有key的情况一样了</p><h3 id="ref和toRef的区别、特点："><a href="#ref和toRef的区别、特点：" class="headerlink" title="ref和toRef的区别、特点："></a>ref和toRef的区别、特点：</h3><ol><li>ref本质是拷贝，修改响应式数据不影响原始数据；toRef的本质是引用关系，修改响应式数据会影响原始数据</li><li>ref数据发生改变，界面会自动更新；toRef当数据发生改变是，界面不会自动更新</li><li>toRef传参与ref不同；toRef接收两个参数，第一个参数是哪个对象，第二个参数是对象的哪个属性</li><li>toRef 用于创建对象指定的属性响应式，换句话说就是只能控制一个对象中的一个属性。</li><li>toRefs 用于创建对象响应式。</li><li>他们对响应式的处理你可以理解为： toRef 类似 ref， toRefs 类似 reactive</li></ol><table><thead><tr><th>类型</th><th>是否触发页面改变</th><th>是否可以解构</th></tr></thead><tbody><tr><td>ref</td><td><strong>是</strong></td><td>否</td></tr><tr><td>reactive</td><td><strong>是</strong></td><td>否</td></tr><tr><td>toRef</td><td>否</td><td>否</td></tr><tr><td>toRefs</td><td>否</td><td><strong>是</strong></td></tr></tbody></table><h3 id="封装axios的过程"><a href="#封装axios的过程" class="headerlink" title="封装axios的过程"></a>封装axios的过程</h3><ul><li>首先区分开发环境和生产环境（创建对应的.env.development，.env.production文件）</li><li>使用axios.create创建一个axios对象进行基础的配置</li><li>baseUrl设置为process.VUE_APP_BASE_API（会根据环境的变化切换对应的url前缀）</li><li>然后创建对应的请求拦截（用于发送对应的token）和响应拦截（根据响应的状态码进行响应的操作和提示）</li><li>最后暴露这个配置好的axios对象，我们就可以在其他的地方导入后简单的配置就可以进行请求了</li></ul><h3 id="如何封装Vue组件"><a href="#如何封装Vue组件" class="headerlink" title="如何封装Vue组件"></a>如何封装Vue组件</h3><p>UI组件、业务组件</p><ol><li>建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。(os:先思考1小时，写代码10分钟)</li><li>准备好组件的数据输入。即分析好逻辑，定好props里面的数据、类型以及默认值还要考虑组件内使用三种插槽哪一种或者搭配使用。考虑以下是否需要sync修饰符是否需要来回的回调函数传递。</li><li>准备好组件的数据输出。即根据组件逻辑,做好要暴露出来的方法。</li><li>封装完毕了，直接调用即可</li></ol><h3 id="后台管理权限系统权限设计思路"><a href="#后台管理权限系统权限设计思路" class="headerlink" title="后台管理权限系统权限设计思路"></a>后台管理权限系统权限设计思路</h3><ul><li><p>不用员工登录进去会有不同的TOKEN利用不同的TOKEN换取更详细的用户信息</p><p>(侧边栏数据按钮权限数据头像等)</p></li><li><p>左侧侧边栏通过V-FOR侧边栏数据进行遍历可以写一个自定义指令也可以直接v-if来判断按钮权限数据判断，精确到按钮级别</p></li><li><p>为了避免低级别用户 强行进入高级别用户的URL 路由实现动态推入 比对权限和私有路由的关系 进行一一推入 最后使用router.addroute的重置路由高级api进行生效！</p></li></ul><h3 id="symbol的原理和应用场景"><a href="#symbol的原理和应用场景" class="headerlink" title="symbol的原理和应用场景"></a>symbol的原理和应用场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="comment">//是由机器码 时间戳 进程id 随机数 组成的唯一值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> staff1 = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">var</span> staff2 = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [staff1]:&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">height</span>:<span class="number">170</span>&#125;,</span><br><span class="line">    [staff2]:&#123;<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">height</span>:<span class="number">160</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grade)<span class="comment">//jack: &#123;age: 12, height: 160&#125; 此时第一个jack被覆盖了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时利用symbol</span></span><br><span class="line"><span class="keyword">var</span> staff1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> staff2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [staff1]:&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">height</span>:<span class="number">170</span>&#125;,</span><br><span class="line">    [staff2]:&#123;<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">height</span>:<span class="number">160</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grade)</span><br><span class="line"><span class="comment">//Symbol(jack): &#123;age: 18, height: 170&#125;</span></span><br><span class="line"><span class="comment">//Symbol(jack): &#123;age: 12, height: 160&#125;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟dom的作用"><a href="#虚拟dom的作用" class="headerlink" title="虚拟dom的作用"></a>虚拟dom的作用</h3><ul><li>增强语法 简化语法</li><li>增强性能 保证性能下限、极大的减少回流重绘</li><li>跨平台 虚拟dom可以开发小程序 安卓 iOS</li></ul><h3 id="微信小程序登陆流程"><a href="#微信小程序登陆流程" class="headerlink" title="微信小程序登陆流程"></a>微信小程序登陆流程</h3><ol><li>进入页面，调用wx.login()方法，获取登录凭证（code）。</li><li>利用wx.request()发送code给开发者服务器，开发者服务器利用appid+appsecret+code向微信官方接口服务获取session_key + openid</li><li></li></ol><hr><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/api-login.2fcc9f35.jpg"></p><h3 id="v-if和v-show的区别-2"><a href="#v-if和v-show的区别-2" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h3><p>都是vue的指令，用法也相同，根据表达式的Boolean值来控制元素的显隐</p><p><strong>显示效果</strong></p><p>v-if控制的元素在隐藏后，是直接在文档消失了，</p><p>v-show控制的元素在隐藏后，是依旧存在于文档，只是没有显示出来</p><p><strong>原理</strong></p><p>v-if是控制虚拟dom的存在与否来间接控制真实dom的存在，故性能开销更大</p><p>v-show是控制元素的csss属性display，来控制元素的显隐藏，故性能开销更小</p><p><strong>应用</strong></p><p>在需要较少的切换时，甚至是一次性的切换时，建议使用v-if</p><p>在需要频繁切换时，建议使用v-show</p><h3 id="computed和methods的区别-1"><a href="#computed和methods的区别-1" class="headerlink" title="computed和methods的区别"></a>computed和methods的区别</h3><ul><li>computed会缓存数据，只有当数据变化了才会重新计算</li><li>methods每次调用都会重新编译计算</li><li>computed的效率高于methods</li><li>computed中定义的是属性而不是函数，所以使用时直接用<code>&#123;&#123;xxx&#125;&#125;</code>，而methods中定义的是函数，因此使用时需要<code>&#123;&#123;xxx()&#125;&#125;</code>。</li></ul><h3 id="computed和watch的区别（面试题）"><a href="#computed和watch的区别（面试题）" class="headerlink" title="computed和watch的区别（面试题）"></a>computed和watch的区别（面试题）</h3><ul><li><p>computed可以自己定义并劫持数据，watch只能监听来自data中</p></li><li><p>computed支持缓存，相依赖的数据发生改变才会重新计算，不支持异步操作</p></li><li><p>watch不支持缓存，只要监听的数据变化就会触发相应操作，支持异步操作</p></li><li><p>computed 有get和set属性</p></li><li><p>watch 有handler、deep、immediate</p></li></ul><h3 id="vue中组件传值的方式-2"><a href="#vue中组件传值的方式-2" class="headerlink" title="vue中组件传值的方式"></a>vue中组件传值的方式</h3><p>父子间传值：</p><p>props</p><p>provide inject</p><p>bus</p><p>$emit</p><p>$attrs</p><p>兄弟间传值：</p><p>bus</p><p>作用域插槽</p><p>三方插件</p><h3 id="为什么组件中的data是一个函数而不是对象-1"><a href="#为什么组件中的data是一个函数而不是对象-1" class="headerlink" title="为什么组件中的data是一个函数而不是对象"></a>为什么组件中的data是一个函数而不是对象</h3><ul><li><p>对象可能会存在覆盖，造成全局污染</p></li><li><p>组件是可复用的vue实例，一个组件被创建好之后，就可能被用在各个地方，而组件不管被复用了多少次，组件中的data数据都应该是相互隔离，互不影响的，基于这一理念，组件每复用一次，data数据就应该被复制一次，之后，当某一处复用的地方组件内data数据被改变时，其他复用地方组件的data数据不受影响。</p></li><li><p>组件中的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份data，就会造成一个变了全都会变的结果。</p></li><li><p>根实例对象data可以是对象也可以是函数（根实例是单例），不会产生数据污染情况</p></li></ul><h3 id="script标签的async和defer属性的区别-1"><a href="#script标签的async和defer属性的区别-1" class="headerlink" title="script标签的async和defer属性的区别"></a>script标签的async和defer属性的区别</h3><h3 id="query传参和params传参的区别-1"><a href="#query传参和params传参的区别-1" class="headerlink" title="query传参和params传参的区别"></a>query传参和params传参的区别</h3><ul><li>首先就是写法得不同，query 得写法是 用 path 来编写传参地址，而 params 得写法是用 name 来编写传参地址，你可以看一下编写路由时候得相关属性，你也可以输出一下 路由对象信息 看一下</li><li>接收方法不同， 一个用 query 来接收， 一个用 params 接收 ，总结就是谁发得 谁去接收</li><li>query 在刷新页面得时候参数不会消失，而 params 刷新页面得时候会参数消失，可以考虑本地存储解决</li><li>query 传得参数都是显示在url 地址栏当中，而 params 传参不会显示在地址栏</li></ul><h3 id="vue中用了哪些设计模式-1"><a href="#vue中用了哪些设计模式-1" class="headerlink" title="vue中用了哪些设计模式"></a>vue中用了哪些设计模式</h3><p>​Vue是一个综合性前端框架，它利用了一些设计模式来让代码更易于维护、可读性高、更好地解耦。下面是Vue中常用的设计模式的中文介绍。</p><ol><li><p>发布&#x2F;订阅模式（观察者模式）</p><p>   发布&#x2F;订阅模式是一种松散耦合设计模式，其中一个组件（发布方）发出事件，而其他组件（订阅方）则监听并处理它。<br>   在Vue中，我们可以使用<code>$on(eventName, callback)</code>方法订阅事件，使用<code>$emit(eventName, args)</code>方法发布事件。这个模式常用于事件总线和父子组件通信。<br>   观察者模式定义对象之间的一对多依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会收到通知并自动更新。这种模式有时也被称为发布&#x2F;订阅模式。在Vue中，父组件可以作为观察者订阅子组件的状态变化（例如子组件向父组件发送$emit消息），并更新自己的状态，而子组件则可以作为被观察者发送通知通知父组件更新状态。</p></li><li><p>单例模式</p><p>   单例模式是一种只允许创建一个对象的模式。在Vue中，这可以通过将一个对象实例化一次，然后在整个应用中共享它的方法和数据。<br>   Vue使用单例模式来创建全局组件（例如vue-router和vuex store）。global Vue对象也是唯一的，因此在整个应用程序中只能有一个实例。</p></li><li><p>工厂模式</p><p>   工厂模式是一种对象创建模式，其中一个对象的实例化是由一个工厂类负责的。Vue中可以使用工厂模式创建组件，这使我们可以动态地根据不同的数据创建不同的组件。<br>   在Vue中，我们可以使用动态组件来实现这一点。动态组件是由一个组件工厂函数创建的，该函数接收一个组件名称和一个组件对象，并返回一个新的组件对象。这样，我们就可以在运行时动态地创建并加载组件了。</p></li><li><p>适配器模式</p><p>   适配器模式是一种结构性设计模式，它允许不兼容的接口之间进行通信。在Vue中，我们可以使用适配器模式适配不同的数据源。</p></li></ol><h3 id="说一下前端有哪些性能优化"><a href="#说一下前端有哪些性能优化" class="headerlink" title="说一下前端有哪些性能优化"></a>说一下前端有哪些性能优化</h3><h3 id="什么是哈夫曼树-Huffman-Tree-1"><a href="#什么是哈夫曼树-Huffman-Tree-1" class="headerlink" title="什么是哈夫曼树(Huffman Tree)"></a>什么是哈夫曼树(Huffman Tree)</h3><p>​哈夫曼树又称<strong>最优二叉树</strong>，是一种<strong>带权路径长度最短</strong>的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。树的路径长度是从树根到每一结点的路径长度之和，记为WPL&#x3D;（W1<em>L1+W2</em>L2+W3<em>L3+…+Wn</em>Ln），N个权值Wi（i&#x3D;1,2,…n）构成一棵有N个叶结点的二叉树，相应的叶结点的路径长度为Li（i&#x3D;1,2,…n）。可以证明哈夫曼树的WPL是最小的。</p><h3 id="vite-和-vue-cli的区别-1"><a href="#vite-和-vue-cli的区别-1" class="headerlink" title="vite 和 vue-cli的区别"></a>vite 和 vue-cli的区别</h3><h3 id="v-for为什么需要绑定key值-1"><a href="#v-for为什么需要绑定key值-1" class="headerlink" title="v-for为什么需要绑定key值"></a>v-for为什么需要绑定key值</h3><p>关键词：<strong>性能优化</strong>、<strong>diff算法节点比对</strong>、<strong>key不能是index</strong></p><p>为了性能优化 因为vue使用了虚拟DOM，更新DOM时用diff算法对节点进行一一比对，比如有很多li元素，要在某个位置插入一个li元素，但没有给li上加key，那么在进行运算的时候，就会将所有li元素重新渲染一遍，但是如果有key，那么它就会按照key一一比对li元素，只需要创建新的li元素，插入即可，不需要对其他元素进行修改和重新渲染。</p><p>key也不能是li元素的index，因为假设我们给数组前插入一个新元素，它的下标是0，那么和原来的第一个元素重复了，整个数组的key都发生了改变，这样就跟没有key的情况一样了</p><h3 id="mixin和vuex的区别-1"><a href="#mixin和vuex的区别-1" class="headerlink" title="mixin和vuex的区别"></a>mixin和vuex的区别</h3><h3 id="mixin和setup的区别-1"><a href="#mixin和setup的区别-1" class="headerlink" title="mixin和setup的区别"></a>mixin和setup的区别</h3><p>mixin 很容易发生冲突：因为每个特性的属性都被合并到同一个组件中，所以为了避免 property 名冲突和调试，你仍然需要了解其他每个特性。</p><p>可重用性是有限的：我们不能向 mixin 传递任何参数来改变它的逻辑，这降低了它们在抽象逻辑方面的灵活性。</p><h3 id="vue3对于vue2有了那些变化-1"><a href="#vue3对于vue2有了那些变化-1" class="headerlink" title="vue3对于vue2有了那些变化"></a>vue3对于vue2有了那些变化</h3><ul><li>底层实现原理从Object.defineProperty改为了Proxy</li><li>重写了虚拟dom和Tree-Shaking</li><li>更好的支持TypeScript</li><li>新增了组合式API（Composition API）</li><li>新增组件（Fragment组件可以没有根标签 、Teleport将html结构移动到指定位置、Suspense等待异步组件时渲染一些额外内容）</li><li>更新换代了新的生命周期钩子函数</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>移除了filter过滤器</li><li>性能提升（打包大小减少41%、初次渲染快55%, 更新渲染快133%、内存减少54%）</li></ul><h3 id="ref和toRef的区别、特点：-1"><a href="#ref和toRef的区别、特点：-1" class="headerlink" title="ref和toRef的区别、特点："></a>ref和toRef的区别、特点：</h3><ol><li>ref本质是拷贝，修改响应式数据不影响原始数据；toRef的本质是引用关系，修改响应式数据会影响原始数据</li><li>ref数据发生改变，界面会自动更新；toRef当数据发生改变是，界面不会自动更新</li><li>toRef传参与ref不同；toRef接收两个参数，第一个参数是哪个对象，第二个参数是对象的哪个属性</li><li>toRef 用于创建对象指定的属性响应式，换句话说就是只能控制一个对象中的一个属性。</li><li>toRefs 用于创建对象响应式。</li><li>他们对响应式的处理你可以理解为： toRef 类似 ref， toRefs 类似 reactive</li></ol><table><thead><tr><th>类型</th><th>是否触发页面改变</th><th>是否可以解构</th></tr></thead><tbody><tr><td>ref</td><td><strong>是</strong></td><td>否</td></tr><tr><td>reactive</td><td><strong>是</strong></td><td>否</td></tr><tr><td>toRef</td><td>否</td><td>否</td></tr><tr><td>toRefs</td><td>否</td><td><strong>是</strong></td></tr></tbody></table><h3 id="什么是bfc"><a href="#什么是bfc" class="headerlink" title="什么是bfc"></a>什么是bfc</h3><p><strong>概念</strong></p><ul><li><p>bfc 即 (Block Formatting Contexts 块级格式化上下文)，是w3c css2.1规范中的一个概念</p></li><li><p>指的是浏览器创建了独立的一个渲染区域，并且拥有一套独立的渲染规则，他决定了子元素如何定位、以及与其他元素的相互作用</p></li></ul><p><strong>特点</strong></p><ul><li>里面的元素不会影响外面的元素</li></ul><p><strong>布局规则</strong></p><ul><li>内部盒子在垂直方向、一个接一个放置</li><li>内部盒子的边距会重叠</li><li>计算BFC的高度时，浮动元素也参与计算</li></ul><h3 id="html5新增特性"><a href="#html5新增特性" class="headerlink" title="html5新增特性"></a>html5新增特性</h3><p>​HTML5 是 <strong>HyperText Markup Language 5 的缩写，HTML5</strong> 技术结合了 HTML4.01 的相关标准并革新，符合现代网络发展要求，在 2008 年正式发布</p><ol><li>语义化标签</li><li>新增Input表单的类型和属性</li><li>audio、video音频和视频</li><li>Canvas绘图</li><li>SVG绘图</li><li>地理定位</li><li>拖拽API</li><li>WebStorage</li><li>WebWorker</li><li>WebSocket</li></ol><h3 id="css3新增特性"><a href="#css3新增特性" class="headerlink" title="css3新增特性"></a>css3新增特性</h3><ol><li>选择器</li><li>新样式(border-radius、box-shadow、border-image、background-size、text-overflow)</li><li>transition过渡（duration、delay）</li><li>transform变换（位移translate、缩放scale、旋转rotate、倾斜skew）</li><li>aninmation动画</li><li>渐变（linear-gradient：线性渐变、radial-gradient：径向渐变）</li><li>其他（<code>flex</code>弹性布局、<code>Grid</code>栅格布局）</li></ol><h3 id="伪类和伪类元素的区别"><a href="#伪类和伪类元素的区别" class="headerlink" title="伪类和伪类元素的区别"></a>伪类和伪类元素的区别</h3><p>伪类：伪类用于选择DOM树之外的信息，或是不能用简单选择器进行表示的信息。前者包含那些匹配指定状态的元素，比如<code>:visited</code>，<code>:active</code>；后者包含那些满足一定逻辑条件的DOM树中的元素，比如<code>:first-child</code>，<code>:first-of-type</code>，<code>：target</code>。</p><p>伪元素：伪元素为DOM树没有定义的虚拟元素。不同于其他选择器，它不以元素为最小选择单元，它选择的是元素指定内容。比如<code>::before</code>表示选择元素内容的之前内容，也就是<code>&quot;&quot;</code>；<code>::selection</code>表示选择元素被选中的内容。</p><p>伪元素和伪类的区别：<br>（1）伪类和伪元素的最大区别就在于有没有创建一个文档树以外的元素。伪元素创建了一个文档树以外的元素并为他添加样式，这个容器不包含任何DOM元素但是可以包含内容。<strong>换句话说伪类和伪元素的区别就是伪类的操作对象是文档树中已有的元素，而伪元素则创建了一个文档树以外的元素。</strong><br>（2）伪类使用的是单冒号，但是在css3中规定伪元素使用的双冒号，但是除了少部分的伪元素必须使用双冒号以外，像after还有before都是支持单引号的。为了兼容性所以目前还是在使用一些常见的伪元素的时候采用单冒号较为稳妥。</p><h3 id="什么是深拷贝和浅拷贝以及实现方式"><a href="#什么是深拷贝和浅拷贝以及实现方式" class="headerlink" title="什么是深拷贝和浅拷贝以及实现方式"></a>什么是深拷贝和浅拷贝以及实现方式</h3><p>深浅拷贝都是返回一个新的对象</p><p><strong>深拷贝：</strong>类似于文件复制粘贴，拷贝的是值</p><p>实现：JSON.stringify JSON.parse、自定义递归书写对应的深拷贝(重点)、第三方插件lodash.js</p><p><strong>浅拷贝：</strong>类似于文件的创建快捷方式，第一层拷贝值，其余拷贝地址（所以里面的对象是共用的）</p><p>实现：Object.assign、自定义函数（遍历第一层复制）、第三方插件lodash.js、使用扩展运算符实现数组及对象的浅拷贝、使用数组的concat方法、使用数组的slice方法</p><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call apply bind"></a>call apply bind</h3><p>这三个字函数都用于改变函数执行的this指向</p><ul><li><p>call，第一个参数为改变this指向指向的对象，往后传递的是一个个参数</p></li><li><p>apply，第一个参数为改变this指向指向的对象，往后传递的是一个参数数组</p></li><li><p>bind，第一个参数为改变this指向指向的对象，返回的是函数需要自己调用、往后传递的是一个个参数</p></li></ul><h3 id="节流防抖"><a href="#节流防抖" class="headerlink" title="节流防抖"></a>节流防抖</h3><p><strong>节流：</strong>在规定的时间内连续触发，只执行第一次，在该时间过后才会执行触发的下一个事件</p><ul><li><p>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p></li><li><p>懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</p></li><li><p>比如窗口调整、页面滚动、抢购和疯狂点击等会用到节流。</p></li></ul><p><strong>防抖：</strong>在规定的时间内连续触发事件只执行最后一次</p><ul><li>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源；</li></ul><h3 id="get和post请求"><a href="#get和post请求" class="headerlink" title="get和post请求"></a>get和post请求</h3><p><strong>get请求</strong></p><ul><li>get请求一般用于获取数据（安全性低效率高速度快)</li><li>默认的请求方式为get请求（没有设置对应的请求那么就是get请求)</li><li>传输的参数利用?进行拼接，拼接到对应的url</li><li>get请求会默认缓存对应的参数</li><li>传输的参数会在请求头中url</li><li>get请求传输的数据大小有限制(2kb)</li><li>get的请求参数必须是ASCII码字符</li></ul><p><strong>post请求</strong></p><ul><li>post请求的数据(封装为一个表单对象）</li><li>在请求体中post请求相对get要安全</li><li>post请求的数据量大于get(数据没有大小限制)</li><li>post请求的数据不会被缓存</li><li>post请求必须手动设置缓存</li></ul><h3 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a>TCP的三次握手和四次挥手</h3><h3 id="有没有过封装axios？"><a href="#有没有过封装axios？" class="headerlink" title="有没有过封装axios？"></a>有没有过封装axios？</h3><ul><li>首先区分开发环境和生产环境（创建对应的.env.development，.env.production文件）</li><li>使用axios.create创建一个axios对象进行基础的配置</li><li>baseUrl设置为process.VUE_APP_BASE_API（会根据环境的变化切换对应的url前缀）</li><li>然后创建对应的请求拦截（用于发送对应的token）和响应拦截（根据响应的状态码进行响应的操作和提示）</li><li>最后暴露这个配置好的axios对象，我们就可以在其他的地方导入后简单的配置就可以进行请求了</li></ul><h3 id="有没有封装过Vue组件？"><a href="#有没有封装过Vue组件？" class="headerlink" title="有没有封装过Vue组件？"></a>有没有封装过Vue组件？</h3><p>UI组件、业务组件</p><ol><li>建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。(os:先思考1小时，写代码10分钟)</li><li>准备好组件的数据输入。即分析好逻辑，定好props里面的数据、类型以及默认值还要考虑组件内使用三种插槽哪一种或者搭配使用。考虑以下是否需要sync修饰符是否需要来回的回调函数传递。</li><li>准备好组件的数据输出。即根据组件逻辑,做好要暴露出来的方法。</li><li>封装完毕了，直接调用即可</li></ol><h3 id="后台管理权限系统权限设计思路-1"><a href="#后台管理权限系统权限设计思路-1" class="headerlink" title="后台管理权限系统权限设计思路"></a>后台管理权限系统权限设计思路</h3><ul><li><p>不用员工登录进去会有不同的TOKEN利用不同的TOKEN换取更详细的用户信息</p><p>(侧边栏数据按钮权限数据头像等)</p></li><li><p>左侧侧边栏通过V-FOR侧边栏数据进行遍历可以写一个自定义指令也可以直接v-if来判断按钮权限数据判断，精确到按钮级别</p></li><li><p>为了避免低级别用户 强行进入高级别用户的URL 路由实现动态推入 比对权限和私有路由的关系 进行一一推入 最后使用router.addroute的重置路由高级api进行生效！</p></li></ul><h3 id="symbol的原理和应用场景-1"><a href="#symbol的原理和应用场景-1" class="headerlink" title="symbol的原理和应用场景"></a>symbol的原理和应用场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="comment">//是由机器码 时间戳 进程id 随机数 组成的唯一值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> staff1 = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">var</span> staff2 = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [staff1]:&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">height</span>:<span class="number">170</span>&#125;,</span><br><span class="line">    [staff2]:&#123;<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">height</span>:<span class="number">160</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grade)<span class="comment">//jack: &#123;age: 12, height: 160&#125; 此时第一个jack被覆盖了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时利用symbol</span></span><br><span class="line"><span class="keyword">var</span> staff1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> staff2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [staff1]:&#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">height</span>:<span class="number">170</span>&#125;,</span><br><span class="line">    [staff2]:&#123;<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">height</span>:<span class="number">160</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grade)</span><br><span class="line"><span class="comment">//Symbol(jack): &#123;age: 18, height: 170&#125;</span></span><br><span class="line"><span class="comment">//Symbol(jack): &#123;age: 12, height: 160&#125;</span></span><br></pre></td></tr></table></figure><h3 id="虚拟dom的作用-1"><a href="#虚拟dom的作用-1" class="headerlink" title="虚拟dom的作用"></a>虚拟dom的作用</h3><ul><li>增强语法 简化语法</li><li>增强性能 保证性能下限、极大的减少回流重绘</li><li>跨平台 虚拟dom可以开发小程序 安卓 iOS</li></ul><h3 id="微信小程序登陆流程-1"><a href="#微信小程序登陆流程-1" class="headerlink" title="微信小程序登陆流程"></a>微信小程序登陆流程</h3><ol><li>进入页面，调用wx.login()方法，获取登录凭证（code）。</li><li>利用wx.request()发送code给开发者服务器，开发者服务器利用appid+appsecret+code向微信官方接口服务获取session_key + openid</li><li></li></ol><hr><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/api-login.2fcc9f35.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 重要知识点汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS重要知识点</title>
      <link href="/2023/06/06/TechnicalArticles/KnowledgePoints/JS%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2023/06/06/TechnicalArticles/KnowledgePoints/JS%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="JS重要知识点"><a href="#JS重要知识点" class="headerlink" title="JS重要知识点"></a>JS重要知识点</h1><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230316090723110.png" alt="image-20230316090723110" title="前端知识体系"></p><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><ul><li>全局变量必须先声明</li><li>禁止使用with</li><li>新增了eval作用域</li><li>this指向window</li><li>函数参数不能重名</li></ul><h3 id="ES6新增特性"><a href="#ES6新增特性" class="headerlink" title="ES6新增特性"></a>ES6新增特性</h3><p>es6指的是2015年之后ECMA发布js规范，通常被称为es6规范</p><p>变量：let const </p><p>基础数据类型：symbol，bigInt</p><p>字符串：模板字符串，includes(),startwidth(),endwidth(),repeat()</p><p>数组：Array.of(),Array.from(),Array.find(),Array.findIndex(),Array.fill(),Array.flat()</p><p>函数：参数默认值，箭头函数</p><p>类：新增了类</p><p>其他：解构赋值 扩展运算符 Promise async await 模块化</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是es6新增的异步编程的一种解决方案，其实是一个构造函数，</p><p>自身有三个状态，pending，fulfilled，rejected，状态一旦发生变化，不可改变</p><p>在原型上有then，catch，finally三个方法，静态方法有resolve，reject，race，all，allSettled</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>函数嵌套函数，内部函数拥有外部函数的参数和变量的引用</p><p>优点：</p><ul><li>避免的了全局污染</li><li>扩大了对应的变量的作用域</li><li>不需要创建新的对象，使用过程中效率会更高</li></ul><p>缺点</p><ul><li>因为会一直保持引用，会导致内存一直被占用</li><li>在ie浏览器的情况下会导致内存泄漏</li></ul><h3 id="节流防抖"><a href="#节流防抖" class="headerlink" title="节流防抖"></a>节流防抖</h3><p><strong>节流：</strong>在规定的时间内连续触发，只执行第一次，在该时间过后才会执行触发的下一个事件</p><ul><li><p>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次</p></li><li><p>懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源</p></li><li><p>比如窗口调整、页面滚动、抢购和疯狂点击等会用到节流。</p></li></ul><p><strong>防抖：</strong>在规定的时间内连续触发事件只执行最后一次</p><ul><li>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源；</li></ul><h3 id="手写Ajax"><a href="#手写Ajax" class="headerlink" title="手写Ajax"></a>手写Ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="title function_">addEventlistener</span>(<span class="string">&#x27;readystatechange&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readeyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseXML</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="this指向的种类"><a href="#this指向的种类" class="headerlink" title="this指向的种类"></a>this指向的种类</h3><ol><li>全局对象：如果this位于函数外，this指向全局对象（window）。</li><li>隐式绑定：如果this位于函数内，并且函数在对象内部调用，this指向调用该函数的对象。</li><li>显式绑定：使用call、apply、bind方法，在调用函数时手动绑定this的指向。</li><li>new绑定：使用new调用构造函数时，this指向新创建的实例对象。</li><li>箭头函数绑定：箭头函数的this指向不会改变，它会“捕获”上下文中的this值，指向箭头函数声明时的作用域内的this值</li></ol><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call apply bind"></a>call apply bind</h3><p>这三个字函数都用于改变函数执行的this指向</p><ul><li><p>call，第一个参数为改变this指向指向的对象，往后传递的是一个个参数</p></li><li><p>apply，第一个参数为改变this指向指向的对象，往后传递的是一个参数数组</p></li><li><p>bind，第一个参数为改变this指向指向的对象，返回的是函数需要自己调用、往后传递的是一个个参数</p></li></ul><h3 id="什么是JSONP"><a href="#什么是JSONP" class="headerlink" title="什么是JSONP"></a>什么是JSONP</h3><p>​JSONP是一种解决跨域的一种的方案，它实际上也是一个get请求，它是利用对应的script标签不受跨域影响的限制来解决对应的跨域问题。(带对应的href src等的标签都不受跨域的影响script link farmes等)</p><p>​前端在src中传递函数名，后端传入参数，回到前端再调用</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h3><p>async和awiat是es7新增的修饰关键词</p><p>async属于语法糖（await一定要在async里面使用 且<strong>await修饰的是promise</strong>）</p><p><strong>async</strong></p><ul><li>用于修饰函数,被其修饰的函数会返回一个promise对象</li><li>在修饰的函数内返回值相当于调用了resolve方法， 返回值会被传递给then</li><li>在修饰的函数内报错相当于调用了reject方法，错误会被传递给catch</li><li>默认会执行then方法</li></ul><p><strong>awiat</strong></p><ul><li>用于修饰promise，且只能是在async修饰的函数内使用，它会让当前的<strong>js引擎线程</strong>(执行上下文等待)，当前修饰的promise状态不为pending的时候就会释放</li></ul><h3 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h3><p>深浅拷贝都是返回一个新的对象</p><p><strong>深拷贝：</strong>类似于文件复制粘贴，拷贝的是值</p><p>实现：JSON.stringify JSON.parse(无法拷贝方法)、自定义递归书写对应的深拷贝(重点)、第三方插件lodash.js（cloneDeep）</p><p><strong>浅拷贝：</strong>类似于文件的创建快捷方式，第一层拷贝值，其余拷贝地址（所以里面的对象是共用的）</p><p>实现：Object.assign、自定义函数（遍历第一层复制）、第三方插件lodash.js、使用扩展运算符实现数组及对象的浅拷贝、使用数组的concat方法、使用数组的slice方法</p><h3 id="如何数组去重"><a href="#如何数组去重" class="headerlink" title="如何数组去重"></a>如何数组去重</h3><ul><li>利用set然后Array.from转换为数组</li><li>利用对象的属性不重复的特点</li><li>循环一个个去重</li></ul><h3 id="new一个对象的过程"><a href="#new一个对象的过程" class="headerlink" title="new一个对象的过程"></a>new一个对象的过程</h3><ol><li>创建一个新对象</li><li>将原型加到这个对象上</li><li>绑定this</li><li>返回这个构造好的新对象</li></ol><h3 id="web性能优化"><a href="#web性能优化" class="headerlink" title="web性能优化"></a>web性能优化</h3><p><strong>DOM层面</strong></p><ul><li>减少重绘回流</li><li>使用事件委托</li><li>函数的防抖节流</li><li>Keepalive缓存组件</li></ul><p><strong>http层面</strong></p><ul><li>利用浏览器的缓存</li><li>减少http的请求次数和大小</li><li>DNS预解析</li><li>精灵图</li><li>组件库按需引入</li><li>合理利用路由懒加载</li></ul><p><strong>长列表优化</strong></p><p>对于数量极多的长列表，全部渲染到页面势必会影响性能，但是页面所显示的列表最终是只有少数几个，所以此时可以利用算法，针对长列表进行截取，只展示需要看到的数据。</p><h3 id="栈和堆的区别"><a href="#栈和堆的区别" class="headerlink" title="栈和堆的区别"></a>栈和堆的区别</h3><p>栈（stack）：存放基本数据类型，存放局部变量，由编译器分配释放</p><p>堆（heap）：存放对象，一般由程序员分配释放或者由系统自动释放</p><h3 id="什么是window对象和document对象"><a href="#什么是window对象和document对象" class="headerlink" title="什么是window对象和document对象"></a>什么是window对象和document对象</h3><p>window对象代表浏览器中打开的一个窗口。document对象代表整个html文档。实际上，document对象是window对象的一个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">confirm</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">prompt</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setInterval</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearInterval</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">write</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">createelement</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">getElementById</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">getElementByName</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">appendChild</span></span><br></pre></td></tr></table></figure><h3 id="null，undefined的区别"><a href="#null，undefined的区别" class="headerlink" title="null，undefined的区别"></a>null，undefined的区别</h3><p>null表示空对象引用，转换为数值时为0。</p><p>undefined表示声明的变量未初始化，转换为数值时为NAN。</p><p>typeof(null) – object;</p><p>typeof(undefined) – undefined</p><h3 id="数组原生方法"><a href="#数组原生方法" class="headerlink" title="数组原生方法"></a>数组原生方法</h3><p><strong>可改变原来的值</strong></p><p>pop、push、shift、unshift、splice、reverse、sort</p><p><strong>不可改变原来的值</strong></p><p>concat、join、slice、toString、indexOf、lastIndexOf、reduce、forEach、map、filter、every、some</p><h3 id="什么是渐进式升级和优雅降级"><a href="#什么是渐进式升级和优雅降级" class="headerlink" title="什么是渐进式升级和优雅降级"></a>什么是渐进式升级和优雅降级</h3><p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进，达到更好的用户体验。</p><p>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><h3 id="什么是-DOM-和-BOM？"><a href="#什么是-DOM-和-BOM？" class="headerlink" title="什么是 DOM 和 BOM？"></a>什么是 DOM 和 BOM？</h3><p>DOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口</p><p>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的方法和接口</p><p>并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</p><h3 id="JavaScript-中有哪些类型的弹出框？"><a href="#JavaScript-中有哪些类型的弹出框？" class="headerlink" title="JavaScript 中有哪些类型的弹出框？"></a>JavaScript 中有哪些类型的弹出框？</h3><ul><li>window.alert</li><li>window.confirm</li><li>window.prompt</li></ul><h3 id="JavaScript-是静态类型语言还是动态类型语言？这是什么意思"><a href="#JavaScript-是静态类型语言还是动态类型语言？这是什么意思" class="headerlink" title="JavaScript 是静态类型语言还是动态类型语言？这是什么意思"></a>JavaScript 是静态类型语言还是动态类型语言？这是什么意思</h3><p>JavaScript 是动态类型的，这意味着在运行时检查类型</p><p>在静态类型语言中，在编译时检查类型</p><h3 id="什么是幽灵节点"><a href="#什么是幽灵节点" class="headerlink" title="什么是幽灵节点"></a>什么是幽灵节点</h3><p>在HTML5文档声明中,内联元素的所有解析和渲染如同每个行框盒子前面有一个空白的节点,这个空白节点不占据任何宽度、也没有办法通过脚本获得,</p><p><strong>幽灵空白节点</strong>就是行内块元素，行内块元素会默认是基线对齐方式，所以距离底线会有3-5px的间隙，这个间隙问题就叫幽灵空白节点。</p><h3 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h3><p>将一个多参数的函数转化为多个函数，</p><p>使其可以任意组成、参数复用、提前返回和延迟执行</p><p>在不改变原函数的前提下，为函数预置通用参数，供多次重复调用。</p><h3 id="如何获取JS准确类型？typeof有什么缺陷？"><a href="#如何获取JS准确类型？typeof有什么缺陷？" class="headerlink" title="如何获取JS准确类型？typeof有什么缺陷？"></a>如何获取JS准确类型？typeof有什么缺陷？</h3><p>Object.prototype.toString.call([null])  &#x3D;&gt;[object Null]</p><p>typeof只能获取值类型</p><h3 id="事件轮询"><a href="#事件轮询" class="headerlink" title="事件轮询"></a>事件轮询</h3><p>​EventLoop是js引擎的一个运行机制，主要描述的是，当程序执行到异步任务时，会将异步任务划分为宏任务和微任务并且放入对应的宏任务队列和微任务队列，然后js引擎不断交替执行宏任务及其包含的微任务，以上行为被称之为事件轮询</p><p><strong>宏任务（线程直接分配的）</strong></p><p>script标签、定时器(setInterval,setTimeout)、I&#x2F;O、UI rendering等</p><p><strong>微任务</strong></p><p>promise.then()、promise.catch()、promise.finally()</p><h3 id="JSON序列化反序列化会丢失什么？"><a href="#JSON序列化反序列化会丢失什么？" class="headerlink" title="JSON序列化反序列化会丢失什么？"></a>JSON序列化反序列化会丢失什么？</h3><ul><li>Symbol会丢失 </li><li>原型链丢失 </li><li>undefine NAN 和Ininity丢失 </li><li>循环引用会丢失 </li><li>因为字符串序列化无法对复杂函数类型化 </li><li>JS序列化函数内部缺陷</li></ul><h3 id="TS和JS的区别"><a href="#TS和JS的区别" class="headerlink" title="TS和JS的区别"></a>TS和JS的区别</h3><p>TypeScript（TS）和JavaScript（JS）之间有几个主要区别：</p><ol><li>类型系统：最显著的区别是TypeScript具有静态类型系统，而JavaScript是一种动态类型语言。在TypeScript中，可以声明变量的类型，并在编译时进行类型检查，以捕获潜在的类型错误。这有助于提高代码的可靠性和可维护性。</li><li>类和接口：TypeScript支持类和接口的概念，可以进行面向对象编程。它提供了类和接口的语法，使得代码的组织和复用更加方便。JavaScript也可以实现类似的功能，但它的语法和机制不如TypeScript清晰和严格。</li><li>编译：JavaScript是一种解释执行的语言，而TypeScript需要先将其转换为JavaScript，然后在浏览器或Node.js环境中执行。这意味着在使用TypeScript时需要进行编译步骤，将TypeScript代码转换为JavaScript代码。TypeScript的编译过程可以提供更多的检查和优化。</li><li>生态系统和库支持：JavaScript是一种广泛使用的语言，有着庞大的生态系统和丰富的库支持。TypeScript是建立在JavaScript之上的，可以直接使用JavaScript的库和工具。此外，TypeScript还提供了自己的类型定义文件（.d.ts），用于描述JavaScript库的类型信息，提供更好的开发体验和工具支持。</li></ol><p>总的来说，TypeScript是JavaScript的超集，它添加了静态类型系统和其他一些特性，以提供更好的开发体验和代码质量。如果你希望在开发过程中获得更强大的类型检查和更好的代码组织能力，以及更好地与大型项目和团队合作，那么TypeScript可能是一个很好的选择。但如果你对动态类型和灵活性更感兴趣，或者在小型项目中更喜欢快速迭代和开发的速度，那么JavaScript可能更适合你。</p><h3 id="promise-和-async-await的区别"><a href="#promise-和-async-await的区别" class="headerlink" title="promise 和 async await的区别"></a>promise 和 async await的区别</h3><ol><li>语法风格：Promise 是基于回调函数的异步编程模式，使用链式调用的方式处理异步操作。而 async&#x2F;await 则是基于 Promise 的语法糖，使用类似同步代码的方式编写异步操作。</li><li>错误处理：在 Promise 中，错误处理通过 <code>then</code> 方法的第二个回调函数或 <code>catch</code> 方法来处理。而在 async&#x2F;await 中，可以使用 <code>try/catch</code> 块来捕获和处理错误。</li></ol><h3 id="Js定时器计时不准"><a href="#Js定时器计时不准" class="headerlink" title="Js定时器计时不准"></a>Js定时器计时不准</h3><p><strong>原因：</strong></p><ul><li>js是单线程的，可能会因为一些阻塞操作和网络加载的原因导致计时器不准</li><li>其次浏览器的时间最小精度也会有影响</li><li>或者是因为资源调度，操作系统会对定时器有所控制</li></ul><p><strong>解决方法:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// performance.now 比 Date.now 更精确</span></span><br><span class="line"><span class="keyword">let</span> startTime = performance.<span class="title function_">now</span>();</span><br><span class="line"><span class="comment">// count表示定时器被调用的次数，次数需要是全局变量</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myTimeout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> runTime = performance.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 先增加次数</span></span><br><span class="line">    ++count;</span><br><span class="line">    <span class="comment">// diffTime 就是已经延后的时间</span></span><br><span class="line">    <span class="keyword">let</span> diffTime = (runTime - (startTime + count * <span class="number">1000</span>));</span><br><span class="line">    <span class="comment">// 既然已经延后了，就需要时间间隔，减去已经拖延的时间，提前开始</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(myTimeout, <span class="number">1000</span> - diffTime);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> t = <span class="built_in">setTimeout</span>(myTimeout , <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="import-和-require-的区别"><a href="#import-和-require-的区别" class="headerlink" title="import 和 require 的区别"></a>import 和 require 的区别</h3><ul><li>import是ES6新增的官方提供的模块化方案，require是commonjs社区中的模块化方案</li><li>import可以导入整个模块（变量、函数和类），require只能导入模块中的变量、函数和默认导出</li><li>import可以按需加载，require是同步导入</li></ul><h3 id="JS中什么是执行上下文"><a href="#JS中什么是执行上下文" class="headerlink" title="JS中什么是执行上下文"></a>JS中什么是执行上下文</h3><p>执行上下文（Execution Context）是 JavaScript 中一个重要的概念，它描述了在 JavaScript 代码执行时的环境。在执行任何 JavaScript 代码之前，JavaScript 引擎都会先创建一个全局执行上下文，然后在运行时动态创建其他执行上下文。</p><p>每当 JavaScript 代码开始执行一个函数，都会创建一个新的执行上下文。执行上下文包含了以下信息：</p><ul><li>变量对象（Variable Object）：包含了函数内部定义的所有变量和函数声明。对于全局执行上下文来说，变量对象就是全局对象。</li><li>作用域链（Scope Chain）：描述了函数嵌套关系，保证了变量和函数的有序访问。</li><li>this 值：描述了当前函数执行时的上下文对象。</li></ul><p>在代码执行过程中，JavaScript 引擎会根据当前执行上下文的作用域链来查找变量和函数，如果在当前执行上下文中找不到，就会一层一层地向上查找，直到找到为止。这个查找的过程就是作用域链查找。</p><p>执行上下文可以分为三种类型：</p><ol><li>全局执行上下文：在整个页面生命周期中只有一个全局执行上下文，它在页面刚刚加载时被创建，并在页面关闭时被销毁。</li><li>函数执行上下文：每当执行一个函数时，都会创建一个新的函数执行上下文。</li><li>eval 执行上下文：在 eval 函数中执行的代码也会创建一个执行上下文。</li></ol><p>在 JavaScript 中，执行上下文是一个栈结构，被称为执行栈（Execution Stack）或调用栈（Call Stack）。每当一个新的执行上下文被创建时，它会被压入执行栈的顶部。当执行完一个函数后，它对应的执行上下文就会被弹出执行栈，执行回到调用它的上一个执行上下文。</p><p>JavaScript 引擎在执行 JavaScript 代码时，会根据执行上下文的创建、入栈、执行、出栈等过程，来控制代码的执行顺序和内存的管理。在执行代码时，JavaScript 引擎会将当前执行上下文的变量和函数存储在栈内存中，当执行上下文被弹出栈时，这些变量和函数也会被销毁。这种机制称为“栈内存管理”。</p><p>JavaScript 中，执行上下文的创建和销毁是由 JavaScript 引擎自动完成的，但是我们可以通过代码中的函数调用、变量声明等方式，来影响执行上下文的创建和作用域链的构建。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">javascriptCopy code<span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><p>在上面的代码中，当执行 <code>foo</code> 函数时，会创建一个新的函数执行上下文，其中包含了变量 <code>a</code> 和函数 <code>bar</code> 的引用。在 <code>bar</code> 函数内部执行时，会创建一个新的函数执行上下文，其中包含了变量 <code>b</code> 和 <code>console.log</code> 函数的引用。在函数执行结束时，<code>bar</code> 函数的执行上下文会被销毁，其中的变量和函数也会被销毁。接着，<code>foo</code> 函数的执行上下文也会被销毁，整个执行过程就结束了。</p><p>总之，执行上下文是 JavaScript 中一个重要的概念，它描述了在 JavaScript 代码执行时的环境。了解执行上下文的创建、作用域链和内存管理等过程，有助于我们更好地理解和掌握 JavaScript 语言。</p><h3 id="js中for循环-for-in循环-for-of循环-forEach循环各有什么区别"><a href="#js中for循环-for-in循环-for-of循环-forEach循环各有什么区别" class="headerlink" title="js中for循环 for in循环 for of循环  forEach循环各有什么区别"></a>js中for循环 for in循环 for of循环  forEach循环各有什么区别</h3><p>JavaScript 中有多种循环语句可供选择，以下是它们的主要区别：</p><ol><li><code>for</code> 循环：<code>for</code> 循环是最常见的循环语句之一，它允许你以指定的方式迭代一个代码块一定的次数。你可以使用 <code>for</code> 循环来迭代一个数组、字符串或类似数组的对象，也可以使用它来执行任意数量的代码块。</li><li><code>for-in</code> 循环：<code>for-in</code> 循环允许你枚举一个对象的所有可枚举属性（**<code>enumerable</code>：true**）。它会将对象的每个属性名称作为迭代变量，并执行迭代块中的代码。需要注意的是，<code>for-in</code> 循环不保证对象属性的顺序，也会迭代到从原型链继承的属性。</li><li><code>for-of</code> 循环：<code>for-of</code> 循环是 ECMAScript 6 中引入的一种新的循环语句，它允许你遍历可迭代对象的元素。它支持迭代数组、字符串、Map、Set 等内置的可迭代对象，以及使用迭代器的任何对象。与 <code>for-in</code> 循环不同，<code>for-of</code> 循环只迭代对象自己的属性，而不是从原型链继承的属性。</li><li><code>forEach</code> 循环：<code>forEach</code> 是一个数组的方法，它允许你迭代数组的每个元素并执行一个回调函数。与 <code>for</code> 循环和 <code>for-of</code> 循环不同，<code>forEach</code> 循环不支持 <code>break</code> 和 <code>continue</code> 语句。此外，它也不返回任何值，而只是执行回调函数。</li></ol><p>需要注意的是，<code>for</code> 循环、<code>for-in</code> 循环、<code>for-of</code> 循环和 <code>forEach</code> 循环都有不同的使用场景和优缺点。在选择循环语句时，应该根据具体情况来选择最合适的循环方式。</p><h3 id="JS的模块化"><a href="#JS的模块化" class="headerlink" title="JS的模块化"></a>JS的模块化</h3><h4 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h4><p>​将一个复杂的程序依照一定的规则封装成多个文件(模块) 并进行组合在一起。每个模块的内部数据是私有的, 只是向外部暴露一些接口(方法)与外部通信。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>避免命名空间冲突（命名空间(namespace)是将一组变量、函数、对象封装在一个空间的行为）</li><li>实现更好的分离，实现按需加载</li><li>提高代码的复用性、可维护性</li></ul><h4 id="模块化的规范"><a href="#模块化的规范" class="headerlink" title="模块化的规范"></a>模块化的规范</h4><h5 id="ES6的模块化"><a href="#ES6的模块化" class="headerlink" title="ES6的模块化"></a>ES6的模块化</h5><p>ES6新增的模块化规范</p><p>使用export导出，import导入</p><h5 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h5><p>是nodejs中使用到的模块化规范</p><p>module.export导出，require导入</p><h5 id="AMD（Asynchronous-Module-Definition）"><a href="#AMD（Asynchronous-Module-Definition）" class="headerlink" title="AMD（Asynchronous Module Definition）"></a>AMD（Asynchronous Module Definition）</h5><p>提倡依赖前置，定义时就需要声明其他依赖的模块</p><h5 id="CMD（Common-Module-Definition）"><a href="#CMD（Common-Module-Definition）" class="headerlink" title="CMD（Common Module Definition）"></a>CMD（Common Module Definition）</h5><p>提倡就近依赖（按需加载），需要某个模块时再require加载</p><h3 id="hash路由和history路由的区别"><a href="#hash路由和history路由的区别" class="headerlink" title="hash路由和history路由的区别"></a>hash路由和history路由的区别</h3><ul><li>显示格式方面<ul><li>hash路由包含#符号，后面跟着的是hash值，相对的形式没有那么美观</li><li>history路由是以&#x2F;分割路径</li></ul></li><li>实现原理：<ul><li>hash路由是通过监听hashchange事件的触发来实现的</li><li>history路由是通过HTML5中新增的History API，History API 提供了两个函数：pushState()和replaceState()，它们可以在当前历史记录中添加或修改一个状态，从而改变URL地址，但不会导致页面的重新加载。通过监听popstate事件，可以实现页面的跳转。</li></ul></li><li>兼容性：<ul><li>hash路由兼容性好，兼容所有浏览器</li><li>history路由是通过html5新增的api实现的，所以兼容性不如hash路由</li></ul></li></ul><h3 id="Sass和Less"><a href="#Sass和Less" class="headerlink" title="Sass和Less"></a>Sass和Less</h3><p>Sass和Less都是预处理器，用于扩展CSS的功能和提高CSS的可维护性。</p><h4 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h4><p><strong>运行环境</strong></p><ul><li>Less在JS上运行</li><li>Sass在Ruby上使用</li></ul><p><strong>编写变量的方式</strong></p><ul><li>Less使用@</li><li>Sass使用$</li></ul><p><strong>处理机制</strong></p><ul><li>Less是通过客户端处理的，</li><li>Sass是通过服务端处理，相比较之下解析会更快</li></ul><p><strong>语句的支持</strong></p><ul><li>Sass支持条件语句，循环语句</li><li>Less不支持</li></ul><p><strong>输出格式不同</strong></p><ul><li><p>Sass可以使用特定的输出格式</p><ul><li>nested：嵌套缩进的css代码</li><li>expanded：展开的多行css代码</li><li>compact：简洁格式的css代码</li><li>compressed：压缩后的css代码</li></ul></li><li><p>Less无特殊输出格式</p></li></ul><p><strong>混入不同  Mixins</strong></p><p>- </p><h4 id="相同"><a href="#相同" class="headerlink" title="相同"></a>相同</h4><p>Less和Sass在语法上有些共性，比如下面这些：</p><ol><li>混入(Mixins)——class中的class；</li><li>参数混入——可以传递参数的class，就像函数一样；</li><li>嵌套规则——Class中嵌套class，从而减少重复的代码；</li><li>运算——CSS中用上数学；</li><li>颜色功能——可以编辑颜色；</li><li>名字空间(namespace)——分组样式，从而可以被调用；</li><li>作用域——局部修改样式；</li><li>JavaScript 赋值——在CSS中使用JavaScript表达式赋值。</li></ol><h3 id="js中class类和构造函数的区别"><a href="#js中class类和构造函数的区别" class="headerlink" title="js中class类和构造函数的区别"></a>js中class类和构造函数的区别</h3><ul><li>class采用的是严格模式</li><li>class没有变量提升</li><li>如果是类的方法,那只能用new,没有new的话报错</li><li>class内部定义的方法是不可枚举的，但通过构造函数定义的方法是可枚举的。</li></ul><h3 id="什么是纯函数"><a href="#什么是纯函数" class="headerlink" title="什么是纯函数"></a>什么是纯函数</h3><p>就是<strong>一个函数的返回结果只依赖于它的参数，不依赖外部的任何变量</strong>，我们就把这个函数叫做纯函数。</p><p>比如js内置对象Math的静态方法Math.max(a,…b)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不是纯函数，依赖了外部变量a</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">b</span>) &#123; <span class="keyword">return</span> a+b &#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>) <span class="comment">// 2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 是纯函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a+b &#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>无副作用</li></ul><blockquote><p>在执行过程中没有副作用,不会对系统造成其他的影响</p></blockquote><ul><li>可复用性</li></ul><blockquote><p> 纯函数仅依赖于传入的参数，这意味着你可以随意将这个函数移植到别的代码中，只需要提供它需要的参数即可</p></blockquote><ul><li>可测试性</li></ul><blockquote><p>更容易进行测试，结果只依赖输入，测试时可以确保输出稳定</p></blockquote><ul><li>并行代码</li></ul><blockquote><p>纯函数是健壮的，改变执行次序不会对系统造成影响，因此纯函数的操作可以并行执行。</p></blockquote><h3 id="什么是作用域，作用域链"><a href="#什么是作用域，作用域链" class="headerlink" title="什么是作用域，作用域链"></a>什么是作用域，作用域链</h3><p>​作用域是指在程序中定义变量的区域，它规定了变量的可访问性和生命周期。在JavaScript中，作用域分为全局作用域和局部作用域。全局作用域中定义的变量可以被程序的任何部分访问，而局部作用域中定义的变量只能在定义它的代码块中访问。</p><p>​作用域链是指在当前作用域中无法找到一个变量时，引擎会自动查找外层作用域的变量，直到找到为止。这个过程形成了一个作用域链，它包含了当前作用域和所有外层作用域中的变量对象。当变量在作用域链中被找到时，它就可以被访问了。如果在作用域链的最顶层（也就是全局作用域）中仍然找不到变量，就会报错。<strong>作用域链的构建是在函数定义时确定的</strong>，而不是函数调用时。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 重要知识点汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/2023/06/06/TechnicalArticles/network/01.http%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/06/06/TechnicalArticles/network/01.http%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http"></a>http</h1><h3 id="什么是http"><a href="#什么是http" class="headerlink" title="什么是http"></a>什么是http</h3><p>HTTP（Hyper Text Transfer Protocol）协议是超文本传输协议的缩写，是用于从万维网传输超文本到浏览器的传输协议。</p><p>HTTP基于TCP&#x2F;IP通信协议来传递数据（HTML文件，图片文件、查询结果等）。它不涉及数据包（packet）传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>无连接：无连接是指限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。这种方式可以节省传输时间。</p></li><li><p>无状态：HTTP协议自身不对请求和响应之间的通信状态进行保存，任何两次请求之间都没有依赖关系。（每次请求都是独立的，与前面的请求和后面的请求都没有直接联系。协议本身不保留之前一切的请求或响应报文的信息。）</p></li></ul><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><hr><p><img src="/../../images/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif5rKz5qKmfg==,size_20,color_FFFFFF,t_70,g_se,x_16.jpeg" alt="在这里插入图片描述"></p><hr><p><img src="/../../images/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif5rKz5qKmfg==,size_20,color_FFFFFF,t_70,g_se,x_16-1679621400131-3.png" alt="在这里插入图片描述"></p><hr><h3 id="常见的http请求"><a href="#常见的http请求" class="headerlink" title="常见的http请求"></a>常见的http请求</h3><p><img src="/../../images/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pif5rKz5qKmfg==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="在这里插入图片描述"></p><h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><table><thead><tr><th>状态码</th><th>含义</th><th>常用状态码</th></tr></thead><tbody><tr><td>1XX</td><td>信息提示，服务器收到请求，需要请求者继续执行操作</td><td>100</td></tr><tr><td>2XX</td><td>成功，操作被成功接收并处理；</td><td>200</td></tr><tr><td>3XX</td><td>重定位，需要进一步的操作以完成请求</td><td>304</td></tr><tr><td>4XX</td><td>客户端错误，请求包含语法错误或无法完成请求</td><td>404、401、402、403、404</td></tr><tr><td>5XX</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td><td>500、501</td></tr></tbody></table><h3 id="http1-0-http1-1-http2-0的区别"><a href="#http1-0-http1-1-http2-0的区别" class="headerlink" title="http1.0 http1.1 http2.0的区别"></a>http1.0 http1.1 http2.0的区别</h3><h3 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a>http和https的区别</h3><p>http是超文本传输协议，信息是明文传输， https则具安全性的ssl&#x2F;tls加密传输协议。</p><p><strong>区别</strong></p><ul><li>Http和https使用完全不同的连接方法和不同的端口。前者是80，后者是443。Http连接是非常简</li></ul><p>单和无状态的；HttpS协议是由<strong>SSL&#x2F;TLS+HTTP</strong>协议构建的网络协议，可用于加密传输和身份认</p><p>证。它比HTTP协议更安全。</p><ul><li>HTTP是一种超文本传输协议，是分布式、协作式和超媒体信息系统的应用层协议，是万维网数据</li></ul><p>通信的基础，也是互联网上使用最广泛的网络传输协议。超文本传输协议（Hyper Text Transfer</p><p>Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在<strong>TCP</strong>之上。它指定了客户端可能发</p><p>送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以<strong>ASCII</strong>形式给出；而消息</p><p>内容则具有一个类似<strong>MIME</strong>的格式。</p><ul><li>HTTPS协议之所以安全，是因为HTTPS协议对传输的数据进行加密，而加密过程是由非对称加密实</li></ul><p>现的。然而，HTTPS在内容传输的加密过程中使用对称加密，而非对称加密只在证书验证阶段发挥</p><p>作用</p><h3 id="http的缓存机制"><a href="#http的缓存机制" class="headerlink" title="http的缓存机制"></a>http的缓存机制</h3><p>为了节省对应的资源，减少对应的请求。将内容缓存到本地，就不再需要再次请求服务器了，同时也加快了加载速度</p><h4 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h4><ul><li>使用cache-control中的max-age来控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cache-<span class="attr">control</span>:no-cache <span class="comment">//开启强制缓存</span></span><br><span class="line">cache-<span class="attr">control</span>:max-<span class="title function_">age</span>(<span class="number">9000</span>) <span class="comment">//规定时间内使用强制缓存</span></span><br><span class="line">cache-<span class="attr">control</span>:public <span class="comment">//一定缓存（第三方代理缓存）</span></span><br><span class="line">cache-<span class="attr">control</span>:private <span class="comment">//看客户端的处理</span></span><br></pre></td></tr></table></figure><ul><li>Expires: Thu, 25 May 2020 12:30:00 GMT;</li></ul><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p>​当客户端第二次请求这个资源的时候，会对Expires和cache-control中的max-age字段进行校验，若校验通过，则直接会从缓存中获取数据，并且状态码是200</p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/../../images/00083af5858e47e4b70c567da342ffd2.png" alt="img"></h5><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><ul><li>last-modified 最后的修改时间</li><li>etag 文件表示名</li></ul><h5 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h5><p>​当客户端第一次访问服务器时，服务器会响应E-Tag和Last-Modified字段，当客户端第二次请求同一个数据的时候，会带上这两个字段。服务器会进行E-Tag和Last-Modified的校验，若校验通过，则会直接返回状态码 304 ，且不携带响应体的报文段，告知客户端，这个资源的缓存有效，可以直接使用。</p><p><img src="/../../images/16fde59ebf5f4970832026830c592c47.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>默认情况下，浏览器会优先考虑强制缓存，其次再是协商缓存</li><li>如果使用强制缓存，那么协商缓存就不会被使用，则不会有请求的发送</li><li>强制缓存成功的状态码是200,协商缓存成功的状态码为304</li><li>强制缓存使用对应的响应头的cache-control中的max-age和Expires来控制，协商缓存使用响应头的E-Tag和Last-Modified来控制</li><li>强制缓存没有请求，协商缓存必须请求</li><li>在不用框架的情况下，协商缓存是需要同后端协作完成的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200个前端面试题</title>
      <link href="/2023/06/06/TechnicalArticles/work/02.200%E4%B8%AA%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/06/06/TechnicalArticles/work/02.200%E4%B8%AA%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前端面试两百题"><a href="#前端面试两百题" class="headerlink" title="前端面试两百题"></a>前端面试两百题</h1><h5 id="1、手写jsonp的实现"><a href="#1、手写jsonp的实现" class="headerlink" title="1、手写jsonp的实现"></a>1、手写jsonp的实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//准备一个jsonp的接口：&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=miqi&amp;cb=fn&#x27;</span></span><br><span class="line"><span class="comment">//准备script标签链入jsonp的地址</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=miqi&amp;cb=callback&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更完整的示例</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ipt&#x27;</span>)</span><br><span class="line">ipt.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> wd = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">    <span class="title function_">jsonp</span>(wd)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">callback</span> = <span class="keyword">function</span> (<span class="params">&#123; s &#125;</span>) &#123;</span><br><span class="line">    ul.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        ul.<span class="property">innerHTML</span> +=</span><br><span class="line">            <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li&gt;<span class="subst">$&#123;v&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">wd</span>) &#123;</span><br><span class="line">    <span class="comment">//准备好url</span></span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=<span class="subst">$&#123;wd&#125;</span>&amp;cb=callback`</span></span><br><span class="line">    <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.<span class="property">src</span> = url</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(script)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、手写链表倒数第K个查找 ☆</p><p>3、http请求头，请求体，cookie在哪个里面？url在哪里面？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">请求体</span><br><span class="line">cookie</span><br><span class="line">url</span><br></pre></td></tr></table></figure><h5 id="4、原型链的解释"><a href="#4、原型链的解释" class="headerlink" title="4、原型链的解释"></a>4、原型链的解释</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原型链用于描述js对象中的继承关系，在js中每一个对象都有一个原型__proto__,其中存放着该对象的构造函数的prototype，如果一个对象的属性在自身找不到，就会在对应的原型中去查找，如果原型找不到，就会继续在原型的原型中查找，在这个查找的过程形成的链条，被称为原型链</span><br></pre></td></tr></table></figure><h5 id="5、对闭包的理解，实现一个暴露内部变量，而且外部可以访问修改的函数"><a href="#5、对闭包的理解，实现一个暴露内部变量，而且外部可以访问修改的函数" class="headerlink" title="5、对闭包的理解，实现一个暴露内部变量，而且外部可以访问修改的函数"></a>5、对闭包的理解，实现一个暴露内部变量，而且外部可以访问修改的函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">闭包：函数嵌套函数，函数内部有外部函数变量、参数的引用</span><br><span class="line">优点：扩大了变量的作用域，变量重复使用，不会造成全局污染</span><br><span class="line">缺点：闭包会保持对变量的引用，所以也会导致gc无法及时对其清理，不合理的使用闭包会导致内存泄漏</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">variable</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">        a = result</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">variable</span>()(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h5 id="6、基本的数据类型"><a href="#6、基本的数据类型" class="headerlink" title="6、基本的数据类型"></a>6、基本的数据类型</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>字符串 <span class="title class_">Number</span>数值 <span class="literal">null</span>空对象引用 <span class="literal">undefined</span>未定义 boolean布尔 bigint symbol</span><br></pre></td></tr></table></figure><h5 id="7、基本的两列自适应布局"><a href="#7、基本的两列自适应布局" class="headerlink" title="7、基本的两列自适应布局"></a>7、基本的两列自适应布局</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:darkblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>:<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:darkgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;box1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;box2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8、unix中常用的命令行</p><h5 id="9、OSI模型，HTTP-TCP-UDP分别在哪些层"><a href="#9、OSI模型，HTTP-TCP-UDP分别在哪些层" class="headerlink" title="9、OSI模型，HTTP,TCP,UDP分别在哪些层"></a>9、OSI模型，HTTP,TCP,UDP分别在哪些层</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">OSI</span>模型共有七层，分别是：</span><br><span class="line"><span class="number">1.</span>物理层: <span class="title class_">Ethernet</span>（以太网）：一种常用的局域网协议，用于在物理介质上传输数据帧（frame）</span><br><span class="line"><span class="number">2.</span>数据链路层: <span class="title class_">Point</span>-to-<span class="title class_">Point</span> <span class="title class_">Protocol</span>（<span class="variable constant_">PPP</span>）：一种用于在串行线路上传输数据的协议，常用于拨号网络连接。</span><br><span class="line"><span class="number">3.</span>网络层:<span class="title class_">Internet</span> <span class="title class_">Protocol</span>（<span class="variable constant_">IP</span>）：一种基于无连接的、面向数据包的网络协议，用于在 <span class="title class_">Internet</span> 上进行通信。</span><br><span class="line"><span class="number">4.</span>传输层: <span class="title class_">Transmission</span> <span class="title class_">Control</span> <span class="title class_">Protocol</span>（<span class="variable constant_">TCP</span>）：一种面向连接的、可靠的传输协议，用于在 <span class="title class_">Internet</span> 上进行可靠的数据传输。</span><br><span class="line"><span class="title class_">User</span> <span class="title class_">Datagram</span> <span class="title class_">Protocol</span>（<span class="variable constant_">UDP</span>）：一种面向无连接的、不可靠的传输协议，用于快速传输数据，但不保证数据的可靠性。</span><br><span class="line"><span class="number">5.</span>会话层: <span class="title class_">Session</span> <span class="title class_">Initiation</span> <span class="title class_">Protocol</span>（<span class="variable constant_">SIP</span>）：一种用于建立、修改和终止多媒体会话的协议，常用于 <span class="title class_">VoIP</span> 电话和视频会议等应用中。</span><br><span class="line"><span class="number">6.</span>表示层:- <span class="title class_">Secure</span> <span class="title class_">Sockets</span> <span class="title class_">Layer</span>（<span class="variable constant_">SSL</span>）/<span class="title class_">Transport</span> <span class="title class_">Layer</span> <span class="title class_">Security</span>（<span class="variable constant_">TLS</span>）：一种用于在 <span class="title class_">Internet</span> 上进行加密通信的</span><br><span class="line">协议，常用于保护 <span class="title class_">Web</span> 服务器和浏览器之间的通信安全。</span><br><span class="line"><span class="number">7.</span>应用层 http <span class="variable constant_">SMTP</span> <span class="variable constant_">FTP</span></span><br></pre></td></tr></table></figure><p>10、解释平衡二叉树，以及在数据结构中的应用（红黑树）</p><h5 id="11、快排的时间复杂度和空间复杂度"><a href="#11、快排的时间复杂度和空间复杂度" class="headerlink" title="11、快排的时间复杂度和空间复杂度"></a>11、快排的时间复杂度和空间复杂度</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">快速排序的时间复杂度为<span class="title function_">O</span>(nlogn)，其中n是数组的长度。空间复杂度为<span class="title function_">O</span>(logn)。</span><br></pre></td></tr></table></figure><p>12、手写一个jQuery插件</p><p>13、在jquery方法和原型上面添加方法的区别和实现，以及jquery对象的实现</p><h5 id="14、手写一个递归函数"><a href="#14、手写一个递归函数" class="headerlink" title="14、手写一个递归函数"></a>14、手写一个递归函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如求n以内的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">n</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n+<span class="title function_">sum</span>(n-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>15、对前端路由的理解？前后端路由的区别？</p><p>16、介绍一下webpack和gulp，以及项目中具体的使用</p><h5 id="17、你对es6的了解"><a href="#17、你对es6的了解" class="headerlink" title="17、你对es6的了解"></a>17、你对es6的了解</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">ES6在变量、字符串、数组、数据类型、函数、对象、this等其他方面有了增强</span><br><span class="line">1.变量：</span><br><span class="line"> let：没有变量提升，不能重复声明，有块级作用域、可以不赋初始值</span><br><span class="line"> const:没有变量提升，不能重复声明，有块级作用域、不可更改地址值、声明的时候需要赋初始值，若值为对象，则对象中的值是可以改变的</span><br><span class="line">2.字符串</span><br><span class="line">新增了模板字符串``</span><br><span class="line">新增了一下方法</span><br><span class="line">includes()是否包含某个字符串，返回Boolean</span><br><span class="line">startWith()是否以什么开头，返回Boolean</span><br><span class="line">endsWith()是否以什么结尾，返回Boolean</span><br><span class="line">repeat()平铺方法，可以看做重复，返回平铺后的字符串</span><br><span class="line">3.数组新增</span><br><span class="line">新增了以下静态方法</span><br><span class="line">Array.of()将对应的内容填入数组并返回</span><br><span class="line">Array.from()将伪数组转为数组</span><br><span class="line">Array.find()查找</span><br><span class="line">Array.findIndex()查找下标</span><br><span class="line">Array.fill()覆盖为某个值，第一参数为覆盖的值，第二个为覆盖的其实下标</span><br><span class="line">Array.flat()数组扁平化，将多维数组转为一维数组，参数为数组的深度，一般为一个最大值Number.Max_VALUE或者infinity</span><br><span class="line">4.数据类型新增</span><br><span class="line">bigInt大整型，存储无法存储的数据</span><br><span class="line">symbol独一无二的，数据唯一</span><br><span class="line">5、函数新增</span><br><span class="line">函数新增了默认参数</span><br><span class="line">新增了箭头函数</span><br><span class="line">箭头函数是个匿名函数，没有了自己的this指向，没有arguments，没有原型，所以也没有构造函数，无法被new</span><br><span class="line">6、对象新增，对象新增了简写</span><br><span class="line">7、新增了解构赋值：&#123;&#125;</span><br><span class="line">8、新增了扩展运算符：...</span><br><span class="line">9、新增了generator</span><br><span class="line">10、es7新增了 promise，是一个解决异步编程的方式，可用于解决回调地狱</span><br><span class="line">11、新增了模块化</span><br><span class="line">12、新增了class 类，更接近了传统语言的写法</span><br><span class="line">13、新增了Set,类似数组，但是成员的值唯一，不可重复</span><br><span class="line">14、新增了Map，存放键值对，且也唯一</span><br></pre></td></tr></table></figure><p>18、解释一下vue和react，以及异同点</p><p>19、关于平衡二叉树</p><h5 id="20、前后端分离的意义以及对前端工程化的理解"><a href="#20、前后端分离的意义以及对前端工程化的理解" class="headerlink" title="20、前后端分离的意义以及对前端工程化的理解"></a>20、前后端分离的意义以及对前端工程化的理解</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">前后端分离的意义：</span><br><span class="line">前后端分离是一种开发模式，将前后端的开发分离，前端专注于ui展示和用户交互，后端负责数据处理和业务逻辑。它的意义主要在于提高开发效率和降低耦合度。具体来说前后端分离有以下优点：</span><br><span class="line"><span class="number">1.</span>提高开发效率：前后端开发可以并行进行，前端不需要等待后端完成接口开发，后端也不需要等待前端完成页面的开发</span><br><span class="line"><span class="number">2.</span>降低耦合度：前后端分离可以降低前后端之间的耦合度，后端可以更灵活地修改接口，而不需要考虑前端页面的影响。</span><br><span class="line"><span class="number">3.</span>支持多端：前后端分离可以支持多端，例如web，移动端，桌面端，只需要调用相同的接口</span><br><span class="line"></span><br><span class="line">前端工程化的理解：</span><br></pre></td></tr></table></figure><h5 id="21、使用css实现一个三角形"><a href="#21、使用css实现一个三角形" class="headerlink" title="21、使用css实现一个三角形"></a>21、使用css实现一个三角形</h5><p><strong>1、使用 border 绘制三角形</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">10px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-color</span>:darkblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、transform: rotate 配合 overflow: hidden 绘制三角形</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, deeppink, deeppink <span class="number">50%</span>, yellowgreen <span class="number">50%</span>, yellowgreen <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, deeppink, deeppink <span class="number">50%</span>, transparent <span class="number">50%</span>, transparent <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、使用 linear-gradient绘制三角形</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">141px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    </span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background</span>: deeppink;</span><br><span class="line">        <span class="attribute">transform-origin</span>: left bottom;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="22、用promise手写ajax"><a href="#22、用promise手写ajax" class="headerlink" title="22、用promise手写ajax"></a>22、用promise手写ajax</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//创建xhr对象</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">//打开xhr对象</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>)</span><br><span class="line">    <span class="comment">//发送连接</span></span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    <span class="comment">//响应</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;readystatechange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ajax</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(res)[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>23、手写一个类的继承，并解释一下</p><h5 id="24、解释一下call函数和apply函数的作用，以及用法"><a href="#24、解释一下call函数和apply函数的作用，以及用法" class="headerlink" title="24、解释一下call函数和apply函数的作用，以及用法"></a>24、解释一下call函数和apply函数的作用，以及用法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call函数用于改变函数执行的<span class="variable language_">this</span>指向，第一个参数为改变<span class="variable language_">this</span>指向指向的对象，第二个及往后的参数为传入函数的参数，最后返回的是一个改变了<span class="variable language_">this</span>指向，并直接执行的函数</span><br><span class="line">apply函数用于改变函数执行的<span class="variable language_">this</span>指向，第一个参数为改变<span class="variable language_">this</span>指向指向的对象，第二个参数为传入函数的参数数组，最后返回的是一个改变了<span class="variable language_">this</span>指向，并直接执行的函数</span><br></pre></td></tr></table></figure><h5 id="25、你说自己抗压能力强，具体表现在哪里？"><a href="#25、你说自己抗压能力强，具体表现在哪里？" class="headerlink" title="25、你说自己抗压能力强，具体表现在哪里？"></a>25、你说自己抗压能力强，具体表现在哪里？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.心态好：不会压力的增大而影响心情</span><br><span class="line">2.自我调节能力好：能够即使调整自己的身体状态，从而不影响工作</span><br><span class="line">3.乐观：不会因为压力过大而显得颓废，相反压力大才是提升自己的最好环境</span><br></pre></td></tr></table></figure><p>26、对前端前景的展望，以后前端会怎么发展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>27、手写第一次面试没有写出来的链表问题，要求用es6写</p><h5 id="28、平时是怎么学技术的？"><a href="#28、平时是怎么学技术的？" class="headerlink" title="28、平时是怎么学技术的？"></a>28、平时是怎么学技术的？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.关注大牛的技术博客，查看大牛的博客内容，向大佬学习</span><br><span class="line">2.关注相关的新闻，时刻关注技术相关的前沿动态</span><br><span class="line">3.遇到不会用的api时，尽量直接查看官方文档</span><br><span class="line">4.尽量多阅读相关框架的源码，学习其思想，尝试手写源码复现其功能</span><br><span class="line">5.学会谦虚，多向大佬请教</span><br></pre></td></tr></table></figure><p>29、平时大学里面时间是怎么规划的？</p><p>30、接下来有什么计划？这个学期和下个学期的计划是？</p><p>31、项目中遇到的难点，或者你学习路上的难点</p><p>32、你是通过什么方法和途径来学习前端的</p><p>33、手写一个简单遍历算法</p><p>34、解释一下react和vue，以及区别</p><p>35、你在团队中更倾向于什么角色？</p><p>36、对java的理解</p><p>37、介绍node.js，并且介绍你用它做的项目</p><p>38、手写一个js的深克隆</p><h5 id="39、for函数里面setTimeout异步问题"><a href="#39、for函数里面setTimeout异步问题" class="headerlink" title="39、for函数里面setTimeout异步问题"></a>39、for函数里面setTimeout异步问题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用闭包</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">j</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在上面的代码中，通过立即执行函数创建了一个闭包，将变量i保存在了闭包中。这样，在setTimeout中使用闭包中的j，而不是直接使用循环变量i，这样课可以避免异步执行带来的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//使用let</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用let关键词会创建相应的块级作用域，因此每次循环都会创建一个新的变量i，可以避免异步执行带来的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>40、手写归并排序</p><p>41、介绍自己的项目</p><p>42、实现两个数组的排序合并</p><h5 id="43、手写一个原生ajax"><a href="#43、手写一个原生ajax" class="headerlink" title="43、手写一个原生ajax"></a>43、手写一个原生ajax</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;readystatechange&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(callback)&#123;</span><br><span class="line">                <span class="title function_">callback</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ajax</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="42、手写一个promise版的ajax"><a href="#42、手写一个promise版的ajax" class="headerlink" title="42、手写一个promise版的ajax"></a>42、手写一个promise版的ajax</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax_promise</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;readystatechange&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>))&#123;        </span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>)            </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ajax_promise</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>45、手写实现一个promise</p><p>46、手写实现requireJS模块实现</p><p>47、手写实现jquery里面的insertAfter</p><p>48、react和vue的介绍以及异同</p><p>49、AMD和CMD，commonJS的区别</p><p>50、介绍一下backbone</p><h5 id="51、了解过SEO吗？"><a href="#51、了解过SEO吗？" class="headerlink" title="51、了解过SEO吗？"></a>51、了解过SEO吗？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SEO是搜索引擎优化的英文简称，全程（Search Engine Optimization），是一种通过利用搜索引擎规则提高网站在有关搜索引擎内自然排名的方式，目的是让其在行业内占据领先地位，获得品牌效应，很大程度上是网站经营者的一种商业行为。</span><br><span class="line">前端开发工程师如何做好SEO？</span><br><span class="line">1.网站结构和内容优化：优化html结构、标签的使用、页面加载速度、内容质量等方面，例如正确的使用标题标签，使用alt属性来描述图片等</span><br><span class="line">2.代码优化：程序员需要遵循最佳的代码实现，例如减少http请求，使用压缩和缓存技术、减少代码和图片的大小等，从而提高网站的速度和性能。速度是Google搜索引擎算法的一个重要因素</span><br><span class="line">3.链接和引用：可以为网站添加内部链接和外部链接，以及获取其他网站的引用和链接，从而提高网站的权威性和可信度。</span><br><span class="line">4.数据分析和跟踪：可以使用一些工具来分析网站流量和用户行为，例如Google Analysis，从而了解用户的行为，从而进一步的优化网站的内容和结构</span><br></pre></td></tr></table></figure><h5 id="52、低版本浏览器不支持HTML5标签怎么解决？"><a href="#52、低版本浏览器不支持HTML5标签怎么解决？" class="headerlink" title="52、低版本浏览器不支持HTML5标签怎么解决？"></a>52、低版本浏览器不支持HTML5标签怎么解决？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.使用 polyfill 库：polyfill 是一种 JavaScript 库，它可以在不支持 HTML5 标签的浏览器中模拟这些标签的行为。常用的 polyfill 库有 Modernizr 和 html5shiv 等。</span><br><span class="line">2.使用 JavaScript 创建标签：通过 JavaScript 动态创建标签，可以实现低版本浏览器不支持的 HTML5 标签。例如，可以使用 document.createElement() 方法创建新的标签，然后使用 DOM 操作将其插入到文档中。</span><br><span class="line">3.使用 div 替代标签：如果某个 HTML5 标签在低版本浏览器中不被支持，可以使用 div 标签代替。例如，可以使用 div 标签代替 section 标签，并在样式表中定义相应的样式。</span><br><span class="line">4.使用 HTML5 Shiv 库：HTML5 Shiv 是一个 JavaScript 库，它可以让低版本的浏览器支持 HTML5 标签。在使用 HTML5 Shiv 时，需要在页面头部引入相应的 JavaScript 文件。</span><br><span class="line"></span><br><span class="line">需要注意的是，以上的解决方案可能会增加页面的加载时间和代码量，因此在使用时需要根据实际情况选择合适的方案。另外，建议在页面中添加适当的提示，告知用户建议使用较新版本的浏览器，以提供更好的用户体验。</span><br></pre></td></tr></table></figure><p>53、用js使低版本浏览器支持HTML5标签 底层是怎么实现的？</p><p>54、实现一个布局：左边固定宽度为200，右边自适应，而且滚动条要自动选择只出现最高的那个</p><p>55、画出盒子模型，要使谷歌浏览器的盒子模型显示得跟IE浏览器一致（让谷歌跟ie一致，不是ie跟谷歌一致），该怎么做？</p><p>56、手写JS实现类继承，讲原型链原理，并解释new一个对象的过程都发生了什么</p><p>57、Array对象自带的方法，一一列举</p><p>58、若干个数字，怎么选出最大的五个</p><p>59、Array对象自带的排序函数底层是怎么实现的？</p><p>60、常用的排序算法有哪些，介绍一下选择排序</p><p>61、了解navigator对象吗？</p><p>62、手写一个正则表达式，验证邮箱</p><p>63、link和@import引入CSS的区别？</p><p>64、刚才说有些浏览器不兼容@import，具体指哪些浏览器？</p><p>65、介绍一下cookie,localstorage,sessionstorage,session</p><p>66、jquery绑定click的方法有几种</p><p>67、你的优点&#x2F;竞争力</p><p>移动端适配问题</p><p>react的难点在哪里</p><p>70、做过css动画吗</p><p>如何优化网站</p><p>72、以后的规划</p><p>你做过最困难的事情是啥？</p><p>74、css3 html5新特性</p><p>75、闭包，ES6，跨域</p><p>问做过啥项目，用到什么技术，遇到什么困难</p><p>77、兼容性</p><p>盒子模型</p><p>79、Array的unshift() method的作用是什么？如何连接两个Array？如何在Array里移除一个元素？</p><p>80、用纸笔写一个Closure，任意形式和内容</p><p>、知不知道Array-like Object？</p><p>82、如何用Native JavaScript来读写Cookie？</p><p>83、知不知道CSS Box-model？</p><p>84、如何做一个AJAX Request？</p><p>85、Cross-domain access有没有了解？</p><p>、前端安全方面有没有了解？XSS和CSRF如何攻防？</p><p>87、HTTP Response的Header里面都有些啥？</p><p>88、知不知道HTTP2？</p><p>89、输入URL后发生了什么？</p><p>new operator实际上做了什么？</p><p>面向对象的属性有哪些？</p><p>92、做一个两栏布局，左边fixed width，右边responsive，用纸笔手写</p><p>讲一下AJAX Request</p><p>94、讲一下Cross-domain access</p><p>95、介绍一下做过的项目</p><p>问到了多个服务器怎么弄，架构之类的</p><p>angular的渲染流程</p><p>98、脏检查</p><p>99、nodejs的架构、优缺点、回调</p><p>css 盒模型</p><p>101、css 布局，左边定宽右边自适应</p><p>102、冒泡和捕获，事件流哪三个阶段？</p><p>103、实现事件代理</p><p>原型链</p><p>105、继承的两种方法</p><p>106、ajax，原生ajax的四个过程</p><p>闭包，简单说一个闭包的应用，然后闭包的主要作用是什么</p><p>108、css:两个块状元素上下的margin-top和margin-bottom会重叠。啥原因？怎么解决？</p><p>js：写一个递归。就是每隔5秒调用一个自身，一共100次</p><p>110、cookie和session有什么区别</p><p>网络分层结构</p><p>112、你的不足是什么？</p><p>做了那么多项目，有没有自己的归纳总结</p><p>114、工程怎么进行文件管理</p><p>115、less和sass掌握程度</p><p>116、Cookie 是否会被覆盖，localStorage是否会被覆盖</p><p>117、事件代理js实现</p><p>118、Css实现动画效果</p><p>Animation还有哪些其他属性</p><p>Css实现三列布局</p><p>121、Css实现保持长宽比1:1</p><p>122、Css实现两个自适应等宽元素中间空10个像素</p><p>123、requireJS的原理是什么</p><p>124、如何保持登录状态</p><p>125、浮动的原理以及如何清除浮动</p><p>126、Html的语义化</p><p>127、原生js添加class怎么添加，如果本身已经有class了，会不会覆盖，怎么保留？</p><p>128、Jsonp的原理。怎么去读取一个script里面的数据？</p><p>129、如果页面初始载入的时候把ajax请求返回的数据存在localStorage里面，然后每次调用的时候去localStorage里面取数，是否可行。</p><p>130、304是什么意思？有没有方法不请求不经过服务器直接使用缓存</p><p>131、http请求头有哪些字段</p><p>132、数组去除一个函数。用arr.splice。又问splice返回了什么？应该返回的是去除的元素。</p><p>133、js异步的方法（promise，generator，async）</p><p>134、Cookie跨域请求能不能带上</p><p>135、最近看什么开源项目？</p><p>136、commonJS和AMD</p><p>137、平时是怎么学习的？</p><p>138、为什么要用translate3d？</p><p>139、对象中key-value的value怎么再放一个对象？</p><p>140、Get和post的区别？</p><p>145、Post一个file的时候file放在哪的？</p><p>146、说说你对组件的理解</p><p>147、组件的html怎么进行管理</p><p>148、js的异步加载，promise的三种状态，ES7中的async用过么</p><p>149、静态属性怎么继承</p><p>150、js原型链的继承</p><p>151、jquery和zepto有什么区别</p><p>152、angular的双向绑定原理</p><p>153、angular和react的认识</p><p>154、MVVM是什么</p><p>155、移动端是指手机浏览器，还是native，还是hybrid</p><p>156、你用了移动端的什么库类和框架？</p><p>157、移动端要注意哪些？</p><p>158、适配有去考虑么，retina屏幕啊？</p><p>159、rem是什么？em是什么？如果上一层就是根root了，em和rem等价么？</p><p>160、怎么测试的？会自动化测试么？</p><p>161、你觉得你什么技术最擅长？</p><p>162、你平时有没有什么技术的沉淀？</p><p>163、单向链表怎么查找有没有环？</p><p>164、怎么得到一个页面的a标签？</p><p>165、怎么在页面里放置一个很简单的图标，不能用img和background-img？</p><p>166、正则表达式判断url</p><p>167、怎么去除字符串前后的空格</p><p>168、实现页面的局部刷新</p><p>169、绝对定位与相对定位的区别</p><p>170、js轮播实现思路</p><p>171、使用js画一个抛物线，抛物线上有个小球随着抛物线运动，有两个按钮能使小球继续运动停止运动</p><p>172、java五子棋，说下实现思路</p><p>173、如何让各种情况下的div居中(绝对定位的div,垂直居中,水平居中)？</p><p>174、display有哪些值？说明他们的作用</p><p>175、css定义的权重</p><p>176、requirejs实现原理</p><p>177、requirejs怎么防止重复加载</p><p>178、ES6里头的箭头函数的this对象与其他的有啥区别</p><p>179、tcp&#x2F;udp区别</p><p>180、tcp三次握手过程</p><p>181、xss与csrf的原理与怎么防范</p><p>182、mysql与 MongoDB的区别</p><p>183、w3c事件与IE事件的区别</p><p>184、有没有上传过些什么npm模块</p><p>185、IE与W3C怎么阻止事件的冒泡</p><p>186、gulp底层实现原理</p><p>187、webpack底层实现原理</p><p>188、gulp与webpack区别</p><p>189、vuejs与angularjs的区别</p><p>190、vuex是用来做什么的</p><p>191、说下你知道的响应状态码</p><p>192、ajax的过程以及 readyState几个状态的含义</p><p>193、你除了前端之外还会些什么？</p><p>194、cookie与session的区别</p><p>195、一些关于php与java的问题</p><p>196、你觉得你哪个项目是你做的最好的</p><p>197、说说你在项目中遇到了哪些困难,是怎么解决的</p><p>198、前端优化你知道哪些</p><p>199、webpack是用来干嘛的</p><p>200、webpack与gulp的区别</p><p>201、es6与es7了解多少</p><p>202、说下你知道的响应状态码</p><p>203、看过哪些框架的源码</p><p>204、遇到过哪些浏览器兼容性问题</p><p>205、清除浮动有哪几种方式,分别说说</p><p>206、你知道有哪些跨域方式,分别说说</p><p>207、JavaScript有哪几种类型的值</p><p>208、使用 new操作符时具体是干了些什么</p><p>209、学习前端的方法以及途径</p><p>210、怎么实现两个大整数的相乘，说下思路</p><p>211、你学过数据结构没,说说你都了解些什么</p><p>212、你学过计算机操作系统没,说说你都了解些什么</p><p>213、你学过计算机组成原理没,说说你都了解些什么</p><p>214、你学过算法没,说说你都了解些什么</p><p>215、说下选择排序,冒泡排序的实现思路</p><p>216、用过哪些框架</p><p>217、让你设计一个前端css框架你怎么做</p><p>218、了解哪些设计模式说说看</p><p>219、说下你所了解的设计模式的优点</p><p>220、vue源码结构</p><p>221、状态码</p><p>222、浏览器缓存的区别</p><p>223、304与200读取缓存的区别</p><p>224、http请求头有哪些,说说看你了解哪些</p><p>225、js中this的作用</p><p>226、js中上下文是什么</p><p>227、js有哪些函数能改变上下文</p><p>228、你所了解的跨域的方法都说说看你了解的？</p><p>229、要是让你自己写一个js框架你会用到哪些设计模式</p><p>230、平常在项目中用到过哪些设计模式,说说看</p><p>231、一来给了张纸要求写js自定义事件</p><p>232、前端跨域的方法</p><p>233、call与apply的区别</p><p>234、h5有个api能定位你知道是哪个吗？</p><p>235、vue与angularjs中双向数据绑定是怎样实现的？</p><p>236、webpack怎样配置？</p><p>237、nodejs中的文件怎么读写？</p><p>238、link和@import有什么区别？</p><p>239、cookies，sessionStorage 和 localStorage 的区别</p><p>240、看过哪些前端的书？平时是怎么学习的</p><p>241、说下你所理解的mvc与mvvc</p><p>242、position有哪些值,说下各自的作用</p><p>243、写个从几个li中取下标的闭包代码</p><p>244、你的职业规划是怎么样的？</p><p>245、移动端性能优化</p><p>246、lazyload如何实现</p><p>247、点透问题</p><p>248、前端安全</p><p>249、原生js模板引擎</p><p>250、repaint和reflow区别</p><p>251、requirejs如何避免循环依赖？</p><p>252、实现布局：左边一张图片，右边一段文字（不是环绕）</p><p>253、window.onload和$(document).ready()的区别，浏览器加载转圈结束时哪个时间点？</p><p>254、form表单当前页面无刷新提交 target iframe</p><p>255、setTimeout和setInterval区别，如何互相实现？</p><p>256、如何避免多重回调—promise，promise简单描述一下，如何在外部进行resolve()</p><p>257、margin坍塌？水平方向会不会坍塌？</p><p>258、伪类和伪元素区别</p><p>259、vue如何实现父子组件通信，以及非父子组件通信</p><p>260、数组去重</p><p>261、使用flex布局实现三等分，左右两个元素分别贴到左边和右边，垂直居中</p><p>262、平时如何学前端的，看了哪些书，关注了哪些公众号</p><p>263、实现bind函数</p><p>264、数组和链表区别，分别适合什么数据结构</p><p>265、对mvc的理解</p><p>266、描述一个印象最深的项目，在其中担任的角色，解决什么问题</p><p>267、http状态码。。。401和403区别？</p><p>268、描述下二分查找</p><p>269、为什么选择前端，如何学习的，看了哪些书，《js高级程序设计》和《你不知道的js》有什么区别，看书，看博客，看公众号三者的时间是如何分配的？</p><p>270、如何评价BAT？</p><p>271、描述下在实习中做过的一个项目，解决了什么问题，在其中担任了什么角色？这个过程存在什么问题，有什么值得改进的地方？</p><p>272、如何看待加班，如果有个项目需要连续一个月加班，你怎么看？</p><p>273、遇到的压力最大的一件事是什么？如何解决的？</p><p>274、平时有什么爱好</p><p>275、自身有待改进的地方</p><p>276、n长的数组放入n+1个数，不能重复，找出那个缺失的数</p><p>277、手里有什么offer</p><p>278、你对于第一份工作最看重的三个方面是什么？</p><p>279、如何评价现在的前端？</p><p>280、用原生js实现复选框选择以及全选非全选功能</p><p>281、用4个颜色给一个六面体上色有多少种情况</p><p>282、amd和cmd区别</p><p>283、为什么选择前端，移动端性能优化</p><p>284、vue的特点？双向数据绑定是如何实现的</p><p>285、Object.defineProperty</p><p>286、算法题：数组去重，去除重复两次以上的元素，代码题：嵌套的ul-li结构，根据input中输入的内容，去除相应的li节点，且如果某个嵌套的ul下面的li都被移除，则该ul的父li节点也要被移除</p><p>287、页面加载过程</p><p>288、浏览器如何实现图片缓存</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC垃圾回收机制</title>
      <link href="/2023/06/06/TechnicalArticles/outhers/01.GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/06/06/TechnicalArticles/outhers/01.GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解JavaScript——垃圾回收机制"><a href="#深入理解JavaScript——垃圾回收机制" class="headerlink" title="深入理解JavaScript——垃圾回收机制"></a>深入理解JavaScript——垃圾回收机制</h1><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a><strong>内存泄漏</strong></h3><p>不再使用到的内存，没有及时释放，就被称为内存泄漏。而内存泄漏，会让系统占用极高的内存，让系统变卡甚至奔溃。</p><blockquote><p>当我们遇到遇到内存泄漏时，我们需要做什么呢？</p><p>不需要做任何事，因为 JavaScript 中的垃圾回收是自动的</p><p>在 JavaScript 的世界里，JavaScript 引擎会自动执行命令，帮我们清理用不到的变量（即减少内存开销）</p><p>当然，不同的语言采用不同的内存管理方式，大多数语言采用的是自动内存管理</p><ul><li><strong>自动内存管理（垃圾回收）阵营：</strong></li></ul><p>JavaScript、Java、Go、Python、PHP、Ruby、C#</p><ul><li><strong>手动内存管理阵营：</strong></li></ul><p>C、C++、Rust</p></blockquote><h3 id="因为会导致内存泄漏所以需要垃圾回收"><a href="#因为会导致内存泄漏所以需要垃圾回收" class="headerlink" title="因为会导致内存泄漏所以需要垃圾回收"></a>因为会导致内存泄漏所以需要垃圾回收</h3><p>如果任由内存泄漏，会让系统变卡甚至崩溃。导致这问题的原因是 V8 引擎只能使用一部分内存，具体来说，在 64 位系统下，V8 最多只能分配 1.4G；在 32 位系统中，最多只能分配 0.7G</p><p>因为使用内存大小上限，所以当有用不到的变量时，引擎会帮我们清理掉</p><h3 id="回收的是什么"><a href="#回收的是什么" class="headerlink" title="回收的是什么"></a><strong>回收的是什么</strong></h3><p>回收内存。清理变量，释放内存空间</p><h3 id="垃圾回收运行机制"><a href="#垃圾回收运行机制" class="headerlink" title="垃圾回收运行机制"></a><strong>垃圾回收运行机制</strong></h3><p>在说这个话题前，我们先回顾下，在 JavaScript 由什么组成 中曾经介绍过，JavaScript 的数据类型可分为基本类型和引用类型。基本类型存在栈内存，引用类型存在堆内存</p><p>但是我们那时没有解释为什么基本类型要存在栈中，引用类型要存在堆中。只是介绍，因为基本类型所花销的内存小，而引用类型所花销的内存大，而这恰恰是分两个空间存放不同数据的原因</p><p>在 JavaScript 中，引擎需要用栈来维护程序执行时的上下文状态（即执行上下文），如果栈空间大了的话，所有数据存放在栈空间中，会影响到上下文切换的效率，从而影响整个程序的执行效率，所以占内存大的数据会放在堆空间中，引用它的地址来表示这个变量</p><h3 id="堆内存的分类"><a href="#堆内存的分类" class="headerlink" title="堆内存的分类"></a><strong>堆内存的分类</strong></h3><p>一个 V8 进程的内存通常由以下部分组成</p><ul><li>新生代内存区（new space）</li><li>老生代内存区（old space）</li><li>大对象区（large object space）</li><li>代码区（code space）</li><li>map 区（map space）</li></ul><p>其他几个不重要，关键是新生代（内存）和老生代（内存）。针对新生代和老生代，引擎采用了两种不同的垃圾回收机制</p><h3 id="新生代与老生代的垃圾回收"><a href="#新生代与老生代的垃圾回收" class="headerlink" title="新生代与老生代的垃圾回收"></a><strong>新生代与老生代的垃圾回收</strong></h3><p>在介绍两种垃圾回收机制前，要先知道两个知识点：<strong>代际假说</strong>和<strong>分代收集</strong></p><p>代际假说有以下两个特点：</p><ul><li>大部分对象在内存中存活的时间很短，简单说，就是很多对象一经分配内存，很快就变得不可访问</li><li>不死的对象，会活得更久</li></ul><p>因为有代际假说的认知，所以我们在垃圾回收时，会根据对象不同的生存周期采用不同的算法，其中 V8 把堆内存分为新生代和老生代两个区域（其他几个区域用处不大）</p><p>新生代中存放生存时间短的对象，老生代存放生存时间久的对象</p><p>为此，新生代区通常只支持1~8M 的容量，而老生代区会支持更大的容量，而针对这两块区域，V8 分别使用两个不同的垃圾回收器</p><ul><li>主垃圾回收器，负责老生代的垃圾回收</li><li>副垃圾回收器，负责新生代的垃圾回收</li></ul><p>我们先说说副垃圾回收器时如何处理垃圾回收的</p><h3 id="新生代内存回收"><a href="#新生代内存回收" class="headerlink" title="新生代内存回收"></a><strong>新生代内存回收</strong></h3><p>新生代采用的是 Scavenge 算法，所谓 Scavenge 算法，是把新生代空间对半分为两个区域，一半是对象区域（from），一半是空闲区域（to）。如下图所示：</p><p><img src="/../../images/v2-5d90683202ee91166024cef4e158f5b5_720w.webp" alt="img"></p><p>V8堆内存</p><p>新的对象会首先被分配到对象（from）空间，当对象区域快写满时，就需要执行一次垃圾清理操作。当进行垃圾收回时，先将 from 空间中存活的对象复制到空闲（to）空间进行保存，对未存活的空间进行回收。复制完成后，对象空间和空闲空间进行角色调换，空闲空间变成新的对象空间，原来的对象空间则变成空闲空间。这样就完成了垃圾对象的回收操作，同时这种角色调换的操作能让新生代中的这两块区域无限重复使用下去</p><p><img src="/../../images/v2-ba1ae480cc0a1382e0b607ba92cabe75_720w.webp" alt="img"></p><p>Scavenge 算法执行图</p><p>而当一个对象在两次变换中还存在时，就会从新生代区”晋升“到”老生代区“。这一过程被称为<strong>对象晋升策略</strong></p><h3 id="老生代内存回收"><a href="#老生代内存回收" class="headerlink" title="老生代内存回收"></a><strong>老生代内存回收</strong></h3><p>主垃圾回收器负责老生代区的垃圾回收。其中的对象包括新生代区”晋升“的对象和一些大的对象。因此老生代区中的对象有两个特点，对象占用空间大，对象存活时间长</p><p>它不会像新生代区那样使用 Scavenge 算法，因为复制大对象所花费的时间长，执行效率并不高。所以它采用标记 - 清除（Mark - Sweep）进行垃圾回收</p><p>简单来说，先标记，然后清除，但是内存空间里的对象还是不连续，所以引入整理。这就是老生代区的垃圾回收过程 <strong>标记 - 清除 - 整理</strong>。先标记哪些是要回收的变量，再进行回收（清除），然后将内存空间整理（到一边），这样空间就大了</p><p><img src="/../../images/v2-33f352d7ded14073b6fbf83a8b90dad5_720w.webp" alt="img"></p><p>标记整理过程</p><p>因为老生代区的对象相对大，虽然采用”标记-清除“算法会比 Scavenge 更快，但架不住卡顿问题。为什么会卡顿？因为 JavaScript 是单线程。为此，V8 将标记过程分为一个个子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，这一算法被称为增量标记算法</p><p><img src="/../../images/v2-8caeb00451623c091f96f52e824da166_720w.webp" alt="img"></p><p>标记整理过程</p><p>而这一行为，与 React Fiber 的设计思路类似，将大人物分割成小任务，因为小，所以执行快，让人察觉不到卡顿</p><h3 id="新生代-VS-老生代"><a href="#新生代-VS-老生代" class="headerlink" title="新生代 VS 老生代"></a><strong>新生代 VS 老生代</strong></h3><ul><li><p>新生代垃圾回收是临时分配的内存，存活时间短；老生代垃圾回收是常驻内存，存活时间长</p></li><li><p>新生代垃圾回收由副垃圾回收器负责；老生代垃圾回收由主垃圾回收器负责</p></li><li><p>新生代采用 Scavenge 算法；老生代采用「标记-清除」算法</p></li><li><ul><li><p>Scavenge 算法：将空间分为两半，一半是 from 空间，一半是 to 空间。新加入的对象会放在 from 空间，当空间快满时，执行垃圾清理；再角色调换，再当调换完后的 from 空间快蛮时，再执行垃圾清理，如此反复</p></li><li><p>标记-清理-整理：此为两个算法，「标记-清理」算法和 「标记-整理」算法</p></li><li><ul><li>标记-清理：标记用不到的变量，清理掉</li><li>标记-整理：清理完内存后，会产生不连续的内存空间，为节省空间，整理算法会将内存排序到一处空间，空间就变大了</li></ul></li></ul></li></ul><h3 id="引用计数（reference-counting）"><a href="#引用计数（reference-counting）" class="headerlink" title="引用计数（reference counting）"></a><strong>引用计数（reference counting）</strong></h3><p>在 《JavaScript 高级程序设计》中介绍了另一种垃圾回收的机制——引用计数</p><p>简单来说：引擎会有张”引用表“，保存了内存里面的资源的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放</p><p>但后来这个机制被放弃了，因为它会遇到一个严重的问题：循环引用，从而导致内存泄漏，所以被放弃了</p><h3 id="性能优化采取的策略通常包括以下几点："><a href="#性能优化采取的策略通常包括以下几点：" class="headerlink" title="性能优化采取的策略通常包括以下几点："></a><strong>性能优化采取的策略通常包括以下几点：</strong></h3><h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><p><code>JavaScript</code>程序在执行过程中会维持相当量级的变量数目，频繁扫描这些变量会造成明显的开销。但是这些变量在生命周期上各有特点，例如局部变量会频繁的创建，迅速的使用，然后丢弃，而全局变量则会长久的占据内存。<code>JavaScript</code>把两类对象分开管理，对于快速创建、使用并丢弃的局部变量，垃圾回收器会频繁的扫描，保证这些变量在失去作用后迅速被清理。而对于哪些长久把持内存的变量，降低检查它们的频率，从而节约一定的开销。</p><h3 id="增量收集"><a href="#增量收集" class="headerlink" title="增量收集"></a>增量收集</h3><p>增量式的思想在性能优化上非常常见，同样可以用于垃圾回收。在变量数目非常大时，一次性遍历所有变量并颁发优秀员工标记显然非常耗时，导致程序在执行过程中存在卡顿。所以，引擎会把垃圾回收工作分成多个子任务，并在程序执行的过程中逐步执行每个小任务，这样就会造成一定的回收延迟，但通常不会造成明显的程序卡顿。</p><h3 id="空闲收集"><a href="#空闲收集" class="headerlink" title="空闲收集"></a>空闲收集</h3><p><code>CPU</code>即使是在复杂的程序中也不是一直都有工作的，这主要是因为<code>CPU</code>工作的速度非常快，外围<code>IO</code>往往慢上几个数量级，所以在<code>CPU</code>空闲的时候安排垃圾回收策略是一种非常有效的性能优化手段，而且基本不会对程序本身造成不良影响。这种策略就类似于系统的空闲时间升级一样，用户根本察觉不到后台的执行。</p><h2 id="编年体垃圾回收历史"><a href="#编年体垃圾回收历史" class="headerlink" title="编年体垃圾回收历史"></a><strong>编年体垃圾回收历史</strong></h2><p>1960年，John McCarthy发表了一篇论文，提出了<strong>标记-清除算法</strong>。可是标记-清除算法由两个要命的缺点：分配速度慢，容易产生碎片</p><p>为了解决这个问题，1963年，Marvin L. Minsky提出了<strong>复制算法</strong>。而 JavaScript 中的 Scavenge 算法就是以它为基础的改良版本。它的缺点是空间利用率不大，每次只能使用一次</p><p>1960年，George E. Collins提出了一个新的 GC 算法：<strong>引用计数</strong>，缺点是不能回收“循环引用”，目前 JavaScript 的引擎是没有采用这种回收机制</p><p>如此，垃圾回收大厦地基已经建好，后人只是在此基础上修修补补</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>我们介绍了什么是垃圾回收机制，为什么会有垃圾回收机制，以及介绍了垃圾回收的运行机制，它的两种内存采用的不同的垃圾回收算法等等。了解垃圾回收机制，是为了让我们更清晰地明白其运行原理，虽然我们没必要去了解「标记-清理」、「标记-整理」、「Scavenge 」等等算法，但如果明白它们为什么要采用这样的算法有一定的必要性</p><p>不然，小白问起网站为什么会卡时，你就可以“无意”透露是不是内存泄漏了啊，然后引出 JavaScript 的垃圾回收机制等，装一次老前辈的经验之谈</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾回收 </tag>
            
            <tag> 内存泄漏 </tag>
            
            <tag> 内存溢出 </tag>
            
            <tag> 堆 </tag>
            
            <tag> 栈 </tag>
            
            <tag> V8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需要手写的代码</title>
      <link href="/2023/06/06/TechnicalArticles/js/00.%E9%9C%80%E8%A6%81%E6%89%8B%E5%86%99%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/06/06/TechnicalArticles/js/00.%E9%9C%80%E8%A6%81%E6%89%8B%E5%86%99%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="需要手写的代码"><a href="#需要手写的代码" class="headerlink" title="需要手写的代码"></a>需要手写的代码</h1><h2 id="1、排序算法"><a href="#1、排序算法" class="headerlink" title="1、排序算法"></a>1、排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.<span class="property">length</span>-<span class="number">1</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ; j&lt; arr.<span class="property">length</span>-i ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">let</span> temp = arr[j]</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(arr))</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> min = i</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = min + <span class="number">1</span> ; j &lt; arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[min]&gt;arr[j])&#123;</span><br><span class="line">                min = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[min]</span><br><span class="line">        arr[min] = arr[i]</span><br><span class="line">        arr[i] = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectSort</span>(arr))</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="property">length</span> &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> left = []</span><br><span class="line">    <span class="keyword">let</span> right = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span> ; i &lt; arr.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">        mid&gt;arr[i]?left.<span class="title function_">push</span>(arr[i]):right.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>(mid,<span class="title function_">quickSort</span>(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(arr))</span><br></pre></td></tr></table></figure><h2 id="2、闭包相关"><a href="#2、闭包相关" class="headerlink" title="2、闭包相关"></a>2、闭包相关</h2><h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思想：在规定的时间内连续触发事件只执行最后一次</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">callback,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">callback</span>()</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">debounce</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);&#125;,<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><p>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减少请求次数，节约请求资源；</p><h3 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思想：在规定的时间内连续触发，只执行第一次，在该时间过后才会执行触发的下一个事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">callback,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span><span class="comment">//节流阀</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">callback</span>()</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                timer = <span class="literal">null</span><span class="comment">//释放节流阀</span></span><br><span class="line">            &#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">throttle</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);&#125;,<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><ul><li><p>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p></li><li><p>懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</p></li><li><p>比如窗口调整、页面滚动、抢购和疯狂点击等会用到节流。</p></li></ul><hr><h2 id="3、instanceof"><a href="#3、instanceof" class="headerlink" title="3、instanceof"></a>3、instanceof</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceOf</span>(<span class="params">obj,con</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(obj.<span class="property">__proto__</span>)&#123;<span class="comment">//当obj还存在原型时，继续查找</span></span><br><span class="line">        obj = obj.<span class="property">__proto__</span> <span class="comment">//顺着原型链</span></span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">constructor</span> == con)&#123; <span class="comment">//如果obj的构造函数等于传入的函数，则证明是该对象的实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_ inherited__">P</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,sex</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>(<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;boy&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myInstanceOf</span>(c,P))<span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h2 id="4、new"><a href="#4、new" class="headerlink" title="4、new"></a>4、new</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="comment">//创建一个空对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">//将fn的原型放在obj的原型上</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = fn.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    <span class="comment">//执行fn的构造函数，并改变this指向</span></span><br><span class="line">    fn.<span class="title function_">call</span>(obj)</span><br><span class="line">    <span class="comment">//返回构造完成的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myNew</span>(person) <span class="keyword">instanceof</span> person)</span><br></pre></td></tr></table></figure><hr><h2 id="5、Promise"><a href="#5、Promise" class="headerlink" title="5、Promise"></a>5、Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="6、封装Ajax"><a href="#6、封装Ajax" class="headerlink" title="6、封装Ajax"></a>6、封装Ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化请求对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">//建立连接 (get post)</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>)</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">//监听请求的变化 readyState状态值(xhr独有)</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;readystatechange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在监听的处理函数内容接收响应数据</span></span><br><span class="line">    <span class="comment">//判断是否有数据返回 </span></span><br><span class="line">    <span class="comment">//readyState(0-4) 0:请求未发送; 1:请求准备发送; 2:请求发送成功; 3:请求成功,响应中 4:请求成功,响应完成;</span></span><br><span class="line">    <span class="comment">//http状态码 xhr.status(100-599)</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseXML</span>)<span class="comment">//接收xml</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)<span class="comment">//接收文本 字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="7、观察者模式Observer"><a href="#7、观察者模式Observer" class="headerlink" title="7、观察者模式Observer"></a>7、观察者模式Observer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件绑定</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">eventName,handler</span>)&#123;</span><br><span class="line">        <span class="comment">//如果存在这个事件名，则直接添加事件</span></span><br><span class="line">        <span class="keyword">if</span>(eventName <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">events</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">add</span>(handler)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName+<span class="string">&#x27;事件绑定成功&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果不存在，则新建一个set,并添加该事件</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[eventName] = <span class="keyword">new</span> <span class="title class_">Set</span>([handler])</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName+<span class="string">&#x27;事件绑定成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件触发</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">eventName,...args</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">events</span>[eventName])&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>)=&gt;</span>&#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件解绑</span></span><br><span class="line">    <span class="title function_">off</span>(<span class="params">eventName,handler</span>)&#123;</span><br><span class="line">        <span class="comment">//如果本就不存在这个事件，则不作为</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">events</span>[eventName])&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">delete</span>(handler)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName+<span class="string">&#x27;事件删除成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">Observer</span>()</span><br><span class="line">observer.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,handler)</span><br><span class="line"></span><br><span class="line">observer.<span class="title function_">emit</span>(<span class="string">&#x27;click&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>+args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8、浅拷贝"><a href="#8、浅拷贝" class="headerlink" title="8、浅拷贝"></a>8、浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        newObj[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">user</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> copyObj = <span class="title function_">clone</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj == obj) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj.<span class="property">user</span> == obj.<span class="property">user</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h2 id="9、深拷贝"><a href="#9、深拷贝" class="headerlink" title="9、深拷贝"></a>9、深拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj == <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 直接返回新的函数</span></span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不是对象或者为null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj != <span class="string">&#x27;object&#x27;</span> || !obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是对象 function Regexp Object Array Date</span></span><br><span class="line">    <span class="comment">//如果是正则</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是Date</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj.<span class="title function_">getime</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> copyObj = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        copyObj = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        copyObj[key] = <span class="title function_">deepClone</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copyObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">objs</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:&#123;</span><br><span class="line">            <span class="attr">objss</span>:&#123;</span><br><span class="line">                <span class="attr">names</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">            &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title function_">deepClone</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 == obj)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">objs</span> == obj.<span class="property">objs</span>)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">objs</span>.<span class="property">name</span> == obj.<span class="property">objs</span>.<span class="property">name</span>)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">objs</span>.<span class="property">name</span>.<span class="property">objss</span>.<span class="property">namess</span> == obj.<span class="property">objs</span>.<span class="property">name</span>.<span class="property">objss</span>.<span class="property">namess</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h2 id="10、数组的扁平化"><a href="#10、数组的扁平化" class="headerlink" title="10、数组的扁平化"></a>10、数组的扁平化</h2><h3 id="JSON-正则"><a href="#JSON-正则" class="headerlink" title="JSON+正则"></a>JSON+正则</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]]</span><br><span class="line"><span class="comment">// JSON实现数组扁平化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatJSON</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Arr</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr)</span><br><span class="line">    <span class="title class_">Arr</span> = <span class="title class_">Arr</span>.<span class="title function_">replace</span>(<span class="regexp">/[\[\]]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="title class_">Arr</span> = <span class="string">&#x27;[&#x27;</span> + <span class="title class_">Arr</span> + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Arr</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatJSON</span>(arr));</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]]</span><br><span class="line"><span class="comment">// 递归实现数组扁平化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatRecursive</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i]))&#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>(<span class="title function_">flatRecursive</span>(arr[i]))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatRecursive</span>(arr));</span><br></pre></td></tr></table></figure><hr><h2 id="11、颜色RGB颜色转换16进制"><a href="#11、颜色RGB颜色转换16进制" class="headerlink" title="11、颜色RGB颜色转换16进制"></a>11、颜色RGB颜色转换16进制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rgbToSix</span>(<span class="params">rgbStr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> six = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> rgbStrArr = rgbStr.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    rgbStrArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//将非数字转为空字符串，随后将其整个转为数组，再用toString转为16进制，最后进行拼接</span></span><br><span class="line">        six += <span class="title class_">Number</span>(v.<span class="title function_">replace</span>(<span class="regexp">/[^0-9]/ig</span>,<span class="string">&#x27;&#x27;</span>)).<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span>+six</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">rgbToSix</span>(<span class="string">&#x27;rgb(255,255,255)&#x27;</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="12、模拟实现call和apply"><a href="#12、模拟实现call和apply" class="headerlink" title="12、模拟实现call和apply"></a>12、模拟实现call和apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//call</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//apply</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>150个加强练习</title>
      <link href="/2023/06/06/TechnicalArticles/work/01.150%E4%B8%AAJS%E5%8A%A0%E5%BC%BA%E7%BB%83%E4%B9%A0/"/>
      <url>/2023/06/06/TechnicalArticles/work/01.150%E4%B8%AAJS%E5%8A%A0%E5%BC%BA%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h6 id="1-输出是什么？D"><a href="#1-输出是什么？D" class="headerlink" title="1. 输出是什么？D"></a>1. 输出是什么？<strong>D</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">21</span><span class="comment">//Cannot access &#x27;age&#x27; before initialization</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>Lydia</code> 和 <code>undefined</code></li><li>B: <code>Lydia</code> 和 <code>ReferenceError</code></li><li>C: <code>ReferenceError</code> 和 <code>21</code></li><li>D: <code>undefined</code> 和 <code>ReferenceError</code></li></ul><h6 id="2-输出是什么？C"><a href="#2-输出是什么？C" class="headerlink" title="2. 输出是什么？C"></a>2. 输出是什么？<strong>C</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(i), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0 1 2</code> 和 <code>0 1 2</code></li><li>B: <code>0 1 2</code> 和 <code>3 3 3</code></li><li>C: <code>3 3 3</code> 和 <code>0 1 2</code></li></ul><hr><h6 id="3-输出是什么？B"><a href="#3-输出是什么？B" class="headerlink" title="3. 输出是什么？B"></a>3. 输出是什么？<strong>B</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="title function_">diameter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">perimeter</span>: <span class="function">() =&gt;</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span><span class="comment">//箭头函数没有this指向，this指向的是window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shape.<span class="title function_">diameter</span>()</span><br><span class="line">shape.<span class="title function_">perimeter</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code> and <code>62.83185307179586</code></li><li>B: <code>20</code> and <code>NaN</code></li><li>C: <code>20</code> and <code>63</code></li><li>D: <code>NaN</code> and <code>63</code></li></ul><hr><h6 id="4-输出是什么？A"><a href="#4-输出是什么？A" class="headerlink" title="4. 输出是什么？A"></a>4. 输出是什么？<strong>A</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="literal">true</span>;</span><br><span class="line">!<span class="string">&quot;Lydia&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> and <code>false</code></li><li>B: <code>false</code> and <code>NaN</code></li><li>C: <code>false</code> and <code>false</code></li></ul><hr><h6 id="5-哪一个是正确的？A"><a href="#5-哪一个是正确的？A" class="headerlink" title="5. 哪一个是正确的？A"></a>5. 哪一个是正确的？<strong>A</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouse = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Mickey&#x27;</span>,</span><br><span class="line">  <span class="attr">small</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>mouse.bird.size</code>是无效的</li><li>B: <code>mouse[bird.size]</code>是无效的</li><li>C: <code>mouse[bird[&quot;size&quot;]]</code>是无效的</li><li>D: 以上三个选项都是有效的</li></ul><hr><h6 id="6-输出是什么？A"><a href="#6-输出是什么？A" class="headerlink" title="6. 输出是什么？A"></a>6. 输出是什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">greeting</span>: <span class="string">&#x27;Hey!&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> d</span><br><span class="line"></span><br><span class="line">d = c</span><br><span class="line">c.<span class="property">greeting</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">greeting</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><hr><h6 id="7-输出是什么？C"><a href="#7-输出是什么？C" class="headerlink" title="7. 输出是什么？C"></a>7. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b === c)</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>true</code> <code>false</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>true</code></li></ul><hr><h6 id="8-输出是什么？D-静态方法，不能用实例对象直接调用"><a href="#8-输出是什么？D-静态方法，不能用实例对象直接调用" class="headerlink" title="8. 输出是什么？D 静态方法，不能用实例对象直接调用"></a>8. 输出是什么？D 静态方法，不能用实例对象直接调用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chameleon</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">colorChange</span>(<span class="params">newColor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newColor</span> = newColor</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">newColor</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123; newColor = <span class="string">&#x27;green&#x27;</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newColor</span> = newColor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> freddie = <span class="keyword">new</span> <span class="title class_">Chameleon</span>(&#123; <span class="attr">newColor</span>: <span class="string">&#x27;purple&#x27;</span> &#125;)</span><br><span class="line">freddie.<span class="title function_">colorChange</span>(<span class="string">&#x27;orange&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>orange</code></li><li>B: <code>purple</code></li><li>C: <code>green</code></li><li>D: <code>TypeError</code></li></ul><hr><h6 id="9-输出是什么？A"><a href="#9-输出是什么？A" class="headerlink" title="9. 输出是什么？A"></a>9. 输出是什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting</span><br><span class="line">greetign = &#123;&#125; <span class="comment">// Typo!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greetign)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;&#125;</code></li><li>B: <code>ReferenceError: greetign is not defined</code></li><li>C: <code>undefined</code></li></ul><hr><h6 id="10-当我们这么做时，会发生什么？-A-函数也是对象，所以可以"><a href="#10-当我们这么做时，会发生什么？-A-函数也是对象，所以可以" class="headerlink" title="10. 当我们这么做时，会发生什么？ A 函数也是对象，所以可以."></a>10. 当我们这么做时，会发生什么？ A 函数也是对象，所以可以.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof!&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bark.<span class="property">animal</span> = <span class="string">&#x27;dog&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>A: 正常运行!</li><li>B: <code>SyntaxError</code>. 你不能通过这种方式给函数增加属性。</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="11-输出是什么？A-member-getFullName-is-not-a-function-静态方法不能通过实例对象直接调用"><a href="#11-输出是什么？A-member-getFullName-is-not-a-function-静态方法不能通过实例对象直接调用" class="headerlink" title="11. 输出是什么？A member.getFullName is not a function 静态方法不能通过实例对象直接调用"></a>11. 输出是什么？A member.getFullName is not a function 静态方法不能通过实例对象直接调用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lydia&quot;</span>, <span class="string">&quot;Hallie&quot;</span>);</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">getFullName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="title function_">getFullName</span>());</span><br></pre></td></tr></table></figure><ul><li>A: <code>TypeError</code></li><li>B: <code>SyntaxError</code></li><li>C: <code>Lydia Hallie</code></li><li>D: <code>undefined</code> <code>undefined</code></li></ul><hr><h6 id="12-输出是什么？A"><a href="#12-输出是什么？A" class="headerlink" title="12. 输出是什么？A"></a>12. 输出是什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Lydia&#x27;</span>, <span class="string">&#x27;Hallie&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sarah = <span class="title class_">Person</span>(<span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lydia)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sarah)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>undefined</code></li><li>B: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>Person &#123;firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot;&#125;</code></li><li>C: <code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>&#123;&#125;</code></li><li>D:<code>Person &#123;firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;&#125;</code> and <code>ReferenceError</code></li></ul><hr><h6 id="13-事件传播的三个阶段是什么？D"><a href="#13-事件传播的三个阶段是什么？D" class="headerlink" title="13. 事件传播的三个阶段是什么？D"></a>13. 事件传播的三个阶段是什么？D</h6><ul><li>A: Target &gt; Capturing &gt; Bubbling</li><li>B: Bubbling &gt; Target &gt; Capturing</li><li>C: Target &gt; Bubbling &gt; Capturing</li><li>D: Capturing &gt; Target &gt; Bubbling</li></ul><hr><h6 id="14-所有对象都有原型。B-null是个空对象引用，没有原型"><a href="#14-所有对象都有原型。B-null是个空对象引用，没有原型" class="headerlink" title="14. 所有对象都有原型。B null是个空对象引用，没有原型"></a>14. 所有对象都有原型。B null是个空对象引用，没有原型</h6><ul><li>A: 对</li><li>B: 错</li></ul><hr><h6 id="15-输出是什么？C"><a href="#15-输出是什么？C" class="headerlink" title="15. 输出是什么？C"></a>15. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>TypeError</code></li><li>C: <code>&quot;12&quot;</code></li><li>D: <code>3</code></li></ul><hr><h6 id="16-输出是什么？C"><a href="#16-输出是什么？C" class="headerlink" title="16. 输出是什么？C"></a>16. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number++)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++number)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>2</code></li><li>C: <code>0</code> <code>2</code> <code>2</code></li><li>D: <code>0</code> <code>1</code> <code>2</code></li></ul><hr><h6 id="17-输出是什么？B"><a href="#17-输出是什么？B" class="headerlink" title="17. 输出是什么？B"></a>17. 输出是什么？B</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">该代码将使用 &quot;标记模板字面量&quot; 来调用 getPersonInfo 函数，并将其作为第一个参数传递给该函数。标记模板字面量使用反引号`包装，并在第一个参数和任何插入的表达式之间插入一个或多个标记。在本例中，$&#123;person&#125; is $&#123;age&#125; years old是一个标记模板字面量，其中$&#123;person&#125;和$&#123;age&#125;是插入的表达式，getPersonInfo` 是标记。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在调用 getPersonInfo 时，标记模板字面量将转换为函数的第一个参数数组。第一个参数（即数组中的第一个元素）是字符串数组，其中包含标记之间的所有文本，以及任何插入的表达式的字符串值。在本例中，第一个参数数组将是：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; is &#x27;</span>, <span class="string">&#x27; years old&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;Lydia&#x27;</span>,</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPersonInfo</span>(<span class="params">one, two, three</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(one)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(two)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(three)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code> <code>21</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code></li><li>B: <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>&quot;Lydia&quot;</code> <code>21</code></li><li>C: <code>&quot;Lydia&quot;</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>21</code></li></ul><hr><h6 id="18-输出是什么？C-直接用-x3D-去比较对象，不管是-x3D-x3D-还是-x3D-x3D-x3D-，都是直接比较地址，显然题目中的形参和函数中的对象不在同一个地址，固选C"><a href="#18-输出是什么？C-直接用-x3D-去比较对象，不管是-x3D-x3D-还是-x3D-x3D-x3D-，都是直接比较地址，显然题目中的形参和函数中的对象不在同一个地址，固选C" class="headerlink" title="18. 输出是什么？C 直接用&#x3D;去比较对象，不管是&#x3D;&#x3D; 还是 &#x3D;&#x3D;&#x3D;，都是直接比较地址，显然题目中的形参和函数中的对象不在同一个地址，固选C"></a>18. 输出是什么？C 直接用&#x3D;去比较对象，不管是&#x3D;&#x3D; 还是 &#x3D;&#x3D;&#x3D;，都是直接比较地址，显然题目中的形参和函数中的对象不在同一个地址，固选C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (data === &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are an adult!&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You are still an adult.&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hmm.. You don&#x27;t have an age I guess`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkAge</span>(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li>A: <code>You are an adult!</code></li><li>B: <code>You are still an adult.</code></li><li>C: <code>Hmm.. You don&#39;t have an age I guess</code></li></ul><hr><h6 id="19-输出是什么？C"><a href="#19-输出是什么？C" class="headerlink" title="19. 输出是什么？C"></a>19. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>(<span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;array&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;NaN&quot;</code></li></ul><hr><h6 id="20-输出是什么？C-使用了严格模式，使用变量必须声明"><a href="#20-输出是什么？C-使用了严格模式，使用变量必须声明" class="headerlink" title="20. 输出是什么？C 使用了严格模式，使用变量必须声明"></a>20. 输出是什么？C 使用了严格模式，使用变量必须声明</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">  age = <span class="number">21</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)<span class="comment">//Assignment to constant variable.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>21</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><hr><h6 id="21-输出是什么？B-A❤"><a href="#21-输出是什么？B-A❤" class="headerlink" title="21. 输出是什么？B   A❤"></a>21. 输出是什么？B   A❤</h6><p><code>eval()</code> 是全局对象的一个函数属性</p><p><code>eval()</code> 函数会将传入的字符串当做 JavaScript 代码进行执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="built_in">eval</span>(<span class="string">&#x27;10*10+5&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>105</code></li><li>B: <code>&quot;105&quot;</code></li><li>C: <code>TypeError</code></li><li>D: <code>&quot;10*10+5&quot;</code></li></ul><hr><h6 id="22-cool-secret-可访问多长时间？B"><a href="#22-cool-secret-可访问多长时间？B" class="headerlink" title="22. cool_secret 可访问多长时间？B"></a>22. cool_secret 可访问多长时间？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;cool_secret&#x27;</span>, <span class="number">123</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 永远，数据不会丢失。</li><li>B: 当用户关掉标签页时。</li><li>C: 当用户关掉整个浏览器，而不只是关掉标签页。</li><li>D: 当用户关闭电脑时。</li></ul><hr><h6 id="23-输出是什么？B"><a href="#23-输出是什么？B" class="headerlink" title="23. 输出是什么？B"></a>23. 输出是什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br></pre></td></tr></table></figure><ul><li>A: <code>8</code></li><li>B: <code>10</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="24-输出是什么？C"><a href="#24-输出是什么？C" class="headerlink" title="24. 输出是什么？C"></a>24. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">            obj.<span class="title function_">hasOwnProperty</span>(<span class="number">1</span>),</span><br><span class="line">            set.<span class="title function_">has</span>(<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">            set.<span class="title function_">has</span>(<span class="number">1</span>)) </span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li><li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li></ul><hr><h6 id="25-输出是什么？C-对象不可有重复的key"><a href="#25-输出是什么？C-对象不可有重复的key" class="headerlink" title="25. 输出是什么？C 对象不可有重复的key"></a>25. 输出是什么？C 对象不可有重复的key</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;one&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;two&#x27;</span>, <span class="attr">a</span>: <span class="string">&#x27;three&#x27;</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; a: &quot;one&quot;, b: &quot;two&quot; &#125;</code></li><li>B: <code>&#123; b: &quot;two&quot;, a: &quot;three&quot; &#125;</code></li><li>C: <code>&#123; a: &quot;three&quot;, b: &quot;two&quot; &#125;</code></li><li>D: <code>SyntaxError</code></li></ul><hr><h6 id="26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。C-A❤"><a href="#26-JavaScript-全局执行上下文为你做了两件事：全局对象和-this-关键字。C-A❤" class="headerlink" title="26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。C  A❤"></a>26. JavaScript 全局执行上下文为你做了两件事：全局对象和 this 关键字。C  A❤</h6><ul><li>A: 对</li><li>B: 错</li><li>C: 看情况</li></ul><hr><h6 id="27-输出是什么？C"><a href="#27-输出是什么？C" class="headerlink" title="27. 输出是什么？C"></a>27. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">continue</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>3</code></li><li>C: <code>1</code> <code>2</code> <code>4</code></li><li>D: <code>1</code> <code>3</code> <code>4</code></li></ul><hr><h6 id="28-输出是什么？A"><a href="#28-输出是什么？A" class="headerlink" title="28. 输出是什么？A"></a>28. 输出是什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">giveLydiaPizza</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Just give Lydia pizza already!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line">name.<span class="title function_">giveLydiaPizza</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Just give Lydia pizza already!&quot;</code></li><li>B: <code>TypeError: not a function</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><hr><h6 id="29-输出是什么？B"><a href="#29-输出是什么？B" class="headerlink" title="29. 输出是什么？B"></a>29. 输出是什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">&#x27;b&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span></span><br><span class="line">a[c] = <span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b])</span><br></pre></td></tr></table></figure><ul><li>A: <code>123</code></li><li>B: <code>456</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="30-输出是什么？B"><a href="#30-输出是什么？B" class="headerlink" title="30. 输出是什么？B"></a>30. 输出是什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;First&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Second&#x27;</span>))<span class="comment">//异步</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">baz</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Third&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>()</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="title function_">baz</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>First</code> <code>Second</code> <code>Third</code></li><li>B: <code>First</code> <code>Third</code> <code>Second</code></li><li>C: <code>Second</code> <code>First</code> <code>Third</code></li><li>D: <code>Second</code> <code>Third</code> <code>First</code></li></ul><hr><h6 id="31-当点击按钮时，event-target是什么？C"><a href="#31-当点击按钮时，event-target是什么？C" class="headerlink" title="31. 当点击按钮时，event.target是什么？C"></a>31. 当点击按钮时，event.target是什么？C</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;first div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;second div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;button&#x27;)&quot;</span>&gt;</span></span><br><span class="line">      Click!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: Outer <code>div</code></li><li>B: Inner <code>div</code></li><li>C: <code>button</code></li><li>D: 一个包含所有嵌套元素的数组。</li></ul><hr><h6 id="32-当您单击该段落时，日志输出是什么？A"><a href="#32-当您单击该段落时，日志输出是什么？A" class="headerlink" title="32. 当您单击该段落时，日志输出是什么？A"></a>32. 当您单击该段落时，日志输出是什么？A</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;div&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;console.log(&#x27;p&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    Click here!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>p</code> <code>div</code></li><li>B: <code>div</code> <code>p</code></li><li>C: <code>p</code></li><li>D: <code>div</code></li></ul><hr><h6 id="33-输出是什么？D"><a href="#33-输出是什么？D" class="headerlink" title="33. 输出是什么？D"></a>33. 输出是什么？D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;Lydia&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi.<span class="title function_">call</span>(person, <span class="number">21</span>)</span><br><span class="line">sayHi.<span class="title function_">bind</span>(person, <span class="number">21</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li><li>B: <code>function</code> <code>function</code></li><li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li><li>D: <code>Lydia is 21</code> <code>function</code></li></ul><hr><h6 id="34-输出是什么？B"><a href="#34-输出是什么？B" class="headerlink" title="34. 输出是什么？B"></a>34. 输出是什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="function">() =&gt;</span> <span class="number">0</span>)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;object&quot;</code></li><li>B: <code>&quot;number&quot;</code></li><li>C: <code>&quot;function&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><hr><h6 id="35-下面哪些值是-false-A"><a href="#35-下面哪些值是-false-A" class="headerlink" title="35. 下面哪些值是 false? A"></a>35. 下面哪些值是 false? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="comment">//false</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">0</span>)<span class="comment">//true</span></span><br><span class="line">(<span class="string">&#x27;&#x27;</span>)<span class="comment">//false</span></span><br><span class="line">(<span class="string">&#x27; &#x27;</span>)<span class="comment">//true</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)<span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span><span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code>, <code>&#39;&#39;</code>, <code>undefined</code></li><li>B: <code>0</code>, <code>new Number(0)</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>C: <code>0</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>D: All of them are falsy</li></ul><hr><h6 id="36-输出是什么？B"><a href="#36-输出是什么？B" class="headerlink" title="36. 输出是什么？B"></a>36. 输出是什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><hr><h6 id="37-输出是什么？C"><a href="#37-输出是什么？C" class="headerlink" title="37. 输出是什么？C"></a>37. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">numbers[<span class="number">10</span>] = <span class="number">11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 7 x null, 11]</code></li><li>B: <code>[1, 2, 3, 11]</code></li><li>C: <code>[1, 2, 3, 7 x empty, 11]</code></li><li>D: <code>SyntaxError</code></li></ul><hr><h6 id="38-输出是什么？A"><a href="#38-输出是什么？A" class="headerlink" title="38. 输出是什么？A"></a>38. 输出是什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x, y</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (x) &#123;<span class="comment">//x为本地变量</span></span><br><span class="line">      <span class="comment">//在 catch 块中重新声明的 x 变量覆盖了外部函数作用域的 x 变量。</span></span><br><span class="line">    (x = <span class="number">1</span>), (y = <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>undefined</code> <code>2</code></li><li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>C: <code>1</code> <code>1</code> <code>2</code></li><li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li></ul><hr><h6 id="39-JavaScript-中的一切都是？C-A❤"><a href="#39-JavaScript-中的一切都是？C-A❤" class="headerlink" title="39. JavaScript 中的一切都是？C A❤"></a>39. JavaScript 中的一切都是？C A❤</h6><ul><li>A: 基本类型与对象</li><li>B: 函数与对象</li><li>C: 只有对象</li><li>D: 数字与对象</li></ul><hr><h6 id="40-输出是什么？C"><a href="#40-输出是什么？C" class="headerlink" title="40. 输出是什么？C"></a>40. 输出是什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]].<span class="title function_">reduce</span>(</span><br><span class="line">  <span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acc.<span class="title function_">concat</span>(cur)</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 1, 2, 3, 1, 2]</code></li><li>B: <code>[6, 1, 2]</code></li><li>C: <code>[1, 2, 0, 1, 2, 3]</code></li><li>D: <code>[1, 2, 6]</code></li></ul><hr><h6 id="41-输出是什么？B"><a href="#41-输出是什么？B" class="headerlink" title="41. 输出是什么？B"></a>41. 输出是什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="literal">null</span></span><br><span class="line">!!<span class="string">&#x27;&#x27;</span></span><br><span class="line">!!<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>false</code> <code>true</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>false</code></li></ul><hr><h6 id="42-setInterval-方法的返回值是什么？A❤"><a href="#42-setInterval-方法的返回值是什么？A❤" class="headerlink" title="42. setInterval 方法的返回值是什么？A❤"></a>42. <code>setInterval</code> 方法的返回值是什么？A❤</h6><p>setInterval返回一个 <code>interval ID</code>，该 ID 唯一地标识时间间隔，因此你可以稍后通过调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/clearInterval"><code>clearInterval()</code></a> 来移除定时器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 一个唯一的id</li><li>B: 该方法指定的毫秒数</li><li>C: 传递的函数</li><li>D: <code>undefined</code></li></ul><hr><h6 id="43-输出是什么？A"><a href="#43-输出是什么？A" class="headerlink" title="43. 输出是什么？A"></a>43. 输出是什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">&#x27;Lydia&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</code></li><li>B: <code>[&quot;Lydia&quot;]</code></li><li>C: <code>[[], &quot;Lydia&quot;]</code></li><li>D: <code>[[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</code></li></ul><hr><h6 id="44-输出是什么-C"><a href="#44-输出是什么-C" class="headerlink" title="44. 输出是什么? C"></a>44. 输出是什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> i;</span><br><span class="line">  <span class="keyword">yield</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">generator</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 10], [10, 20]</code></li><li>B: <code>20, 20</code></li><li>C: <code>10, 20</code></li><li>D: <code>0, 10 and 10, 20</code></li></ul><h6 id="45-返回值是什么-B"><a href="#45-返回值是什么-B" class="headerlink" title="45. 返回值是什么? B"></a>45. 返回值是什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(res, <span class="number">500</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(res, <span class="number">100</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([firstPromise, secondPromise]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;one&quot;</code></li><li>B: <code>&quot;two&quot;</code></li><li>C: <code>&quot;two&quot; &quot;one&quot;</code></li><li>D: <code>&quot;one&quot; &quot;two&quot;</code></li></ul><hr><h6 id="46-输出是什么-D-❤"><a href="#46-输出是什么-D-❤" class="headerlink" title="46. 输出是什么? D ❤"></a>46. 输出是什么? D ❤</h6><p>js中，对象数组会一直保持着对对象的引用 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> members = [person];</span><br><span class="line">person = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(members);</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code></li><li>B: <code>[null]</code></li><li>C: <code>[&#123;&#125;]</code></li><li>D: <code>[&#123; name: &quot;Lydia&quot; &#125;]</code></li></ul><hr><h6 id="47-输出是什么-B"><a href="#47-输出是什么-B" class="headerlink" title="47. 输出是什么? B"></a>47. 输出是什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot; &#125;, &#123; age: 21 &#125;</code></li><li>B: <code>&quot;name&quot;, &quot;age&quot;</code></li><li>C: <code>&quot;Lydia&quot;, 21</code></li><li>D: <code>[&quot;name&quot;, &quot;Lydia&quot;], [&quot;age&quot;, 21]</code></li></ul><hr><h6 id="48-输出是什么-B"><a href="#48-输出是什么-B" class="headerlink" title="48. 输出是什么? B"></a>48. 输出是什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> + <span class="number">4</span> + <span class="string">&quot;5&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;345&quot;</code></li><li>B: <code>&quot;75&quot;</code></li><li>C: <code>12</code></li><li>D: <code>&quot;12&quot;</code></li></ul><hr><h6 id="49-num的值是什么-C"><a href="#49-num的值是什么-C" class="headerlink" title="49. num的值是什么? C"></a>49. <code>num</code>的值是什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="string">&quot;7*6&quot;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>42</code></li><li>B: <code>&quot;42&quot;</code></li><li>C: <code>7</code></li><li>D: <code>NaN</code></li></ul><hr><h6 id="50-输出是什么-D-C❤"><a href="#50-输出是什么-D-C❤" class="headerlink" title="50. 输出是什么? D C❤"></a>50. 输出是什么? D C❤</h6><p>return 没有写值，默认返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">&quot;number&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[]</code></li><li>B: <code>[null, null, null]</code></li><li>C: <code>[undefined, undefined, undefined]</code></li><li>D: <code>[ 3 x empty ]</code></li></ul><hr><h6 id="51-输出的是什么-A"><a href="#51-输出的是什么-A" class="headerlink" title="51. 输出的是什么? A"></a>51. 输出的是什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">member, year</span>) &#123;</span><br><span class="line">  member.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">  year = <span class="string">&quot;1998&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Sarah&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> birthYear = <span class="string">&quot;1997&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getInfo</span>(person, birthYear);</span><br><span class="line"><span class="comment">//person传递的是引用，birthday传递的是值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person, birthYear);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot; &#125;, &quot;1997&quot;</code></li><li>B: <code>&#123; name: &quot;Sarah&quot; &#125;, &quot;1998&quot;</code></li><li>C: <code>&#123; name: &quot;Lydia&quot; &#125;, &quot;1998&quot;</code></li><li>D: <code>&#123; name: &quot;Sarah&quot; &#125;, &quot;1997&quot;</code></li></ul><hr><h6 id="52-输出是什么-D"><a href="#52-输出是什么-D" class="headerlink" title="52. 输出是什么? D"></a>52. 输出是什么? D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">greeting</span>();<span class="comment">//程序丢出错误，不再往下执行，并将&#x27;Hello world&#x27;传递到catch中</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It worked!&quot;</span>, data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;<span class="comment">//e接收到&#x27;Hello world&#x27;，并打印</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oh no an error:&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;It worked! Hello world!&quot;</code></li><li>B: <code>&quot;Oh no an error: undefined</code></li><li>C: <code>SyntaxError: can only throw Error objects</code></li><li>D: <code>&quot;Oh no an error: Hello world!</code></li></ul><hr><h6 id="53-输出是什么-B"><a href="#53-输出是什么-B" class="headerlink" title="53. 输出是什么? B"></a>53. 输出是什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">make</span> = <span class="string">&quot;Lamborghini&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">make</span>: <span class="string">&quot;Maserati&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCar.<span class="property">make</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lamborghini&quot;</code></li><li>B: <code>&quot;Maserati&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><hr><h6 id="54-输出是什么-A"><a href="#54-输出是什么-A" class="headerlink" title="54. 输出是什么? A"></a>54. 输出是什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = (y = <span class="number">10</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;undefined&quot;, &quot;number&quot;</code></li><li>B: <code>&quot;number&quot;, &quot;number&quot;</code></li><li>C: <code>&quot;object&quot;, &quot;number&quot;</code></li><li>D: <code>&quot;number&quot;, &quot;undefined&quot;</code></li></ul><hr><h6 id="55-输出是什么-A"><a href="#55-输出是什么-A" class="headerlink" title="55. 输出是什么? A"></a>55. 输出是什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Woof I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Mara&quot;</span>);</span><br><span class="line"></span><br><span class="line">pet.<span class="title function_">bark</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span>;</span><br><span class="line"></span><br><span class="line">pet.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Woof I am Mara&quot;</code>, <code>TypeError</code></li><li>B: <code>&quot;Woof I am Mara&quot;</code>,<code>&quot;Woof I am Mara&quot;</code></li><li>C: <code>&quot;Woof I am Mara&quot;</code>, <code>undefined</code></li><li>D: <code>TypeError</code>, <code>TypeError</code></li></ul><hr><h6 id="56-输出是什么-B-D❤"><a href="#56-输出是什么-B-D❤" class="headerlink" title="56. 输出是什么? B  D❤"></a>56. 输出是什么? B  D❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 1, 2, 3, 4]</code></li><li>B: <code>[1, 2, 3, 4]</code></li><li>C: <code>&#123;1, 1, 2, 3, 4&#125;</code></li><li>D: <code>&#123;1, 2, 3, 4&#125;</code></li></ul><hr><h6 id="57-输出是什么-C-const声明的变量无法重新赋值"><a href="#57-输出是什么-C-const声明的变量无法重新赋值" class="headerlink" title="57. 输出是什么? C const声明的变量无法重新赋值"></a>57. 输出是什么? C const声明的变量无法重新赋值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counter;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> myCounter <span class="keyword">from</span> <span class="string">&quot;./counter&quot;</span>;</span><br><span class="line"></span><br><span class="line">myCounter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCounter);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>Error</code></li><li>D: <code>NaN</code></li></ul><hr><h6 id="58-输出是什么-A-const声明后无法更改，固name无法删除"><a href="#58-输出是什么-A-const声明后无法更改，固name无法删除" class="headerlink" title="58. 输出是什么? A const声明后无法更改，固name无法删除"></a>58. 输出是什么? A const声明后无法更改，固name无法删除</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> age);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code>, <code>true</code></li><li>B: <code>&quot;Lydia&quot;</code>, <code>21</code></li><li>C: <code>true</code>, <code>true</code></li><li>D: <code>undefined</code>, <code>undefined</code></li></ul><hr><h6 id="59-输出是什么-C"><a href="#59-输出是什么-C" class="headerlink" title="59. 输出是什么? C"></a>59. 输出是什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> [y] = numbers;<span class="comment">//数组解构赋值 ，直接将数组的第一位直接传给了y</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[[1, 2, 3, 4, 5]]</code></li><li>B: <code>[1, 2, 3, 4, 5]</code></li><li>C: <code>1</code></li><li>D: <code>[1]</code></li></ul><hr><h6 id="60-输出是什么-B"><a href="#60-输出是什么-B" class="headerlink" title="60. 输出是什么? B"></a>60. 输出是什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> admin = &#123; <span class="attr">admin</span>: <span class="literal">true</span>, ...user &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(admin);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; admin: true, user: &#123; name: &quot;Lydia&quot;, age: 21 &#125; &#125;</code></li><li>B: <code>&#123; admin: true, name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>C: <code>&#123; admin: true, user: [&quot;Lydia&quot;, 21] &#125;</code></li><li>D: <code>&#123; admin: true &#125;</code></li></ul><hr><h6 id="61-输出是什么-B"><a href="#61-输出是什么-B" class="headerlink" title="61. 输出是什么? B"></a>61. 输出是什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;age&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">21</span> &#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">属性对象若未赋值，则默认为false</span></span><br><span class="line"><span class="comment">所以configurable , enumerable ,writable默认为false，所以不可枚举，所以Object.keys无法遍历到age</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(person))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>B: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code>, <code>[&quot;name&quot;]</code></li><li>C: <code>&#123; name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>D: <code>&#123; name: &quot;Lydia&quot;&#125;</code>, <code>[&quot;age&quot;]</code></li></ul><hr><h6 id="62-输出是什么-A"><a href="#62-输出是什么-A" class="headerlink" title="62. 输出是什么? A"></a>62. 输出是什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;lydiahallie&quot;</span>,</span><br><span class="line">  <span class="attr">level</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">health</span>: <span class="number">90</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(settings, [<span class="string">&quot;level&quot;</span>, <span class="string">&quot;health&quot;</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JSON.stringify函数的第二个参数若为一个数组，则只有包含在这个数组中的属性名才会被序列化最终的JSON字符串中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;&#123;&quot;level&quot;:19, &quot;health&quot;:90&#125;&quot;</code></li><li>B: <code>&quot;&#123;&quot;username&quot;: &quot;lydiahallie&quot;&#125;&quot;</code></li><li>C: <code>&quot;[&quot;level&quot;, &quot;health&quot;]&quot;</code></li><li>D: <code>&quot;&#123;&quot;username&quot;: &quot;lydiahallie&quot;, &quot;level&quot;:19, &quot;health&quot;:90&#125;&quot;</code></li></ul><hr><h6 id="63-输出是什么-A"><a href="#63-输出是什么-A" class="headerlink" title="63. 输出是什么? A"></a>63. 输出是什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increaseNumber</span> = (<span class="params"></span>) =&gt; num++;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increasePassedNumber</span> = number =&gt; number++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num1 = <span class="title function_">increaseNumber</span>();</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="title function_">increasePassedNumber</span>(num1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code>, <code>10</code></li><li>B: <code>10</code>, <code>11</code></li><li>C: <code>11</code>, <code>11</code></li><li>D: <code>11</code>, <code>12</code></li></ul><hr><h6 id="64-输出什么-C-❤"><a href="#64-输出什么-C-❤" class="headerlink" title="64. 输出什么? C ❤"></a>64. 输出什么? C ❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = &#123; <span class="attr">number</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">x = &#123; ...value &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">number</span> *= <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对象扩展运算符可以用来创建新的对象，以确保每次调用函数时都使用一个新的默认参数对象。</span></span><br><span class="line"><span class="title function_">multiply</span>();<span class="comment">//每次的value都是一个新对象</span></span><br><span class="line"><span class="title function_">multiply</span>();<span class="comment">//每次的value都是一个新对象</span></span><br><span class="line"><span class="title function_">multiply</span>(value);</span><br><span class="line"><span class="title function_">multiply</span>(value);</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li><li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li><li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li><li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li></ul><hr><h6 id="65-输出什么-D-❤"><a href="#65-输出什么-D-❤" class="headerlink" title="65. 输出什么? D ❤"></a>65. 输出什么? D ❤</h6><p>每次执行reduce后没有返回值，故第二次累加的值是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在这个例子中，我们的函数(x, y) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)用于将每个元素传递给控制台输出，同时返回<span class="literal">undefined</span>。在第一次调用函数时，x的值为数组的第一个元素<span class="number">1</span>，y的值为数组的第二个元素<span class="number">2</span>。因此，在第一次调用时，我们输出<span class="number">1</span> <span class="number">2</span>。</span><br><span class="line"></span><br><span class="line">在之后的调用中，reduce方法将累加器设置为上一次调用的返回值，也就是<span class="literal">undefined</span>。因此，在第二次调用时，x的值为<span class="literal">undefined</span>，y的值为数组的第三个元素<span class="number">3</span>。类似地，在第三次调用时，x的值为<span class="literal">undefined</span>，y的值为数组的第四个元素<span class="number">4</span>。因此，在这两个调用中，我们分别输出了<span class="literal">undefined</span> <span class="number">3</span>和<span class="literal">undefined</span> <span class="number">4</span>。</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li><li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li><li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li><li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li></ul><hr><h6 id="66-使用哪个构造函数可以成功继承Dog类-B"><a href="#66-使用哪个构造函数可以成功继承Dog类-B" class="headerlink" title="66. 使用哪个构造函数可以成功继承Dog类? B"></a>66. 使用哪个构造函数可以成功继承<code>Dog</code>类? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Labrador</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">  <span class="comment">// 1 </span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4 </span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><hr><h6 id="67-输出什么-B"><a href="#67-输出什么-B" class="headerlink" title="67. 输出什么?  B"></a>67. 输出什么?  B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running index.js&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&#x27;./sum.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running sum.js&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><ul><li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li><li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li><li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li><li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li></ul><hr><h6 id="68-输出什么-B-A❤"><a href="#68-输出什么-B-A❤" class="headerlink" title="68. 输出什么? B A❤"></a>68. 输出什么? B A❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="number">2</span>) === <span class="title class_">Number</span>(<span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">false</span>) === <span class="title class_">Boolean</span>(<span class="literal">false</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>) === <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code>, <code>true</code>, <code>false</code></li><li>B: <code>false</code>, <code>true</code>, <code>false</code></li><li>C: <code>true</code>, <code>false</code>, <code>true</code></li><li>D: <code>true</code>, <code>true</code>, <code>true</code></li></ul><hr><h6 id="69-输出什么-C"><a href="#69-输出什么-C" class="headerlink" title="69. 输出什么? C"></a>69. 输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">padStart</span>(<span class="number">13</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">padStart</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code></li><li>B: <code>&quot;           Lydia Hallie&quot;</code>, <code>&quot;  Lydia Hallie&quot;</code> (<code>&quot;[13x whitespace]Lydia Hallie&quot;</code>, <code>&quot;[2x whitespace]Lydia Hallie&quot;</code>)</li><li>C: <code>&quot; Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code> (<code>&quot;[1x whitespace]Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code>)</li><li>D: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lyd&quot;</code></li></ul><hr><h6 id="70-输出什么-A"><a href="#70-输出什么-A" class="headerlink" title="70. 输出什么? A"></a>70. 输出什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🥑&quot;</span> + <span class="string">&quot;💻&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑💻&quot;</code></li><li>B: <code>257548</code></li><li>C: A string containing their code points</li><li>D: Error</li></ul><hr><h6 id="71-如何能打印出console-log语句后注释掉的值？C-❤"><a href="#71-如何能打印出console-log语句后注释掉的值？C-❤" class="headerlink" title="71. 如何能打印出console.log语句后注释掉的值？C ❤"></a>71. 如何能打印出<code>console.log</code>语句后注释掉的值？C ❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">startGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> 答案 = <span class="keyword">yield</span> <span class="string">&quot;Do you love JavaScript?&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(答案)</span><br><span class="line">  <span class="keyword">if</span> (答案 !== <span class="string">&quot;Yes&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Oh wow... Guess we&#x27;re gone here&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;JavaScript loves you back ❤️&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="title function_">startGame</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/* 1 */</span>); <span class="comment">// Do you love JavaScript?</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/* 2 */</span>); <span class="comment">// JavaScript loves you back ❤️</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>game.next(&quot;Yes&quot;).value</code> and <code>game.next().value</code></li><li>B: <code>game.next.value(&quot;Yes&quot;)</code> and <code>game.next.value()</code></li><li>C: <code>game.next().value</code> and <code>game.next(&quot;Yes&quot;).value</code></li><li>D: <code>game.next.value()</code> and <code>game.next.value(&quot;Yes&quot;)</code></li></ul><hr><h6 id="72-输出什么-C"><a href="#72-输出什么-C" class="headerlink" title="72. 输出什么? C"></a>72. 输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Hello\nworld`</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello world!</code></li><li>B: <code>Hello</code> <br />&amp;nbsp; &amp;nbsp; &amp;nbsp;<code>world</code></li><li>C: <code>Hello\nworld</code></li><li>D: <code>Hello\n</code> <br /> &amp;nbsp; &amp;nbsp; &amp;nbsp;<code>world</code></li></ul><hr><h6 id="73-输出什么-C-❤"><a href="#73-输出什么-C-❤" class="headerlink" title="73. 输出什么? C ❤"></a>73. 输出什么? C ❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;I made it!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">getData</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;I made it!&quot;</code></li><li>B: <code>Promise &#123;&lt;resolved&gt;: &quot;I made it!&quot;&#125;</code></li><li>C: <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>D: <code>undefined</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">解答：</span><br><span class="line">该程序定义了一个异步函数 <span class="title function_">getData</span>()，该函数返回一个解决值为 <span class="string">&quot;I made it!&quot;</span> 的 <span class="title class_">Promise</span> 对象。接着，程序定义了一个常量 data，该常量的值为调用 <span class="title function_">getData</span>() 方法返回的 <span class="title class_">Promise</span> 对象。</span><br><span class="line"></span><br><span class="line">由于 <span class="title function_">getData</span>() 是一个异步函数，当程序运行到 <span class="keyword">const</span> data = <span class="title function_">getData</span>(); 时，会立即返回一个处于挂起状态的 <span class="title class_">Promise</span> 对象。因此，此时 data 的值为 <span class="title class_">Promise</span> &#123;&lt;pending&gt;&#125;。</span><br><span class="line"></span><br><span class="line">接着，程序调用 data.<span class="title function_">then</span>() 方法，当 <span class="title function_">getData</span>() 方法返回的 <span class="title class_">Promise</span> 对象被解决后，会执行该方法中的回调函数，并输出 <span class="string">&quot;I made it!&quot;</span>。</span><br><span class="line"></span><br><span class="line">最后，程序执行 <span class="variable language_">console</span>.<span class="title function_">log</span>(data)，输出 <span class="title class_">Promise</span> &#123;&lt;pending&gt;&#125;。</span><br><span class="line"></span><br><span class="line">为什么输出的不是一个成功状态的promise?</span><br><span class="line">在 <span class="keyword">const</span> data = <span class="title function_">getData</span>(); 这行代码被执行时，<span class="title function_">getData</span>() 函数被调用并返回了一个 <span class="title class_">Promise</span> 对象。因为 <span class="title function_">getData</span>() 函数中有 <span class="keyword">await</span> 关键字，所以它会暂停执行并等待 <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;I made it!&quot;</span>) 的结果。</span><br><span class="line"></span><br><span class="line">由于 <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;I made it!&quot;</span>) 是一个同步操作，它会立即执行并返回一个成功状态的 <span class="title class_">Promise</span> 对象。然而，因为 <span class="title function_">getData</span>() 函数中使用了 <span class="keyword">await</span> 关键字，它会等待这个 <span class="title class_">Promise</span> 对象被解决后才会继续执行。</span><br><span class="line"></span><br><span class="line">因此，当 <span class="keyword">const</span> data = <span class="title function_">getData</span>(); 这行代码被执行时，<span class="title function_">getData</span>() 函数会返回一个处于挂起状态的 <span class="title class_">Promise</span> 对象，而不是一个已经解决的 <span class="title class_">Promise</span> 对象。这就是为什么输出的不是一个成功状态的 <span class="title class_">Promise</span> 对象的原因。</span><br></pre></td></tr></table></figure><hr><h6 id="74-输出什么-B"><a href="#74-输出什么-B" class="headerlink" title="74. 输出什么? B"></a>74. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addToList</span>(<span class="params">item, list</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">push</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">addToList</span>(<span class="string">&quot;apple&quot;</span>, [<span class="string">&quot;banana&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;apple&#39;, &#39;banana&#39;]</code></li><li>B: <code>2</code></li><li>C: <code>true</code></li><li>D: <code>undefined</code></li></ul><hr><h6 id="75-输出什么-B"><a href="#75-输出什么-B" class="headerlink" title="75. 输出什么? B"></a>75. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(box);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape = box;</span><br><span class="line">shape.<span class="property">x</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shape)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; x: 100, y: 20 &#125;</code></li><li>B: <code>&#123; x: 10, y: 20 &#125;</code></li><li>C: <code>&#123; x: 100 &#125;</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="76-输出什么-C-D❤"><a href="#76-输出什么-C-D❤" class="headerlink" title="76. 输出什么? C D❤"></a>76. 输出什么? C D❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: myName &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;myName&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="77-以下是个纯函数么-A-❤"><a href="#77-以下是个纯函数么-A-❤" class="headerlink" title="77. 以下是个纯函数么? A ❤"></a>77. 以下是个纯函数么? A ❤</h6><p>就是<strong>一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用</strong>，我们就把这个函数叫做纯函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: Yes</li><li>B: No</li></ul><hr><h6 id="78-输出什么-C"><a href="#78-输出什么-C" class="headerlink" title="78. 输出什么? C"></a>78. 输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`From cache! <span class="subst">$&#123;cache[num]&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = num + <span class="number">10</span>;</span><br><span class="line">      cache[num] = result;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`Calculated! <span class="subst">$&#123;result&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addFunction = <span class="title function_">add</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">10</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFunction</span>(<span class="number">5</span> * <span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li><li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li><li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li><li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li></ul><hr><h6 id="79-输出什么-A"><a href="#79-输出什么-A" class="headerlink" title="79. 输出什么? A"></a>79. 输出什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myLifeSummedUp = [<span class="string">&quot;☕&quot;</span>, <span class="string">&quot;💻&quot;</span>, <span class="string">&quot;🍷&quot;</span>, <span class="string">&quot;🍫&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>B: <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>C: <code>&quot;☕&quot;</code> <code> &quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li><li>D:  <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&#123;0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;&#125;</code></li></ul><hr><h6 id="80-输出什么-C"><a href="#80-输出什么-C" class="headerlink" title="80. 输出什么? C"></a>80. 输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span> + <span class="number">2</span>, <span class="number">1</span> * <span class="number">2</span>, <span class="number">1</span> / <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;1 + 2&quot;, &quot;1 * 2&quot;, &quot;1 / 2&quot;]</code></li><li>B: <code>[&quot;12&quot;, 2, 0.5]</code></li><li>C: <code>[3, 2, 0.5]</code></li><li>D:  <code>[1, 1, 1]</code></li></ul><hr><h6 id="81-输出什么-B"><a href="#81-输出什么-B" class="headerlink" title="81. 输出什么? B"></a>81. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hi there, <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHi</span>())</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hi there, </code></li><li>B: <code>Hi there, undefined</code></li><li>C: <code>Hi there, null</code></li><li>D:  <code>ReferenceError</code></li></ul><hr><h6 id="82-输出什么-B"><a href="#82-输出什么-B" class="headerlink" title="82. 输出什么? B"></a>82. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> status = <span class="string">&quot;😎&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> status = <span class="string">&quot;😍&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;🥑&quot;</span>,</span><br><span class="line">    <span class="title function_">getStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">status</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">getStatus</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">getStatus</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>))</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑&quot;</code> and <code>&quot;😍&quot;</code></li><li>B: <code>&quot;🥑&quot;</code> and <code>&quot;😎&quot;</code></li><li>C: <code>&quot;😍&quot;</code> and <code>&quot;😎&quot;</code></li><li>D: <code>&quot;😎&quot;</code> and <code>&quot;😎&quot;</code></li></ul><hr><h6 id="83-输出什么-A"><a href="#83-输出什么-A" class="headerlink" title="83. 输出什么? A"></a>83. 输出什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> city = person.<span class="property">city</span></span><br><span class="line">city = <span class="string">&quot;Amsterdam&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>B: <code>&#123; name: &quot;Lydia&quot;, age: 21, city: &quot;Amsterdam&quot; &#125;</code></li><li>C: <code>&#123; name: &quot;Lydia&quot;, age: 21, city: undefined &#125;</code></li><li>D: <code>&quot;Amsterdam&quot;</code></li></ul><hr><h6 id="84-输出什么-B-C❤"><a href="#84-输出什么-B-C❤" class="headerlink" title="84. 输出什么? B C❤"></a>84. 输出什么? B C❤</h6><p>块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">&quot;Sorry, you&#x27;re too young.&quot;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">&quot;Yay! You&#x27;re old enough!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkAge</span>(<span class="number">21</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Sorry, you&#39;re too young.&quot;</code></li><li>B: <code>&quot;Yay! You&#39;re old enough!&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><hr><h6 id="85-什么样的信息将被打印-C"><a href="#85-什么样的信息将被打印-C" class="headerlink" title="85. 什么样的信息将被打印? C"></a>85. 什么样的信息将被打印? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://www.website.com/api/user/1&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><ul><li>A: <code>fetch</code>方法的结果</li><li>B: 第二次调用<code>fetch</code>方法的结果</li><li>C: 前一个<code>.then()</code>中回调方法返回的结果</li><li>D: 总是<code>undefined</code></li></ul><hr><h6 id="86-哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递-C-A❤"><a href="#86-哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递-C-A❤" class="headerlink" title="86. 哪个选项是将hasName设置为true的方法，前提是不能将true作为参数传递? C A❤"></a>86. 哪个选项是将<code>hasName</code>设置为<code>true</code>的方法，前提是不能将<code>true</code>作为参数传递? C A❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hasName = <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>!!name</code></li><li>B: <code>name</code></li><li>C: <code>new Boolean(name)</code></li><li>D: <code>name.length</code></li></ul><h6 id="87-输出什么-B"><a href="#87-输出什么-B" class="headerlink" title="87. 输出什么? B"></a>87. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I want pizza&quot;</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;&quot;&quot;</code></li><li>B: <code>&quot;I&quot;</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><hr><h6 id="88-输出什么-B"><a href="#88-输出什么-B" class="headerlink" title="88. 输出什么? B"></a>88. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2 = num1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sum</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>20</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><hr><h6 id="89-输出什么-A"><a href="#89-输出什么-A" class="headerlink" title="89. 输出什么? A"></a>89. 输出什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> data <span class="keyword">from</span> <span class="string">&quot;./module&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; default: function default(), name: &quot;Lydia&quot; &#125;</code></li><li>B: <code>&#123; default: function default() &#125;</code></li><li>C: <code>&#123; default: &quot;Hello world&quot;, name: &quot;Lydia&quot; &#125;</code></li><li>D: Global object of <code>module.js</code></li></ul><hr><h6 id="90-输出什么-A-C❤"><a href="#90-输出什么-A-C❤" class="headerlink" title="90. 输出什么? A C❤"></a>90. 输出什么? A C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;class&quot;</code></li><li>B: <code>&quot;function&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;string&quot;</code></li></ul><hr><h6 id="91-输出什么-D"><a href="#91-输出什么-D" class="headerlink" title="91. 输出什么? D"></a>91. 输出什么? D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newList.<span class="title function_">push</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 4, 5]</code></li><li>B: <code>[1, 2, 3, 5]</code></li><li>C: <code>[1, 2, 3, 4]</code></li><li>D: <code>Error</code></li></ul><hr><h6 id="92-输出什么-D"><a href="#92-输出什么-D" class="headerlink" title="92. 输出什么? D"></a>92. 输出什么? D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">giveLydiaPizza</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Here is pizza!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">giveLydiaChocolate</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;Here&#x27;s chocolate... now go hit the gym already.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(giveLydiaPizza.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(giveLydiaChocolate.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; constructor: ...&#125;</code> <code>&#123; constructor: ...&#125;</code> </li><li>B: <code>&#123;&#125;</code> <code>&#123; constructor: ...&#125;</code> </li><li>C: <code>&#123; constructor: ...&#125;</code> <code>&#123;&#125;</code></li><li>D: <code>&#123; constructor: ...&#125;</code> <code>undefined</code></li></ul><hr><h6 id="93-输出什么-A"><a href="#93-输出什么-A" class="headerlink" title="93. 输出什么? A"></a>93. 输出什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [x, y] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(person)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li><li>B: <code>[&quot;name&quot;, &quot;Lydia&quot;]</code> and <code>[&quot;age&quot;, 21]</code> </li><li>C: <code>[&quot;name&quot;, &quot;age&quot;]</code> and <code>undefined</code></li><li>D: <code>Error</code></li></ul><hr><h6 id="94-输出什么-B-…args只能放在最后，否则会报错，故选D-❤"><a href="#94-输出什么-B-…args只能放在最后，否则会报错，故选D-❤" class="headerlink" title="94. 输出什么? B    …args只能放在最后，否则会报错，故选D *❤"></a>94. 输出什么? B    …args只能放在最后，否则会报错，故选D *❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getItems</span>(<span class="params">fruitList, ...args, favoriteFruit</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...fruitList, ...args, favoriteFruit]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getItems</span>([<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>], <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;banana&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;]</code></li><li>B: <code>[[&quot;banana&quot;, &quot;apple&quot;], &quot;pear&quot;, &quot;orange&quot;]</code> </li><li>C: <code>[&quot;banana&quot;, &quot;apple&quot;, [&quot;pear&quot;], &quot;orange&quot;]</code></li><li>D: <code>SyntaxError</code></li></ul><hr><h6 id="95-输出什么-A-B❤"><a href="#95-输出什么-A-B❤" class="headerlink" title="95. 输出什么? A B❤"></a>95. 输出什么? A B❤</h6><p>return语句后面自动添加了一个分号; 故返回的其实是个undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nums</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span></span><br><span class="line">  (a &gt; b)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a is bigger&#x27;</span>)</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b is bigger&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>a is bigger</code>, <code>6</code> and <code>b is bigger</code>, <code>3</code></li><li>B: <code>a is bigger</code>, <code>undefined</code> and <code>b is bigger</code>, <code>undefined</code></li><li>C: <code>undefined</code> and <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><hr><h6 id="96-输出什么-C-B❤"><a href="#96-输出什么-C-B❤" class="headerlink" title="96. 输出什么? C B❤"></a>96. 输出什么? C B❤</h6><p>我们可以将类设置为等于其他类&#x2F;函数构造函数。 在这种情况下，我们将<code>Person</code>设置为<code>AnotherPerson</code>。 这个构造函数的名字是<code>Sarah</code>，所以新的<code>Person</code>实例<code>member</code>上的name属性是<code>Sarah</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span> = <span class="keyword">class</span> <span class="title class_">AnotherPerson</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Sarah&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;Sarah&quot;</code></li><li>C: <code>Error: cannot redeclare Person</code></li><li>D: <code>SyntaxError</code></li></ul><hr><h6 id="97-输出什么-D"><a href="#97-输出什么-D" class="headerlink" title="97. 输出什么? D"></a>97. 输出什么? D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>)]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(info))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[&quot;&#123;Symbol(&#39;a&#39;)&quot;]</code></li><li>B: <code>&#123;&#125;</code> and <code>[]</code></li><li>C: <code>&#123; a: &quot;b&quot; &#125;</code> and <code>[&quot;a&quot;]</code></li><li>D: <code>&#123;Symbol(&#39;a&#39;): &#39;b&#39;&#125;</code> and <code>[]</code></li></ul><hr><h6 id="98-输出什么-B-A❤"><a href="#98-输出什么-B-A❤" class="headerlink" title="98. 输出什么? B A❤"></a>98. 输出什么? B A❤</h6><p> <code>getUser</code>函数接收一个对象。对于箭头函数，如果只返回一个值，我们不必编写花括号。但是，如果您想从一个箭头函数返回一个对象，您必须将它写在圆括号之间，否则两个花括号之间的所有内容都将被解释为一个块语句!在这种情况下，花括号之间的代码不是有效的 JavaScript 代码，因此会抛出SyntaxError。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getList</span> = (<span class="params">[x, ...y]</span>) =&gt; [x, y]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUser</span> = user =&gt; &#123; <span class="attr">name</span>: user.<span class="property">name</span>, <span class="attr">age</span>: user.<span class="property">age</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getList</span>(list))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getUser</span>(user))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, [2, 3, 4]]</code> and <code>SyntaxError</code></li><li>B: <code>[1, [2, 3, 4]]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>C: <code>[1, 2, 3, 4]</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li><li>D: <code>Error</code> and <code>&#123; name: &quot;Lydia&quot;, age: 21 &#125;</code></li></ul><hr><h6 id="99-输出什么-B-Uncaught-TypeError-name-is-not-a-function-选C❤"><a href="#99-输出什么-B-Uncaught-TypeError-name-is-not-a-function-选C❤" class="headerlink" title="99. 输出什么? B  Uncaught TypeError: name is not a function 选C❤"></a>99. 输出什么? B  Uncaught TypeError: name is not a function 选C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">name</span>())</span><br></pre></td></tr></table></figure><ul><li>A: <code>SyntaxError</code></li><li>B: <code>ReferenceError</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><hr><h6 id="100-输出什么-B"><a href="#100-输出什么-B" class="headerlink" title="100. 输出什么? B"></a>100. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🎉✨ This is my 100th question! ✨🎉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">`<span class="subst">$&#123;[] &amp;&amp; <span class="string">&#x27;Im&#x27;</span>&#125;</span>possible!</span></span><br><span class="line"><span class="string">You should<span class="subst">$&#123;<span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="string">`n&#x27;t`</span>&#125;</span> see a therapist after so much JavaScript lol`</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li><li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li><li>C: <code>possible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li><li>D: <code>Impossible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li></ul><hr><h6 id="101-输出什么-C"><a href="#101-输出什么-C" class="headerlink" title="101.输出什么? C"></a>101.输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = (<span class="literal">false</span> || &#123;&#125; || <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> two = (<span class="literal">null</span> || <span class="literal">false</span> || <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> three = ([] || <span class="number">0</span> || <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one, two, three)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>null</code> <code>[]</code></li><li>B: <code>null</code> <code>&quot;&quot;</code> <code>true</code></li><li>C: <code>&#123;&#125;</code> <code>&quot;&quot;</code> <code>[]</code></li><li>D: <code>null</code> <code>null</code> <code>true</code></li></ul><hr><h6 id="102-依次输出什么-B-D❤"><a href="#102-依次输出什么-B-D❤" class="headerlink" title="102. 依次输出什么? B D❤"></a>102. 依次输出什么? B D❤</h6><p>有了promise，我们通常会说：当我想要调用某个方法，但是由于它可能需要一段时间，因此暂时将它放在一边。只有当某个值被resolved&#x2F;rejected，并且执行栈为空时才使用这个值。</p><p>我们可以在<code>async</code>函数中通过<code>.then</code>和<code>await</code>关键字获得该值。 尽管我们可以通过<code>.then</code>和<code>await</code>获得promise的价值，但是它们的工作方式有所不同。</p><p>在 <code>firstFunction</code>中，当运行到<code>myPromise</code>方法时我们将其放在一边，即promise进入微任务队列，其他后面的代码（<code>console.log(&#39;second&#39;)</code>）照常运行，因此<code>second</code>被打印出，<code>firstFunction</code>方法到此执行完毕，执行栈中宏任务队列被清空，此时开始执行微任务队列中的任务，<code>I have resolved</code>被打印出。</p><p>在<code>secondFunction</code>方法中，我们通过<code>await</code>关键字，暂停了后面代码的执行，直到异步函数的值被解析才开始后面代码的执行。这意味着，它会等着直到 <code>myPromise</code> 以值<code>I have resolved</code>被解决之后，下一行<code>second</code>才开始执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myPromise</span> = (<span class="params"></span>) =&gt; <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;I have resolved!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">firstFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">myPromise</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">secondFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">myPromise</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">firstFunction</span>()</span><br><span class="line"><span class="title function_">secondFunction</span>()</span><br></pre></td></tr></table></figure><ul><li>A: <code>I have resolved!</code>, <code>second</code> and <code>I have resolved!</code>, <code>second</code></li><li>B: <code>second</code>, <code>I have resolved!</code> and <code>second</code>, <code>I have resolved!</code></li><li>C: <code>I have resolved!</code>, <code>second</code> and <code>second</code>, <code>I have resolved!</code></li><li>D: <code>second</code>, <code>I have resolved!</code> and <code>I have resolved!</code>, <code>second</code></li></ul><hr><h6 id="103-输出什么-C"><a href="#103-输出什么-C" class="headerlink" title="103. 输出什么? C"></a>103. 输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&quot;Lydia&quot;</span>)</span><br><span class="line">set.<span class="title function_">add</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item + <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li><li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li><li>C: <code>3</code>, <code>Lydia2</code>, <code>[Object object]2</code></li><li>D: <code>&quot;12&quot;</code>, <code>Lydia2</code>, <code>[Object object]2</code></li></ul><hr><h6 id="104-结果是什么-C"><a href="#104-结果是什么-C" class="headerlink" title="104. 结果是什么? C"></a>104. 结果是什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>5</code></li><li>B: <code>Promise &#123;&lt;pending&gt;: 5&#125;</code></li><li>C: <code>Promise &#123;&lt;fulfilled&gt;: 5&#125;</code></li><li>D: <code>Error</code></li></ul><h6 id="105-输出什么-B"><a href="#105-输出什么-B" class="headerlink" title="105. 输出什么? B"></a>105. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareMembers</span>(<span class="params">person1, person2 = person</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (person1 !== person2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Not the same!&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;They are the same!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compareMembers</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Not the same!</code></li><li>B: <code>They are the same!</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>SyntaxError</code></li></ul><hr><h6 id="106-输出什么-D-属性名是字符串，要用-来调用"><a href="#106-输出什么-D-属性名是字符串，要用-来调用" class="headerlink" title="106. 输出什么? D 属性名是字符串，要用[]来调用"></a>106. 输出什么? D 属性名是字符串，要用[]来调用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorConfig = &#123;</span><br><span class="line">  <span class="attr">red</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">blue</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">green</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">black</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">yellow</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">&quot;pink&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colorConfig.<span class="property">colors</span>[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li><li>C: <code>undefined</code></li><li>D: <code>TypeError</code></li></ul><hr><h6 id="107-输出什么-A"><a href="#107-输出什么-A" class="headerlink" title="107. 输出什么? A"></a>107. 输出什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;❤️&#x27;</span> === <span class="string">&#x27;❤️&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li></ul><hr><h6 id="108-哪些方法修改了原数组-D"><a href="#108-哪些方法修改了原数组-D" class="headerlink" title="108. 哪些方法修改了原数组? D"></a>108. 哪些方法修改了原数组? D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&#x27;✨&#x27;</span>, <span class="string">&#x27;🥑&#x27;</span>, <span class="string">&#x27;😍&#x27;</span>]</span><br><span class="line"></span><br><span class="line">emojis.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="string">&#x27;✨&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">&#x27;🥑&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">&#x27;🥑&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + <span class="string">&#x27;✨&#x27;</span>)</span><br><span class="line">emojis.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;✨&#x27;</span>) </span><br><span class="line">emojis.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;✨&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>All of them</code></li><li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li><li>C: <code>map</code> <code>slice</code> <code>splice</code> </li><li>D: <code>splice</code></li></ul><hr><h6 id="109-输出什么-B-答案选A，对象的地址并没有被赋过去❤"><a href="#109-输出什么-B-答案选A，对象的地址并没有被赋过去❤" class="headerlink" title="109. 输出什么? B 答案选A，对象的地址并没有被赋过去❤"></a>109. 输出什么? B 答案选A，对象的地址并没有被赋过去❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food = [<span class="string">&#x27;🍕&#x27;</span>, <span class="string">&#x27;🍫&#x27;</span>, <span class="string">&#x27;🥑&#x27;</span>, <span class="string">&#x27;🍔&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">favoriteFood</span>: food[<span class="number">0</span>] &#125;</span><br><span class="line"></span><br><span class="line">info.<span class="property">favoriteFood</span> = <span class="string">&#x27;🍝&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(food)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>B: <code>[&#39;🍝&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>C: <code>[&#39;🍝&#39;, &#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code> </li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="110-这个函数干了什么-D-A❤"><a href="#110-这个函数干了什么-D-A❤" class="headerlink" title="110. 这个函数干了什么? D A❤"></a>110. 这个函数干了什么? D A❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>()</span><br></pre></td></tr></table></figure><ul><li>A: Parses JSON to a JavaScript value</li><li>B: Parses a JavaScript object to JSON</li><li>C: Parses any JavaScript value to JSON</li><li>D: Parses JSON to a JavaScript object only</li></ul><hr><h6 id="111-输出什么-A-答案选D，Uncaught-ReferenceError-Cannot-access-‘name’-before-initialization❤"><a href="#111-输出什么-A-答案选D，Uncaught-ReferenceError-Cannot-access-‘name’-before-initialization❤" class="headerlink" title="111. 输出什么?  A  答案选D，Uncaught ReferenceError: Cannot access ‘name’ before initialization❤"></a>111. 输出什么?  A  答案选D，Uncaught ReferenceError: Cannot access ‘name’ before initialization❤</h6><p>每个函数都有其自己的执行上下文。 <code>getName</code>函数首先在其自身的上下文（范围）内查找，以查看其是否包含我们尝试访问的变量<code>name</code>。 上述情况，<code>getName</code>函数包含其自己的<code>name</code>变量：我们用<code>let</code>关键字和<code>Sarah</code>的值声明变量<code>name</code>。</p><p>带有<code>let</code>关键字（和<code>const</code>）的变量被提升，但是与<code>var</code>不同，它不会被<em><strong>初始化</strong></em>。 在我们声明（初始化）它们之前，无法访问它们。 这称为“暂时性死区”。 当我们尝试在声明变量之前访问变量时，JavaScript会抛出<code>ReferenceError: Cannot access &#39;name&#39; before initialization</code>。</p><p>如果我们不在<code>getName</code>函数中声明<code>name</code>变量，则javascript引擎会查看原型链。会找到其外部作用域有一个名为<code>name</code>的变量，其值为<code>Lydia</code>。 在这种情况下，它将打印<code>Lydia</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;Sarah&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>()</span><br></pre></td></tr></table></figure><ul><li>A: Lydia</li><li>B: Sarah</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="112-输出什么？C"><a href="#112-输出什么？C" class="headerlink" title="112. 输出什么？C"></a>112. 输出什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> one = <span class="title function_">generatorOne</span>()</span><br><span class="line"><span class="keyword">const</span> two = <span class="title function_">generatorTwo</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two.<span class="title function_">next</span>().<span class="property">value</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>a</code> and <code>a</code></li><li>B: <code>a</code> and <code>undefined</code></li><li>C: <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code> and <code>a</code></li><li>D: <code>a</code> and <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></li></ul><hr><h6 id="113-输出什么？A"><a href="#113-输出什么？A" class="headerlink" title="113. 输出什么？A"></a>113. 输出什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;(x =&gt; x)(<span class="string">&#x27;I love&#x27;</span>)&#125;</span> to program`</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>I love to program</code></li><li>B: <code>undefined to program</code></li><li>C: <code>$&#123;(x =&gt; x)(&#39;I love&#39;) to program</code></li><li>D: <code>TypeError</code></li></ul><hr><h6 id="114-将会发生什么-A-答案选C，如果吧config-alert赋值为null，定时器才会停止❤"><a href="#114-将会发生什么-A-答案选C，如果吧config-alert赋值为null，定时器才会停止❤" class="headerlink" title="114. 将会发生什么? A  答案选C，如果吧config.alert赋值为null，定时器才会停止❤"></a>114. 将会发生什么? A  答案选C，如果吧config.alert赋值为null，定时器才会停止❤</h6><p>一般情况下当我们将对象赋值为 <code>null</code>, 那些对象会被进行 <em>垃圾回收（garbage collected）</em> 因为已经没有对这些对象的引用了。然而，<code>setInterval</code>的参数是一个箭头函数（所以上下文绑定到对象 <code>config</code> 了），回调函数仍然保留着对 <code>config</code>的引用。只要存在引用，对象就不会被垃圾回收。因为没有被垃圾回收，<code>setInterval</code> 的回调每1000ms (1s)会被调用一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  <span class="attr">alert</span>: <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Alert!&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>setInterval</code> 的回调不会被调用</li><li>B: <code>setInterval</code> 的回调被调用一次</li><li>C: <code>setInterval</code> 的回调仍然会被每秒钟调用</li><li>D: 我们从没调用过 <code>config.alert()</code>, config 为 <code>null</code></li></ul><hr><h6 id="115-哪一个方法会返回-39-Hello-world-39-？-B"><a href="#115-哪一个方法会返回-39-Hello-world-39-？-B" class="headerlink" title="115. 哪一个方法会返回 &#39;Hello world!&#39; ？ B"></a>115. 哪一个方法会返回 <code>&#39;Hello world!&#39;</code> ？ B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;greeting&#x27;</span></span><br><span class="line"></span><br><span class="line">myMap.<span class="title function_">set</span>(myFunc, <span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="string">&#x27;greeting&#x27;</span>)</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">myMap.<span class="title function_">get</span>(myFunc)</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">myMap.<span class="title function_">get</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;greeting&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 2 and 3</li><li>D: All of them</li></ul><hr><h6 id="116-输出什么？A-C❤"><a href="#116-输出什么？A-C❤" class="headerlink" title="116. 输出什么？A C❤"></a>116. 输出什么？A C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeAge</span> = (<span class="params">x = &#123; ...person &#125;</span>) =&gt; x.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeAgeAndName</span> = (<span class="params">x = &#123; ...person &#125;</span>) =&gt; &#123;</span><br><span class="line">  x.<span class="property">age</span> += <span class="number">1</span></span><br><span class="line">  x.<span class="property">name</span> = <span class="string">&quot;Sarah&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeAge</span>(person)</span><br><span class="line"><span class="title function_">changeAgeAndName</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123;name: &quot;Sarah&quot;, age: 22&#125;</code></li><li>B: <code>&#123;name: &quot;Sarah&quot;, age: 23&#125;</code></li><li>C: <code>&#123;name: &quot;Lydia&quot;, age: 22&#125;</code></li><li>D: <code>&#123;name: &quot;Lydia&quot;, age: 23&#125;</code></li></ul><hr><h6 id="117-下面那个选项将会返回-6-C"><a href="#117-下面那个选项将会返回-6-C" class="headerlink" title="117. 下面那个选项将会返回 6? C"></a>117. 下面那个选项将会返回 <code>6</code>? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumValues</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sumValues([...1, 2, 3])</code></li><li>B: <code>sumValues([...[1, 2, 3]])</code></li><li>C: <code>sumValues(...[1, 2, 3])</code></li><li>D: <code>sumValues([1, 2, 3])</code></li></ul><hr><h6 id="118-输出什么？D-B❤"><a href="#118-输出什么？D-B❤" class="headerlink" title="118. 输出什么？D B❤"></a>118. 输出什么？D B❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> list = [<span class="string">&quot;🥳&quot;</span>, <span class="string">&quot;🤠&quot;</span>, <span class="string">&quot;🥰&quot;</span>, <span class="string">&quot;🤪&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list[(num += <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><ul><li>A: <code>🤠</code></li><li>B: <code>🥰</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="119-输出什么？B-问号点（-）代表是否有后面这个属性，没有就直接反回undefined❤"><a href="#119-输出什么？B-问号点（-）代表是否有后面这个属性，没有就直接反回undefined❤" class="headerlink" title="119. 输出什么？B 问号点（?.）代表是否有后面这个属性，没有就直接反回undefined❤"></a>119. 输出什么？B 问号点（?.）代表是否有后面这个属性，没有就直接反回undefined❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&quot;Lydia&quot;</span>,</span><br><span class="line"><span class="attr">lastName</span>: <span class="string">&quot;Hallie&quot;</span>,</span><br><span class="line"><span class="attr">pet</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Mara&quot;</span>,</span><br><span class="line"><span class="attr">breed</span>: <span class="string">&quot;Dutch Tulip Hound&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pet</span>?.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pet</span>?.<span class="property">family</span>?.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getFullName</span>?.());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member.<span class="property">getLastName</span>?.());</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined</code> <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>B: <code>Mara</code> <code>undefined</code> <code>Lydia Hallie</code> <code>ReferenceError</code></li><li>C: <code>Mara</code> <code>null</code> <code>Lydia Hallie</code> <code>null</code></li><li>D: <code>null</code> <code>ReferenceError</code> <code>null</code> <code>ReferenceError</code></li></ul><hr><h6 id="120-输出什么？B"><a href="#120-输出什么？B" class="headerlink" title="120. 输出什么？B"></a>120. 输出什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groceries = [<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;peanuts&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (groceries.<span class="title function_">indexOf</span>(<span class="string">&quot;banana&quot;</span>)) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;We have to buy bananas!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`We don&#x27;t have to buy bananas!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: We have to buy bananas!</li><li>B: We don’t have to buy bananas</li><li>C: <code>undefined</code></li><li>D: <code>1</code></li></ul><hr><h6 id="121-输出什么-C-D❤"><a href="#121-输出什么-C-D❤" class="headerlink" title="121. 输出什么? C D❤"></a>121. 输出什么? C D❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="attr">languages</span>: [],</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">language</span>(<span class="params">lang</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">languages</span>.<span class="title function_">push</span>(lang);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">language</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>function language(lang) &#123; this.languages.push(lang &#125;</code></li><li>B: <code>0</code></li><li>C: <code>[]</code></li><li>D: <code>undefined</code></li></ul><hr><h6 id="122-输出什么？C"><a href="#122-输出什么？C" class="headerlink" title="122. 输出什么？C"></a>122. 输出什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="keyword">typeof</span> name === <span class="string">&quot;object&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="keyword">typeof</span> name === <span class="string">&quot;string&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code></li><li>B: <code>true</code> <code>false</code></li><li>C: <code>false</code> <code>false</code></li><li>D: <code>true</code> <code>true</code></li></ul><hr><h6 id="123-输出什么-A"><a href="#123-输出什么-A" class="headerlink" title="123. 输出什么? A"></a>123. 输出什么? A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>4</code> <code>5</code> <code>6</code></li><li>B: <code>6</code> <code>5</code> <code>4</code></li><li>C: <code>4</code> <code>function</code> <code>function</code></li><li>D: <code>undefined</code> <code>undefined</code></li></ul><hr><h6 id="124-输出什么？B-C❤"><a href="#124-输出什么？B-C❤" class="headerlink" title="124. 输出什么？B C❤"></a>124. 输出什么？B C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">range</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">range</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> gen) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise &#123;1&#125;</code> <code>Promise &#123;2&#125;</code> <code>Promise &#123;3&#125;</code></li><li>B: <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code> <code>Promise &#123;&lt;pending&gt;&#125;</code></li><li>C: <code>1</code> <code>2</code> <code>3</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><hr><h6 id="125-输出什么？C-D❤"><a href="#125-输出什么？C-D❤" class="headerlink" title="125. 输出什么？C D❤"></a>125. 输出什么？C D❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params">&#123; x, y, z &#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> <code>3</code></li><li>B: <code>&#123;1: 1&#125;</code> <code>&#123;2: 2&#125;</code> <code>&#123;3: 3&#125;</code></li><li>C: <code>&#123; 1: undefined &#125;</code> <code>undefined</code> <code>undefined</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><hr><h6 id="126-输出什么？B"><a href="#126-输出什么？B" class="headerlink" title="126. 输出什么？B"></a>126. 输出什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFine</span>(<span class="params">speed, amount</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> formattedSpeed = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">&#x27;unit&#x27;</span>, <span class="attr">unit</span>: <span class="string">&#x27;mile-per-hour&#x27;</span> &#125;</span><br><span class="line">  ).<span class="title function_">format</span>(speed)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> formattedAmount = <span class="keyword">new</span> <span class="title class_">Intl</span>.<span class="title class_">NumberFormat</span>(</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">&#x27;currency&#x27;</span>, <span class="attr">currency</span>: <span class="string">&#x27;USD&#x27;</span> &#125;</span><br><span class="line">  ).<span class="title function_">format</span>(amount)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`The driver drove <span class="subst">$&#123;formattedSpeed&#125;</span> and has to pay <span class="subst">$&#123;formattedAmount&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFine</span>(<span class="number">130</span>, <span class="number">300</span>))</span><br></pre></td></tr></table></figure><ul><li>A: The driver drove 130 and has to pay 300</li><li>B: The driver drove 130 mph and has to pay $300.00</li><li>C: The driver drove undefined and has to pay undefined</li><li>D: The driver drove 130.00 and has to pay 300.00</li></ul><hr><h6 id="127-输出什么？A-B❤"><a href="#127-输出什么？A-B❤" class="headerlink" title="127. 输出什么？A B❤"></a>127. 输出什么？A B❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spookyItems = [<span class="string">&quot;👻&quot;</span>, <span class="string">&quot;🎃&quot;</span>, <span class="string">&quot;🕸&quot;</span>];</span><br><span class="line">(&#123; <span class="attr">item</span>: spookyItems[<span class="number">3</span>] &#125; = &#123; <span class="attr">item</span>: <span class="string">&quot;💀&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spookyItems);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;]</code></li><li>B: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code></li><li>C: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &#123; item: &quot;💀&quot; &#125;]</code></li><li>D: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;[object Object]&quot;]</code></li></ul><hr><h6 id="128-输出什么？B-C❤-Number-isNaN采用严格判断，必须是NaN才会返回true，不存在数值转换"><a href="#128-输出什么？B-C❤-Number-isNaN采用严格判断，必须是NaN才会返回true，不存在数值转换" class="headerlink" title="128. 输出什么？B C❤  Number.isNaN采用严格判断，必须是NaN才会返回true，不存在数值转换"></a>128. 输出什么？B C❤  Number.isNaN采用严格判断，必须是NaN才会返回true，不存在数值转换</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(name));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(age));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(name));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(age));</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>true</code> <code>false</code> <code>false</code> <code>false</code></li><li>C: <code>false</code> <code>false</code> <code>true</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li></ul><hr><h6 id="129-输出什么？D"><a href="#129-输出什么？D" class="headerlink" title="129. 输出什么？D"></a>129. 输出什么？D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomValue = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> randomValue);</span><br><span class="line"><span class="keyword">const</span> randomValue = <span class="string">&quot;Lydia Hallie&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getInfo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="130-输出什么？B-正确答案选C-❤"><a href="#130-输出什么？B-正确答案选C-❤" class="headerlink" title="130. 输出什么？B 正确答案选C ❤"></a>130. 输出什么？B 正确答案选C ❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Woah some cool data&quot;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> myPromise);</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Oops didn&#x27;t work`</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Oh finally!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Woah some cool data</code></li><li>B: <code>Oh finally!</code></li><li>C: <code>Woah some cool data</code> <code>Oh finally!</code></li><li>D: <code>Oops didn&#39;t work</code> <code>Oh finally!</code></li></ul><hr><h6 id="131-输出什么？B"><a href="#131-输出什么？B" class="headerlink" title="131. 输出什么？B"></a>131. 输出什么？B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&quot;🥑&quot;</span>, [<span class="string">&quot;✨&quot;</span>, <span class="string">&quot;✨&quot;</span>, [<span class="string">&quot;🍕&quot;</span>, <span class="string">&quot;🍕&quot;</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emojis.<span class="title function_">flat</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]]</code></li><li>B: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>C: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>D: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]</code></li></ul><hr><h6 id="132-输出什么？D"><a href="#132-输出什么？D" class="headerlink" title="132. 输出什么？D"></a>132. 输出什么？D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterOne = <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">counterOne.<span class="title function_">increment</span>();</span><br><span class="line">counterOne.<span class="title function_">increment</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterTwo = counterOne;</span><br><span class="line">counterTwo.<span class="title function_">increment</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counterOne.<span class="property">count</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>2</code></li><li>D: <code>3</code></li></ul><hr><h6 id="133-输出什么？D"><a href="#133-输出什么？D" class="headerlink" title="133. 输出什么？D"></a>133. 输出什么？D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Promise!&quot;</span>));<span class="comment">//返回了Promise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">funcOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout!&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Last line!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">funcTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> myPromise;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> res);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Timeout!&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Last line!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">funcOne</span>();</span><br><span class="line"><span class="title function_">funcTwo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last line Promise！ </span></span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise! Last line! Promise! Last line! Last line! Promise!</code></li><li>B: <code>Last line! Timeout! Promise! Last line! Timeout! Promise!</code></li><li>C: <code>Promise! Last line! Last line! Promise! Timeout! Timeout!</code></li><li>D: <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></li></ul><hr><h6 id="134-我们怎样才能在-index-js-中调用-sum-js-中的-sum？A-C❤"><a href="#134-我们怎样才能在-index-js-中调用-sum-js-中的-sum？A-C❤" class="headerlink" title="134. 我们怎样才能在 index.js 中调用 sum.js? 中的 sum？A C❤"></a>134. 我们怎样才能在 <code>index.js</code> 中调用 <code>sum.js?</code> 中的 <code>sum</code>？A C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> sum <span class="keyword">from</span> <span class="string">&quot;./sum&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sum(4)</code></li><li>B: <code>sum.sum(4)</code></li><li>C: <code>sum.default(4)</code></li><li>D: 默认导出不用 <code>*</code> 来导入，只能具名导出</li></ul><hr><h6 id="135-输出什么？D-C❤"><a href="#135-输出什么？D-C❤" class="headerlink" title="135. 输出什么？D C❤"></a>135. 输出什么？D C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line"><span class="attr">set</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Added a new property!&quot;</span>),</span><br><span class="line"><span class="attr">get</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Accessed a property!&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">person.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>Added a new property!</code></li><li>B: <code>Accessed a property!</code></li><li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li><li>D: 没有任何输出&#96;</li></ul><hr><h6 id="136-以下哪一项会对对象-person-有副作用？A-对象被密封，只能改查"><a href="#136-以下哪一项会对对象-person-有副作用？A-对象被密封，只能改查" class="headerlink" title="136. 以下哪一项会对对象 person 有副作用？A 对象被密封，只能改查"></a>136. 以下哪一项会对对象 <code>person</code> 有副作用？A 对象被密封，只能改查</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code> 修改操作</li><li>B: <code>person.age = 21</code> 增加操作</li><li>C: <code>delete person.name</code> 删除操作</li><li>D: <code>Object.assign(person, &#123; age: 21 &#125;)</code>  增加操作</li></ul><hr><h6 id="137-以下哪一项会对对象-person-有副作用？-C，person-address-street属于子元素属性，不会被冻结"><a href="#137-以下哪一项会对对象-person-有副作用？-C，person-address-street属于子元素属性，不会被冻结" class="headerlink" title="137. 以下哪一项会对对象 person 有副作用？ C，person.address.street属于子元素属性，不会被冻结"></a>137. 以下哪一项会对对象 <code>person</code> 有副作用？ C，person.address.street属于子元素属性，不会被冻结</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line"><span class="attr">address</span>: &#123;</span><br><span class="line"><span class="attr">street</span>: <span class="string">&quot;100 Main St&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>delete person.address</code></li><li>C: <code>person.address.street = &quot;101 Main St&quot;</code></li><li>D: <code>person.pet = &#123; name: &quot;Mara&quot; &#125;</code></li></ul><hr><h6 id="138-输出什么？A"><a href="#138-输出什么？A" class="headerlink" title="138. 输出什么？A"></a>138. 输出什么？A</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; x + x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">num = <span class="number">2</span>, value = add(num)</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>();</span><br><span class="line"><span class="title function_">myFunc</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>2</code> <code>4</code> and <code>3</code> <code>6</code></li><li>B: <code>2</code> <code>NaN</code> and <code>3</code> <code>NaN</code></li><li>C: <code>2</code> <code>Error</code> and <code>3</code> <code>6</code></li><li>D: <code>2</code> <code>4</code> and <code>3</code> <code>Error</code></li></ul><hr><h6 id="139-输出什么？C-选D-❤"><a href="#139-输出什么？C-选D-❤" class="headerlink" title="139. 输出什么？C 选D ❤"></a>139. 输出什么？C 选D ❤</h6><p>在 ES2020 中，通过 <code>#</code> 我们可以给 class 添加私有变量。在 class 的外部我们无法获取该值。当我们尝试输出 <code>counter.#number</code>，语法错误被抛出：我们无法在 class <code>Counter</code> 外部获取它!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  #number = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#number++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>()</span><br><span class="line">counter.<span class="title function_">increment</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.#number)</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><hr><h6 id="140-选择哪一个？A-B❤"><a href="#140-选择哪一个？A-B❤" class="headerlink" title="140. 选择哪一个？A  B❤"></a>140. 选择哪一个？A  B❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teams = [</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&quot;Team 1&quot;</span>, <span class="attr">members</span>: [<span class="string">&quot;Paul&quot;</span>, <span class="string">&quot;Lisa&quot;</span>] &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">&quot;Team 2&quot;</span>, <span class="attr">members</span>: [<span class="string">&quot;Laura&quot;</span>, <span class="string">&quot;Tim&quot;</span>] &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getMembers</span>(<span class="params">members</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; members.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> members[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getTeams</span>(<span class="params">teams</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; teams.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">// ✨ SOMETHING IS MISSING HERE ✨</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">getTeams</span>(teams);</span><br><span class="line">obj.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &quot;Paul&quot;, done: false &#125;</span></span><br><span class="line">obj.<span class="title function_">next</span>(); <span class="comment">// &#123; value: &quot;Lisa&quot;, done: false &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>yield getMembers(teams[i].members)</code></li><li>B: <code>yield* getMembers(teams[i].members)</code></li><li>C: <code>return getMembers(teams[i].members)</code></li><li>D: <code>return yield getMembers(teams[i].members)</code></li></ul><hr><h6 id="141-输出什么？C"><a href="#141-输出什么？C" class="headerlink" title="141. 输出什么？C"></a>141. 输出什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line"><span class="attr">hobbies</span>: [<span class="string">&quot;coding&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addHobby</span>(<span class="params">hobby, hobbies = person.hobbies</span>) &#123;</span><br><span class="line">hobbies.<span class="title function_">push</span>(hobby);</span><br><span class="line"><span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;running&quot;</span>, []);</span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;dancing&quot;</span>);</span><br><span class="line"><span class="title function_">addHobby</span>(<span class="string">&quot;baking&quot;</span>, person.<span class="property">hobbies</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">hobbies</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;coding&quot;]</code></li><li>B: <code>[&quot;coding&quot;, &quot;dancing&quot;]</code></li><li>C: <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li><li>D: <code>[&quot;coding&quot;, &quot;running&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li></ul><hr><h6 id="142-输出什么？D-答案选B，需要用到this的时候，才必须要把super放到前面❤"><a href="#142-输出什么？D-答案选B，需要用到this的时候，才必须要把super放到前面❤" class="headerlink" title="142. 输出什么？D 答案选B，需要用到this的时候，才必须要把super放到前面❤"></a>142. 输出什么？D 答案选B，需要用到this的时候，才必须要把super放到前面❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m a bird. 🦢&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flamingo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bird</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m pink. 🌸&quot;</span>);</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> <span class="title class_">Flamingo</span>();</span><br></pre></td></tr></table></figure><ul><li>A: <code>I&#39;m pink. 🌸</code></li><li>B: <code>I&#39;m pink. 🌸</code> <code>I&#39;m a bird. 🦢</code></li><li>C: <code>I&#39;m a bird. 🦢</code> <code>I&#39;m pink. 🌸</code></li><li>D: Nothing, we didn’t call any method</li></ul><hr><h6 id="143-哪一个选项会导致报错？A-选D❤"><a href="#143-哪一个选项会导致报错？A-选D❤" class="headerlink" title="143. 哪一个选项会导致报错？A 选D❤"></a>143. 哪一个选项会导致报错？A 选D❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">&quot;🎄&quot;</span>, <span class="string">&quot;🎅🏼&quot;</span>, <span class="string">&quot;🎁&quot;</span>, <span class="string">&quot;⭐&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span> emojis.<span class="title function_">push</span>(<span class="string">&quot;🦌&quot;</span>);</span><br><span class="line"><span class="comment">/* 2 */</span> emojis.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">/* 3 */</span> emojis = [...emojis, <span class="string">&quot;🥂&quot;</span>];</span><br><span class="line"><span class="comment">/* 4 */</span> emojis.<span class="property">length</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 1 and 2</li><li>C: 3 and 4</li><li>D: 3</li></ul><hr><h6 id="144-我们需要向对象-person-添加什么，以致执行-person-时获得形如-quot-Lydia-Hallie-quot-21-的输出？A-C❤"><a href="#144-我们需要向对象-person-添加什么，以致执行-person-时获得形如-quot-Lydia-Hallie-quot-21-的输出？A-C❤" class="headerlink" title="144. 我们需要向对象 person 添加什么，以致执行 [...person] 时获得形如 [&quot;Lydia Hallie&quot;, 21] 的输出？A  C❤"></a>144. 我们需要向对象 <code>person</code> 添加什么，以致执行 <code>[...person]</code> 时获得形如 <code>[&quot;Lydia Hallie&quot;, 21]</code> 的输出？A  C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Lydia Hallie&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...person] <span class="comment">// [&quot;Lydia Hallie&quot;, 21]</span></span><br></pre></td></tr></table></figure><ul><li>A: 不需要，对象默认就是可迭代的</li><li>B: <code>*[Symbol.iterator]() &#123; for (let x in this) yield* this[x] &#125;</code></li><li>C: <code>*[Symbol.iterator]() &#123; yield* Object.values(this) &#125;</code></li><li>D: <code>*[Symbol.iterator]() &#123; for (let x in this) yield this &#125;</code></li></ul><hr><h6 id="145-输出什么？C"><a href="#145-输出什么？C" class="headerlink" title="145. 输出什么？C"></a>145. 输出什么？C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num) count += <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><hr><h6 id="146-输出是什么？C-D❤"><a href="#146-输出是什么？C-D❤" class="headerlink" title="146. 输出是什么？C D❤"></a>146. 输出是什么？C D❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFruit</span>(<span class="params">fruits</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits?.[<span class="number">1</span>]?.[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getFruit</span>([[<span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>], [<span class="string">&#x27;🍍&#x27;</span>]])</span><br><span class="line"><span class="title function_">getFruit</span>()</span><br><span class="line"><span class="title function_">getFruit</span>([[<span class="string">&#x27;🍍&#x27;</span>], [<span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍌&#x27;</span>]])</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code>, <code>undefined</code>, 🍌</li><li>B: <code>[]</code>, <code>null</code>, 🍌</li><li>C: <code>[]</code>, <code>[]</code>, 🍌</li><li>D: <code>undefined</code>, <code>undefined</code>, 🍌</li></ul><hr><h6 id="147-输出什么？B-A❤"><a href="#147-输出什么？B-A❤" class="headerlink" title="147. 输出什么？B A❤"></a>147. 输出什么？B A❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> ++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> <span class="title class_">Calc</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Calc</span>().<span class="title function_">increase</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="property">count</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="148-输出什么-D-B❤"><a href="#148-输出什么-D-B❤" class="headerlink" title="148. 输出什么? D B❤"></a>148. 输出什么? D B❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">email</span>: <span class="string">&quot;e@mail.com&quot;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateUser</span> = (<span class="params">&#123; email, password &#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (email) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(user, &#123; email &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (password) &#123;</span><br><span class="line">user.<span class="property">password</span> = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updatedUser = <span class="title function_">updateUser</span>(&#123; <span class="attr">email</span>: <span class="string">&quot;new@email.com&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(updatedUser === user)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code></li><li>B: <code>true</code></li><li>C: <code>TypeError</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="149-输出什么-C"><a href="#149-输出什么-C" class="headerlink" title="149. 输出什么? C"></a>149. 输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = [<span class="string">&#x27;🍌&#x27;</span>, <span class="string">&#x27;🍊&#x27;</span>, <span class="string">&#x27;🍎&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fruit.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>)<span class="comment">//不改变原数组</span></span><br><span class="line">fruit.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">fruit.<span class="title function_">unshift</span>(<span class="string">&#x27;🍇&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruit)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>B: <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>C: <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>D: <code>[&#39;🍇&#39;, &#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li></ul><hr><h6 id="150-输出什么-A-B❤"><a href="#150-输出什么-A-B❤" class="headerlink" title="150. 输出什么? A B❤"></a>150. 输出什么? A B❤</h6><p>因为  <code>dog</code> 的值是一个对象，   <code>animals[dog]</code> 实际上意味着我们创建了一个叫做 <code>&quot;object Object&quot;</code> 的属性来代表新的对象。  <code>animals[&quot;object Object&quot;]</code> 现在等于 <code>&#123; emoji: &quot;🐶&quot;, name: &quot;Mara&quot;&#125;</code>。</p><p><code>cat</code> 也是一个对象，<code>animals[cat]</code> 实际上意味着我们在用新的cat的属性覆盖  <code>animals[``&quot;``object Object``&quot;``]</code> 的值。</p><p>打印  <code>animals[dog]</code>，实际上是<code>animals[&quot;object Object&quot;]</code>，这是因为转化<code>dog</code>对象为一个字符串结果 <code>&quot;object Object&quot;</code> ，所以返回 <code>&#123; emoji: &quot;🐈&quot;, name: &quot;Sara&quot; &#125;</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">emoji</span>: <span class="string">&#x27;🐶&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> cat = &#123; <span class="attr">emoji</span>: <span class="string">&#x27;🐈&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">animals[dog] = &#123; ...dog, <span class="attr">name</span>: <span class="string">&quot;Mara&quot;</span> &#125;</span><br><span class="line">animals[cat] = &#123; ...cat, <span class="attr">name</span>: <span class="string">&quot;Sara&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals[dog])</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; emoji: &quot;🐶&quot;, name: &quot;Mara&quot; &#125;</code></li><li>B: <code>&#123; emoji: &quot;🐈&quot;, name: &quot;Sara&quot; &#125;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="151-输出什么-B-答案选A，因为箭头函数没有this指向，this指向了window对象，this指向是在函数定义时确定的，不是在调用时确定的❤"><a href="#151-输出什么-B-答案选A，因为箭头函数没有this指向，this指向了window对象，this指向是在函数定义时确定的，不是在调用时确定的❤" class="headerlink" title="151. 输出什么? B 答案选A，因为箭头函数没有this指向，this指向了window对象，this指向是在函数定义时确定的，不是在调用时确定的❤"></a>151. 输出什么? B 答案选A，因为箭头函数没有this指向，this指向了window对象，this指向是在函数定义时确定的，不是在调用时确定的❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"><span class="attr">email</span>: <span class="string">&quot;my@email.com&quot;</span>,</span><br><span class="line"><span class="attr">updateEmail</span>: <span class="function"><span class="params">email</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">email</span> = email</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">updateEmail</span>(<span class="string">&quot;new@email.com&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">email</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>my@email.com</code></li><li>B: <code>new@email.com</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><hr><h6 id="152-输出什么-A-选D"><a href="#152-输出什么-A-选D" class="headerlink" title="152. 输出什么? A 选D"></a>152. 输出什么? A 选D</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;First&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Second&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Third&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> promise4 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Fourth&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runPromises</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2])</span><br><span class="line"><span class="keyword">const</span> res2  = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise3, promise4])<span class="comment">//返回的是个失败的reject</span></span><br><span class="line"><span class="keyword">return</span> [res1, res2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runPromises</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))<span class="comment">//所以也是捕获到的是失败的</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Fourth&#39;]]</code></li><li>B: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Third&#39;, &#39;Fourth&#39;]]</code></li><li>C: <code>[[&#39;First&#39;, &#39;Second&#39;]]</code></li><li>D: <code>&#39;Third</code></li></ul><p>答案：D</p><p>​<code>Promise.all</code> 方法可以并行式运行promise。如果其中一个promise失败了，<code>Promise.all</code> 方法会带上被reject的promise的值_rejects_。在这个例子中， <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 值reject。我们在调用 <code>runPromises</code> 时在 <code>runPromises</code> 函数内部的 <code>catch</code> 方法去捕获任意error从而捕获到被reject的值。因为 <code>promise3</code> 带着 <code>&quot;Third&quot;</code> 被reject，所以只有 <code>&quot;Third&quot;</code> 打印。</p><hr><h6 id="153-哪个作为method的值可以打印-name-quot-Lydia-quot-age-22-A-C❤"><a href="#153-哪个作为method的值可以打印-name-quot-Lydia-quot-age-22-A-C❤" class="headerlink" title="153. 哪个作为method的值可以打印{ name: &quot;Lydia&quot;, age: 22 }? A C❤"></a>153. 哪个作为<code>method</code>的值可以打印<code>&#123; name: &quot;Lydia&quot;, age: 22 &#125;</code>? A C❤</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> values = [<span class="string">&quot;Lydia&quot;</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> method = <span class="comment">/* ?? */</span></span><br><span class="line"><span class="title class_">Object</span>[method](keys.<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [keys[i], values[i]]</span><br><span class="line">&#125;)) <span class="comment">// &#123; name: &quot;Lydia&quot;, age: 22 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>entries</code></li><li>B: <code>values</code></li><li>C: <code>fromEntries</code></li><li>D: <code>forEach</code></li></ul><hr><h6 id="154-输出什么-C"><a href="#154-输出什么-C" class="headerlink" title="154. 输出什么? C"></a>154. 输出什么? C</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createMember</span> = (<span class="params">&#123; email, address = &#123;&#125;&#125;</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> validEmail = <span class="regexp">/.+\@.+\..+/</span>.<span class="title function_">test</span>(email)</span><br><span class="line"><span class="keyword">if</span> (!validEmail) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Valid email pls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">email,</span><br><span class="line"><span class="attr">address</span>: address ? address : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="title function_">createMember</span>(&#123; <span class="attr">email</span>: <span class="string">&quot;my@email.com&quot;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&#123; email: &quot;my@email.com&quot;, address: null &#125;</code></li><li>B: <code>&#123; email: &quot;my@email.com&quot; &#125;</code></li><li>C: <code>&#123; email: &quot;my@email.com&quot;, address: &#123;&#125; &#125;</code></li><li>D: &#96;{ email: “<a href="mailto:&#x6d;&#121;&#64;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x6d;&#121;&#64;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a>“, address: undefined }</li></ul><hr><h6 id="155-输出什么-B"><a href="#155-输出什么-B" class="headerlink" title="155. 输出什么? B"></a>155. 输出什么? B</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomValue = &#123; <span class="attr">name</span>: <span class="string">&quot;Lydia&quot;</span> &#125;</span><br><span class="line">randomValue = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">typeof</span> randomValue === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It&#x27;s not a string!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Yay it&#x27;s a string!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>It&#39;s not a string!</code></li><li>B: <code>Yay it&#39;s a string!</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript入门</title>
      <link href="/2023/06/06/TechnicalArticles/js/01.JavaScript%E5%85%A5%E9%97%A8/"/>
      <url>/2023/06/06/TechnicalArticles/js/01.JavaScript%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript入门"><a href="#JavaScript入门" class="headerlink" title="JavaScript入门"></a>JavaScript入门</h1><h3 id="浏览器相关"><a href="#浏览器相关" class="headerlink" title="浏览器相关"></a>浏览器相关</h3><h4 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h4><p>浏览器内核（<code>Rendering Engine</code>），常见的叫法如：排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核。</p><table><thead><tr><th align="left">浏览器</th><th align="left">内核</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">IE</td><td align="left">Trident</td><td align="left">IE、猎豹安全、360极速浏览器、百度浏览器</td></tr><tr><td align="left">FireFox</td><td align="left">Gecko</td><td align="left">可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td></tr><tr><td align="left">Safari</td><td align="left">Webkit</td><td align="left">从Safari推出之时起，它的渲染引擎就是Webkit，一提到 webkit，首先想到的便是 chrome，可以说，chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。</td></tr><tr><td align="left">Chrome</td><td align="left">Chromium&#x2F;Blink</td><td align="left">在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td></tr><tr><td align="left">Opera</td><td align="left">Blink</td><td align="left"></td></tr></tbody></table><h4 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h4><p>用户请求的HTML文本(text&#x2F;html)通过浏览器的网络层到达渲染引擎后，渲染工作开始。每次通常渲染不会超过8K的数据块，其中基础的渲染流程图：</p><p>webkit引擎渲染的详细流程，其他引擎渲染流程稍有不同：</p><p><img src="/../../images/image-20230208090536598.png" alt="image-20230208090536598"></p><blockquote><ol><li><strong>解析HTML生成DOM树</strong> - 渲染引擎首先解析HTML文档，生成DOM树</li><li><strong>构建Render树</strong> - 接下来不管是内联式，外联式还是嵌入式引入的CSS样式会被解析生成CSSOM树，根据DOM树与CSSOM树生成另外一棵用于渲染的树-渲染树(Render tree)，</li><li><strong>布局Render树</strong> - 然后对渲染树的每个节点进行布局处理，确定其在屏幕上的显示位置</li><li><strong>绘制Render树</strong> - 最后遍历渲染树并用UI后端层将每一个节点绘制出来</li></ol></blockquote><h4 id="常见的js引擎"><a href="#常见的js引擎" class="headerlink" title="常见的js引擎"></a>常见的js引擎</h4><ul><li>SpiderMonkey：第一款js引擎，由Brendan Eich开发（js作者）。</li><li>Chakra：微软开发，由于IE浏览器。</li><li>JavascriptCore：webkit的js引擎，Apple公司开发。</li><li>V8：Google开发的强大js引擎，也帮助Chrome从众多浏览器中脱颖而出。</li></ul><h4 id="浏览器内核和js引擎的关系"><a href="#浏览器内核和js引擎的关系" class="headerlink" title="浏览器内核和js引擎的关系"></a>浏览器内核和js引擎的关系</h4><p>这里用webkit为列，webkit最重要的两部分：</p><ol><li><code>WebCore</code>： 负责HTML、CSS的解析、布局、渲染等相关工作；</li><li><code>JavascriptCore</code>：解析、执行js代码。</li></ol><p>下面是Chromium的架构图</p><p><img src="/../../images/image-20230208091034388.png" alt="image-20230208091034388"></p><h4 id="浏览器执行JavaScript"><a href="#浏览器执行JavaScript" class="headerlink" title="浏览器执行JavaScript"></a>浏览器执行JavaScript</h4><p>浏览器分成两部分∶渲染引擎和JS引擎</p><p><strong>渲染引擎</strong>∶用来解析HTML与CSS，俗称内核，比如chrome浏览器的blink，老版本的webkit</p><p><strong>JS引擎</strong>︰也称为JS解释器。用来读取网页中的JavaScript代码，对其处理后运行，比如chrome浏览器的V8引擎。</p><p>（JS引擎会阻塞渲染引擎）</p><h4 id="V8引擎执行js的简易流程"><a href="#V8引擎执行js的简易流程" class="headerlink" title="V8引擎执行js的简易流程"></a>V8引擎执行js的简易流程</h4><ol><li>浏览器内核将源码<strong>以流的方式</strong>交给v8引擎，v8引擎获取到源码并进行编码转换</li><li>词法分析Scanner，将代码转成tokens</li><li>语法分析Parser、Preparser，直接将tokens转换成AST树结构</li><li>字节码生成</li></ol><hr><h3 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h3><p>JavaScript是一个解释型的语言，脚本语言（侵入性xss攻击)，JavaScript是一个弱类型语言(没有强制的类型)。</p><p>JavaScript组成：</p><ul><li>BOM(browser object model浏览器对象模型)</li><li>DOM (document object model文档对象)</li><li>ECMAScript(基础语法)。</li></ul><p>ECMAScript主要版本有ES3(所有的浏览器都支持)，ES5(大部分浏览器支持)，ES6(部分浏览器支持)。(babelis一个专门用来转换ECMAScript相关版本的一个脚本工具)。</p><h3 id="JavaScript书写方式"><a href="#JavaScript书写方式" class="headerlink" title="JavaScript书写方式"></a>JavaScript书写方式</h3><ul><li><p>内嵌写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 内嵌写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javaScript:void&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>内联写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 内联写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>外联写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 外联写法 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h3><h4 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h4><ul><li><p><strong>Number</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p><strong>String</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Boolean</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bl = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>null</strong> (gc垃圾回收机制不会回收null)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li><p><strong>undefined</strong> (null的派生子类)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ud</span><br></pre></td></tr></table></figure></li><li><p><strong>Symbol</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p><strong>bigint</strong></p></li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li><strong>object</strong>（对象，除了基本数据类型其他都是对象。数组是对象、函数是对象、正则表达式也是对象）</li><li><strong>function</strong></li><li><strong>… …</strong></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值类型</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> number);</span><br><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">// 布尔类型</span></span><br><span class="line"><span class="keyword">var</span> bl = <span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> bl);</span><br><span class="line"><span class="comment">// null类型</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj);</span><br><span class="line"><span class="comment">// undefined类型</span></span><br><span class="line"><span class="keyword">var</span> un = <span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> un);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">typeof</span> un);<span class="comment">//typeof返回的是一个字符串</span></span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>采用var关键词来进行声明（var关键词声明的是伪全局变量）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="变量名声明规范"><a href="#变量名声明规范" class="headerlink" title="变量名声明规范"></a>变量名声明规范</h4><ul><li><p>不能是关键字和保留字</p><p><img src="/../../images/image-20230206110553972.png" alt="image-20230206110553972"></p></li><li><p>不能以数字开头</p></li><li><p>只能由数字,字母,下划线,$构成</p></li><li><p>建议使用驼峰命名法（匈牙利命名法）</p></li><li><p>语义化命名</p></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><ul><li><p>NaN无法被转换为数值的时候出现</p></li><li><p>infinity无穷大</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 常量值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无穷</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">POSITIVE_INFINITY</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span> == -<span class="title class_">Infinity</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="转为数值类型"><a href="#转为数值类型" class="headerlink" title="转为数值类型"></a>转为数值类型</h4><ul><li>转为数值类型方法：Number 及 parseInt 和 parseFloat</li><li>String可以转为数值，如无法转换则为：NaN</li><li>boolean类型转为数值 true-&gt;1 false-&gt;0</li><li>null转为数值 值为：0</li><li>undefined转为数值 值为：NaN</li></ul><h4 id="转为布尔类型"><a href="#转为布尔类型" class="headerlink" title="转为布尔类型"></a>转为布尔类型</h4><ul><li>数值转为boolean类型 非0及NaN都是true</li><li>字符串转为boolean类型 非空字符就是true</li><li>null和undefined转为boolean类型 都是false</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % ++ --</span><br></pre></td></tr></table></figure><ul><li><p>+特殊的算数运算符</p><p>对有字符串的值进行+那么对应的+号做的是连接，返回的是字符串</p></li><li><p>其他的运算符(会将对应的值转为number类型进行运算如果出现NaN那么结果就是NaN)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行规则： 先算括号里面 再执行方法 再算*/% 再算+-</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">null</span>));<span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="literal">undefined</span>));<span class="comment">//NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="literal">null</span>);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="literal">undefined</span>+<span class="string">&#x27;undefined&#x27;</span>+<span class="literal">true</span>+<span class="number">10</span>);<span class="comment">//NaNundefinedtrue10</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12</span>+<span class="number">13</span>+(a++)-(a--)+(++a));</span><br><span class="line"><span class="comment">// 12+13+12-13+13=37</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">= ——= -= *= /= %=</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i+=<span class="number">10</span>);<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i-=<span class="number">5</span>);<span class="comment">//15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i/=<span class="number">5</span>);<span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i%=<span class="number">2</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; || !</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt; == &gt;= &lt;= != ==</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; ^ | &lt; &gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="位移运算符"><a href="#位移运算符" class="headerlink" title="位移运算符"></a>位移运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &lt;&lt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> 基础 </tag>
            
            <tag> 基本数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符及表达式及条件控制语句</title>
      <link href="/2023/06/06/TechnicalArticles/js/02.%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%8A%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/06/06/TechnicalArticles/js/02.%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%8A%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符及表达式及条件控制语句"><a href="#运算符及表达式及条件控制语句" class="headerlink" title="运算符及表达式及条件控制语句"></a>运算符及表达式及条件控制语句</h1><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><ul><li>进行加法运算且有字符串时，会进行字符串拼接操作</li><li>其他运算时，会将数据转换为Number类型再进行运算</li><li>运算中没有字符串，且出现了NaN，则结果必是NaN</li></ul><p><strong>++ 和 – 的前置后置的区别</strong>:</p><ul><li>前置是先加(减)后算</li><li>后置是先算后加(减)</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>&amp;&amp;：全真才为真，有假则为假</li><li>||：全假才为假，有真则为真</li><li>！：会将进行运算的数据强行转换为Boolean，并取反</li></ul><p><strong>逻辑短路:</strong></p><ul><li>&amp;&amp;：当前面的表达式判断为假后，后面的表达式都将不会计算</li><li>||：当前面的表达式判断为真后，后面的表达式都将不会计算</li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li>返回值都是Boolean类型</li><li>‘‘1’‘ &#x3D;&#x3D; 1，只比较值；’‘1’‘ &#x3D;&#x3D;&#x3D;1，同时比较值和类型</li><li>NaN !&#x3D; NaN</li><li>任意类型的数据和数值进行比较，会被转为数值再比较</li><li>字符串之间比较的是acsii码（从第一位开始比较，A：65 ，a：97 ）</li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li>赋值运算符权重较低，一般是最后再进行运算</li><li>a+&#x3D;b 可以看为 a&#x3D;a+b，其他的*，- 类似</li></ul><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> ：表达式<span class="number">3</span></span><br><span class="line">当表达式<span class="number">1</span>为<span class="literal">true</span>，执行表达式<span class="number">2</span></span><br><span class="line">当表达式<span class="number">1</span>为<span class="literal">false</span>，执行表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><ul><li><p>算术表达式</p><p>例如：1+1+2</p></li><li><p>条件表达式</p><p>例如：1+1&gt;2</p></li><li><p>关系表达式</p><p>a&gt;b &amp;&amp; a&lt;c</p></li></ul><h4 id="运算符的执行顺序"><a href="#运算符的执行顺序" class="headerlink" title="运算符的执行顺序"></a>运算符的执行顺序</h4><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>. [] ()</strong></td><td>对象成员存取、数组下标、函数调用等</td></tr><tr><td><strong>++ – ~ ! delete new typeof void</strong></td><td>一元运算符</td></tr><tr><td>*** &#x2F; %**</td><td>乘法、除法、去模</td></tr><tr><td><strong>+ - +</strong></td><td>加法、减法、字符串连接</td></tr><tr><td><strong>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</strong></td><td>移位</td></tr><tr><td><strong>&lt; &lt;&#x3D; &gt; &gt;&#x3D; instanceof</strong></td><td>关系比较、检测类实例</td></tr><tr><td><strong>&#x3D;&#x3D; !&#x3D; &#x3D;&#x3D;&#x3D; !&#x3D;&#x3D;</strong></td><td>恒等(全等)</td></tr><tr><td><strong>&amp;</strong></td><td>位与</td></tr><tr><td><strong>^</strong></td><td>位异或</td></tr><tr><td><strong>|</strong></td><td>位或</td></tr><tr><td><strong>&amp;&amp;</strong></td><td>逻辑与</td></tr><tr><td><strong>||</strong></td><td>逻辑或</td></tr><tr><td><strong>?:</strong></td><td>三元条件</td></tr><tr><td><strong>&#x3D; x&#x3D;</strong></td><td>赋值、运算赋值</td></tr><tr><td><strong>,</strong></td><td>多重赋值、数组元素</td></tr></tbody></table><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">20</span></span><br><span class="line">n++</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>+<span class="number">29</span>+(++n)-(n++)/<span class="number">10</span>+<span class="number">30</span>%<span class="number">7</span>-<span class="number">5</span>*<span class="number">3</span>&gt;<span class="number">10</span> &amp;&amp; <span class="number">20</span>-<span class="number">15</span>*<span class="number">29</span>/<span class="number">18</span>&gt;<span class="number">13</span>-(n++)/n+<span class="string">&#x27;&#x27;</span>+<span class="number">109</span> ? <span class="number">18</span>-(<span class="number">2</span>-<span class="number">4</span>)*<span class="number">3</span>+<span class="literal">undefined</span>-<span class="literal">true</span>+(n++) :  n-(n++)*<span class="number">3</span>+<span class="literal">false</span>+<span class="literal">true</span> <span class="comment">//-47</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)<span class="comment">//25</span></span><br></pre></td></tr></table></figure><h3 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>程序控制语句所有的语言都具备 ，主要分为循环控制语句（循环执行）和条件控制语句（根据不同的条件执行不同的内容）</p></blockquote><h4 id="常用的条件控制语句"><a href="#常用的条件控制语句" class="headerlink" title="常用的条件控制语句"></a>常用的条件控制语句</h4><ul><li>if else</li><li>switch case</li></ul><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line"><span class="comment">//条件满足</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//条件不满足</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h5><ul><li>if else他只会进入其中的一个条件中 不会同时进入俩个同级的代码块</li><li>if 里面的条件可以为表达式也可以为值 但是都会被强制转换为boolean类型</li><li>if else可以多层嵌套，不建议超过俩层（可读性 可维护性）</li></ul><h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入一个年份，判断是闰年还是平年</span></span><br><span class="line"><span class="comment">//判读闰年的条件，能被4整除且不能被100整除，或者能被400整除</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title class_">Number</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入年份&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span>(num % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; num % <span class="number">100</span> != <span class="number">0</span> || num % <span class="number">400</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(num+<span class="string">&quot;是闰年&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(num+<span class="string">&quot;是平年&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(值)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line"><span class="comment">//执行的代码</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line"><span class="comment">//执行的代码</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="comment">//上面都不满足的默认的执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特性：-1"><a href="#特性：-1" class="headerlink" title="特性："></a>特性：</h5><ul><li>switch 的值比对用到的是&#x3D;&#x3D;&#x3D; 必须要类型和值都一致</li><li>每个case块都是一个分支 如果没有break那么会进入下一个分支</li><li>多个分支可以执行一个操作</li><li>break用于跳出switch块 那么后续的分支不再执行</li><li>switch 不适用于范围内的比对</li><li>default 默认的执行 上面都不满足的情况下执行</li><li>switch case 允许多层嵌套</li></ul><h5 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">某个空调有对应的开关 当你按下的开关键为1号键的时候 执行加热操作</span></span><br><span class="line"><span class="comment">按下2号键 执行制冷操作</span></span><br><span class="line"><span class="comment">按下3号键 执行通风操作</span></span><br><span class="line"><span class="comment">按下的键为其他 不执行操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> code = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入你需要执行的指令&#x27;</span>)</span><br><span class="line"><span class="keyword">switch</span> (<span class="title class_">Number</span>(code)) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//单独的分支</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在执行加热操作&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">//break 跳出 结束这个switch块 后续的不再执行</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在执行制冷操作&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在执行通风操作&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误指令 不执行操作&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 控制语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2023/06/06/TechnicalArticles/js/04.%E5%87%BD%E6%95%B0/"/>
      <url>/2023/06/06/TechnicalArticles/js/04.%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><p>​函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。JavaScript函数语法,函数就是包裹在花括号中的代码块，前面使用了关键词 function： 当调用该函数时，会执行函数内的代码。可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p><h3 id="创建函数的语法"><a href="#创建函数的语法" class="headerlink" title="创建函数的语法"></a>创建函数的语法</h3><p>function函数名 (var1, var2, …, varx {代码．．． }</p><p>var1, var2 等指的是传入函数的变量或值。{ 和 } 定义了函数的开始和结束。</p><p>注意：无参数的函数必须在其函数名后加括号：</p><p>function函数名 ()　 {　代码．．．　 }</p><blockquote><p>注意：别忘记 JavaScript 中大小写字母的重要性。”function” 这个词必须是小写的，否则 JavaScript 就会出错。另外需要注意的是，必须使用大小写完全相同的函数名来调用函数。</p></blockquote><h3 id="变量的生存周期"><a href="#变量的生存周期" class="headerlink" title="变量的生存周期"></a>变量的生存周期</h3><p>当您在函数内声明了一个变量后，就只能在该函数中访问该变量。当退出该函数后，这个变量会被撤销。这种变量称为本地变量。您可以在不同的函数中使用名称相同的本地变量，这是因为只有声明过变量的函数能够识别其中的每个变量。</p><p>如果您在函数之外声明了一个变量，则页面上的所有函数都可以访问该变量。这些变量的生存期从声明它们之后开始，在页面关闭时结束。</p><h3 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h3><ul><li>系统函数 （系统自带，直接调用即可，例如： window.console.log() ）</li><li>内置函数 （对象内部提供的，例如：Math.pow() ）</li><li>自定义函数 (自定义的)</li></ul><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>使用function关键词来定义</p><h5 id="匿名函数-（没有名字的函数-无法复用）"><a href="#匿名函数-（没有名字的函数-无法复用）" class="headerlink" title="匿名函数 （没有名字的函数 无法复用）"></a>匿名函数 （没有名字的函数 无法复用）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//立即执行函数 自己执行 准备工作的执行（框架的封装）</span></span><br><span class="line"><span class="comment">//  前面() 表示他是一个整体 后面() 表示执行这个函数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是立即执行函数&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h5 id="具名函数-（有函数名，需要调用执行-可复用）"><a href="#具名函数-（有函数名，需要调用执行-可复用）" class="headerlink" title="具名函数 （有函数名，需要调用执行 可复用）"></a>具名函数 （有函数名，需要调用执行 可复用）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function 函数名(形参...)&#123;</span></span><br><span class="line"><span class="comment">函数体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//具名函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用 函数名()</span></span><br><span class="line"><span class="title function_">sayHello</span>()</span><br><span class="line"><span class="comment">//结合匿名函数来声明具名函数</span></span><br><span class="line"><span class="keyword">var</span> sayHi = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><h5 id="使用对象构建的形式-（使用new关键词来创建）"><a href="#使用对象构建的形式-（使用new关键词来创建）" class="headerlink" title="使用对象构建的形式  （使用new关键词来创建）"></a>使用对象构建的形式  （使用new关键词来创建）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Function(&#x27;函数体&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;console.log(&quot;你好&quot;)&#x27;</span>)</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h3 id="函数的执行过程"><a href="#函数的执行过程" class="headerlink" title="函数的执行过程"></a>函数的执行过程</h3><h5 id="1-预编译过程"><a href="#1-预编译过程" class="headerlink" title="1.预编译过程"></a>1.预编译过程</h5><p>var关键词修饰的变量会进行预编译</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>function 也会发生预编译</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>() <span class="comment">//也能执行 function会被预编译</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn1)<span class="comment">//undefined</span></span><br><span class="line"><span class="title function_">fn1</span>()<span class="comment">//var关键词预编译不会读取赋值操作 报错 is not a function</span></span><br><span class="line"><span class="comment">//第二种具名函数的定义</span></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-执行过程"><a href="#2-执行过程" class="headerlink" title="2.执行过程"></a>2.执行过程</h5><p>函数声明会发生预编译</p><p>调用的时候会发生的操作：</p><ul><li>寻找对应的堆空间的函数引用</li><li>然后再将他推入执行栈中 进行执行 </li><li>在执行栈中会打开对应的函数内的代码进行执行 </li><li>当他执行完毕以后  那么gc就会将他回收（可达性）。</li></ul><h5 id="3-回收过程"><a href="#3-回收过程" class="headerlink" title="3.回收过程"></a>3.回收过程</h5><p><img src="/../../images/image-20230209202811337.png" alt="image-20230209202811337"></p><h6 id="回收器"><a href="#回收器" class="headerlink" title="回收器"></a>回收器</h6><p>主回收器 Major gc (常用的  回收大的对象 明显)</p><p>副回收器 Minor gc  （回收碎片化内容 使用频繁）</p><h6 id="回收机制"><a href="#回收机制" class="headerlink" title="回收机制"></a>回收机制</h6><p>标记清除 （设置true false标记）</p><p>引用计算 （引用操作进行++）</p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ul><li>显式参数（Parameters）即形参</li><li>隐式参数（Arguments）实参</li></ul><ol><li>显式参数（Parameters）即形参在函数定义时列出。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">parameter1, parameter2, parameter3</span>)&#123;</span><br><span class="line">    <span class="comment">//要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>隐式参数（Arguments）即实参在函数调用时传递给函数的真正的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="variable language_">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>参数的个数</p><ul><li><p>当实参比比函数声明指定的形参个数少时，剩下的形参都将设置为undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>);<span class="comment">//1, undefined</span></span><br></pre></td></tr></table></figure></li><li><p>当实参比形参个数要多时，剩下的实参没办法直接获得，可以通过arguments对象来访问。在javascript中函数的参数在函数内部是用一个数组表示的。函数接收的始终都是这个数组，并不关心数组中包含哪些参数。而arguments是一个类数组对象，可以使用方括号语法来访问它的每一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="variable language_">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">//1 2 3</span></span><br><span class="line"><span class="comment">//arguments对象的length属性可以显示实参的个数，函数的length属性则显示形参的个数。</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>参数的传递</p><blockquote><p>JavaScript中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样，当传递的值是基本类型时，复制的是值本身。而参数为引用类型时，会把这个值在内存中的地址复制给一个局部变量。</p></blockquote><ul><li>基本类型值的传递（传递的值是变量值的副本）</li><li>引用类型值的传递（传递的值是一个指向对象的指针）</li></ul></li></ol><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="1-判断是否为回文数："><a href="#1-判断是否为回文数：" class="headerlink" title="1. 判断是否为回文数："></a>1. 判断是否为回文数：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为回文数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isPalindromes</span>(<span class="params">x</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(x))) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;当前内容出错！&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> num = x</span><br><span class="line">            <span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 个位数为0,必定不是回文数(除了0)</span></span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;不是回文数&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">10</span> &amp;&amp; x &gt;= <span class="number">0</span>) &#123; <span class="comment">//十位数一定是回文数</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;是回文数&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                       x       y    </span></span><br><span class="line"><span class="comment">                    1234321     0     </span></span><br><span class="line"><span class="comment">                    123432      1     </span></span><br><span class="line"><span class="comment">                    12343      12    </span></span><br><span class="line"><span class="comment">                    1234      123   </span></span><br><span class="line"><span class="comment">                    123      1234  </span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="comment">//所判断的数 接受反转的内容</span></span><br><span class="line">                <span class="comment">// 反转条件 x&gt;y</span></span><br><span class="line">                <span class="keyword">while</span> (x &gt; y) &#123;</span><br><span class="line">                    y = y * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">                    x = <span class="built_in">parseInt</span>(x / <span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//偶数位</span></span><br><span class="line">                <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;是回文数&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">parseInt</span>(y / <span class="number">10</span>) == x) &#123;<span class="comment">//奇数位</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;是回文数&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(num + <span class="string">&#x27;不是回文数&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">isPalindromes</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入数字判断是否为回文数:&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="return关键字"><a href="#return关键字" class="headerlink" title="return关键字"></a>return关键字</h3><p>return 是用于在函数中返回对应的结果，默认返回 undefined。</p><p>若执行了return，则代表该函数的执行结束，后续代码都将不会执行。</p><h3 id="小总结-break，continue，return"><a href="#小总结-break，continue，return" class="headerlink" title="小总结(break，continue，return)"></a>小总结(break，continue，return)</h3><ul><li>break跳出循环和switch ，不会结束function</li><li>continue 只能用于循环中，跳过本次循环</li><li>return  结束整个函数 返回对应的数据</li><li>throw new Error 报错并结束整个程序</li></ul><h3 id="作用域及作用域链"><a href="#作用域及作用域链" class="headerlink" title="作用域及作用域链"></a>作用域及作用域链</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h5 id="1-什么是作用域"><a href="#1-什么是作用域" class="headerlink" title="1. 什么是作用域"></a>1. 什么是作用域</h5><p>作用域是在运行时代码中的某些特定部分中变量，函数和对象的可访问性。换句话说，作用域决定了代码区块中变量和其他资源的可见性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outFun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> inVariable = <span class="string">&quot;内层变量2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outFun2</span>();<span class="comment">//要先执行这个函数，否则根本不知道里面是啥</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inVariable); <span class="comment">// Uncaught ReferenceError: inVariable is not defined</span></span><br></pre></td></tr></table></figure><p>从上面的例子可以体会到作用域的概念，变量 inVariable 在全局作用域没有声明，所以在全局作用域下取值会报错。我们可以这样理解：<strong>作用域就是一个独立的地盘，让变量不会外泄、暴露出去</strong>。也就是说<strong>作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</strong></p><blockquote><p><strong>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域</strong>。ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现。</p></blockquote><h5 id="2-全局作用域和函数作用域"><a href="#2-全局作用域和函数作用域" class="headerlink" title="2. 全局作用域和函数作用域"></a>2. 全局作用域和函数作用域</h5><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：</p><ul><li><p>最外层函数 和在最外层函数外面定义的变量拥有全局作用域</p></li><li><p>所有末定义直接赋值的变量自动声明为拥有全局作用域</p></li><li><p>所有 window 对象的属性拥有全局作用域</p></li></ul><blockquote><p>全局作用域有个弊端：如果我们写了很多行 JS 代码，变量定义都没有用函数包括，那么它们就全部都在全局作用域中。这样就会 污染全局命名空间, 容易引起命名冲突。</p></blockquote><p>这就是为何 jQuery、Zepto 等库的源码，所有的代码都会放在<code>(function()&#123;....&#125;)()</code>中。因为放在里面的所有变量，都不会被外泄和暴露，不会污染到外面，不会对其他的库或者 JS 脚本造成影响。这是函数作用域的一个体现。</p><p>函数作用域,是指声明在函数内部的变量，和全局作用域相反，局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部。</p><p><strong>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行</strong>。我们看个例子，用泡泡来比喻作用域可能好理解一点：</p><p><img src="/../../images/image-20230209205714034.png" alt="image-20230209205714034"></p><p>最后输出的结果为 2, 4, 12</p><ul><li>泡泡 1 是全局作用域，有标识符 foo；</li><li>泡泡 2 是作用域 foo，有标识符 a,bar,b；</li><li>泡泡 3 是作用域 bar，仅有标识符 c。</li></ul><h5 id="3-块级作用域"><a href="#3-块级作用域" class="headerlink" title="3. 块级作用域"></a>3. 块级作用域</h5><p>块级作用域可通过新增命令 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建：</p><ol><li>在一个函数内部</li><li>在一个代码块（由一对花括号包裹）内部</li></ol><p>let 声明的语法与 var 的语法一致。你基本上可以用 let 来代替 var 进行变量声明，但会将变量的作用域限制在当前代码块中。块级作用域有以下几个特点：</p><ul><li><strong>声明变量不会提升到代码块顶部</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let/const 声明并不会被提升到当前代码块的顶部，因此你需要手动将 let/const 声明放置到顶部，以便让变量在整个代码块内部可用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// value 在此处不可用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// value 在此处不可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>禁止重复声明</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果一个标识符已经在代码块内部被定义，那么在此代码块内使用同一个标识符进行 let 声明就会导致抛出错误。例如：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">40</span>; <span class="comment">// Uncaught SyntaxError: Identifier &#x27;count&#x27; has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在本例中， count 变量被声明了两次：一次使用 var ，另一次使用 let 。因为 let 不能在同一作用域内重复声明一个已有标识符，此处的 let 声明就会抛出错误。但如果在嵌套的作用域内使用 let 声明一个同名的新变量，则不会抛出错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 不会抛出错误</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">40</span>;</span><br><span class="line"><span class="comment">// 其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环中的绑定块作用域的妙用</li></ul><p>开发者可能最希望实现 for 循环的块级作用域了，因为可以把声明的计数器变量限制在循环内，例如，以下代码在 JS 经常见到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;测试<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span> + (i + <span class="number">1</span>) + <span class="string">&#x27;个&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们要实现这样的一个需求: 点击某个按钮, 提示”点击的是第 n 个按钮”,此处我们先不考虑事件代理,万万没想到，点击任意一个按钮，<strong>后台都是弹出“第四个”</strong>,这是因为 i 是全局变量,执行到点击事件时，此时 i 的值为 3。那该如何修改，最简单的是用 let 声明 i</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     btns[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span> + (i + <span class="number">1</span>) + <span class="string">&#x27;个&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><h5 id="1-什么是自由变量"><a href="#1-什么是自由变量" class="headerlink" title="1.什么是自由变量"></a>1.什么是自由变量</h5><p>首先认识一下什么叫做 <strong>自由变量</strong> 。如下代码中，<code>console.log(a)</code>要得到 a 变量，但是在当前的作用域中没有定义 a（可对比一下 b）。当前作用域没有定义的变量，这成为 自由变量 。自由变量的值如何得到 —— 向父级作用域寻找（注意：这种说法并不严谨，下文会重点解释）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">200</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 这里的a在这里就是一个自由变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h5 id="2-什么是作用域链"><a href="#2-什么是作用域链" class="headerlink" title="2. 什么是作用域链"></a>2. 什么是作用域链</h5><p>如果父级也没呢？再一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是 作用域链 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">F1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">200</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">300</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 自由变量，顺作用域链向父作用域找</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 自由变量，顺作用域链向父作用域找</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 本作用域的变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">F2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">F1</span>()</span><br></pre></td></tr></table></figure><h5 id="3-关于自由变量的取值"><a href="#3-关于自由变量的取值" class="headerlink" title="3. 关于自由变量的取值"></a>3. 关于自由变量的取值</h5><p>关于自由变量的值，上文提到要到父作用域中取，其实有时候这种解释会产生歧义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">20</span></span><br><span class="line">  (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">f</span>() <span class="comment">//10，而不是20</span></span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">show</span>(fn)</span><br></pre></td></tr></table></figure><p>在 fn 函数中，取自由变量 x 的值时，要到哪个作用域中取？——要到创建 fn 函数的那个作用域中取，<strong>无论 fn 函数将在哪里调用</strong>。</p><p>所以，不要在用以上说法了。相比而言，用这句话描述会更加贴切:<strong>要到创建这个函数的那个域</strong>。</p><p>作用域中取值,这里强调的是<strong>“创建”，而不是“调用”</strong>，切记切记——其实这就是所谓的”静态作用域”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b) <span class="comment">//30</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="title function_">fn</span>(),</span><br><span class="line">  b = <span class="number">200</span></span><br><span class="line"><span class="title function_">x</span>() <span class="comment">//bar()</span></span><br></pre></td></tr></table></figure><p>fn()返回的是 bar 函数，赋值给 x。执行 x()，即执行 bar 函数代码。取 b 的值时，直接在 fn 作用域取出。取 a 的值时，试图在 fn 作用域取，但是取不到，只能转向创建 fn 的那个作用域中去查找，结果找到了,所以最后的结果是 30</p><h4 id="作用域与执行上下文"><a href="#作用域与执行上下文" class="headerlink" title="作用域与执行上下文"></a>作用域与执行上下文</h4><p>许多开发人员经常混淆作用域和执行上下文的概念，误认为它们是相同的概念，但事实并非如此。</p><p>我们知道 JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段,这两个阶段所做的事并不一样：</p><h5 id="解释阶段："><a href="#解释阶段：" class="headerlink" title="解释阶段："></a>解释阶段：</h5><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定</li></ul><h5 id="执行阶段："><a href="#执行阶段：" class="headerlink" title="执行阶段："></a>执行阶段：</h5><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul><p>JavaScript 解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。执行上下文最明显的就是 this 的指向是执行时确定的。而作用域访问的变量是编写代码的结构确定的。</p><p>作用域和执行上下文之间最大的区别是：</p><p><strong>执行上下文在运行时确定，随时可能改变；作用域在定义时就确定，并且不会改变</strong>。</p><p>一个作用域下可能包含若干个上下文环境。有可能从来没有过上下文环境（函数从来就没有被调用过）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了；有可能同时存在一个或多个（闭包）。<strong>同一个作用域下，不同的调用会产生不同的执行上下文环境，继而产生不同的变量的值</strong>。</p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>事件驱动就是说通过触发一个行为执行对应的函数，这个被称为事件驱动</p><h5 id="获取输入框的值"><a href="#获取输入框的值" class="headerlink" title="获取输入框的值"></a>获取输入框的值</h5><h6 id="html准备"><a href="#html准备" class="headerlink" title="html准备"></a>html准备</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="当点击按钮的时候打印输入框的值"><a href="#当点击按钮的时候打印输入框的值" class="headerlink" title="当点击按钮的时候打印输入框的值"></a>当点击按钮的时候打印输入框的值</h6><p>1.获取按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.点击按钮 触发对应的事件 来执行对应的函数 (不需要手动调用的)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = fn</span><br></pre></td></tr></table></figure><p>4.在函数内打印input框中的内容</p><ul><li>获取输入框</li><li>拿到输入框的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//获取输入框</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="comment">//获取输入框的值</span></span><br><span class="line"><span class="keyword">var</span> value = input.<span class="property">value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="简单的dom操作"><a href="#简单的dom操作" class="headerlink" title="简单的dom操作"></a>简单的dom操作</h5><ul><li>通过id获取对应的dom元素（标签）</li><li>document.getElementById(‘id名字’)</li></ul><h3 id="递归-（Ologn）"><a href="#递归-（Ologn）" class="headerlink" title="递归 （Ologn）"></a>递归 （Ologn）</h3><p>递归是一个算法，算术其实就是固定的套路，递归算法是为了降低时间复杂度提高效率所设计的算法，他可以完成所有循环可以做的事情。</p><h4 id="递归的用途-可以在不知道层级的情况下走到底"><a href="#递归的用途-可以在不知道层级的情况下走到底" class="headerlink" title="递归的用途 (可以在不知道层级的情况下走到底)"></a>递归的用途 (可以在不知道层级的情况下走到底)</h4><ul><li>文件目录遍历</li><li>DFS查找</li><li>多级对象分析合并</li><li>深拷贝</li><li>…</li></ul><h4 id="递归的流程"><a href="#递归的流程" class="headerlink" title="递归的流程"></a>递归的流程</h4><ul><li>初始值 （不变的值）</li><li>规律 </li><li>自己调自己</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数)&#123;</span><br><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">初始值 进行返回</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">规则值 返回值 自己调用自己</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a><strong>练习：</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1 1 2 3 5 8 13 21 第20位是什么</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn1</span>(n - <span class="number">1</span>) + <span class="title function_">fn1</span>(n - <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn1</span>(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1 3 6 10 15 第10位是什么</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn2</span>(n - <span class="number">1</span>) + n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn2</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1 1 2 3 6 11 20 第20位是什么</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn3</span>(n - <span class="number">1</span>) + <span class="title function_">fn3</span>(n - <span class="number">2</span>) + <span class="title function_">fn3</span>(n - <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn3</span>(<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 5 11 19 29 41问第15位是什么</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn4</span>(n - <span class="number">1</span>) + <span class="number">2</span> * n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn4</span>(<span class="number">15</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 函数 </tag>
            
            <tag> function </tag>
            
            <tag> 预编译 </tag>
            
            <tag> 参数 </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 执行上下文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环控制语句</title>
      <link href="/2023/06/06/TechnicalArticles/js/03.%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/06/06/TechnicalArticles/js/03.%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h1><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>循环控制语句 根据对应的条件来控制对应的代码片段的执行次数（多次执行 循环执行），常用的循环控制语句 while do while for…循环是重复执行多次代码所以对应的执行次数是可以计算的，那么对应的执行次数和对应的条件判断中的相关条件的一个关系就是时间复杂度（时间复杂度是用于区分效率的 他是用来优化程序的）。然后对应的循环在书写过程中我们需要尽可能的避免死循环（无限循环）。</p><h4 id="循环的三要素"><a href="#循环的三要素" class="headerlink" title="循环的三要素"></a>循环的三要素</h4><ul><li>初始值 初始的变量值</li><li>迭代量  基于初始值的变化</li><li>判断条件 对应的执行循环中代码的条件</li></ul><h4 id="常用的循环语句"><a href="#常用的循环语句" class="headerlink" title="常用的循环语句"></a>常用的循环语句</h4><ul><li>while循环</li><li>do while 循环</li><li>for 循环</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var 变量 = 初始值</span><br><span class="line">while(条件表达式)&#123;</span><br><span class="line">执行的代码（循环体）</span><br><span class="line">迭代</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行打印操作10遍</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span> <span class="comment">//初始值</span></span><br><span class="line"><span class="comment">//当我出现死循环的时候 在浏览器执行了打印操作 你会发现我不能进行其他的操作</span></span><br><span class="line"><span class="comment">//原因是JavaScript是一个单线程解析的语言</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)&#123; <span class="comment">//条件</span></span><br><span class="line">    i++ <span class="comment">//迭代量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>+i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><h6 id="计算1-100的和"><a href="#计算1-100的和" class="headerlink" title="计算1-100的和"></a>计算1-100的和</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span> <span class="comment">//初始值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span> <span class="comment">//用于存储和的变量</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123; <span class="comment">//判断条件进入对应的循环体</span></span><br><span class="line">i++ <span class="comment">//迭代量变化</span></span><br><span class="line">sum+=i <span class="comment">//将对应的遍历的值加给对应的和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure><h6 id="计算1-100的阶乘"><a href="#计算1-100的阶乘" class="headerlink" title="计算1-100的阶乘"></a>计算1-100的阶乘</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">i++</span><br><span class="line">result*=i</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h6 id="计算1-100中奇数位的阶乘"><a href="#计算1-100中奇数位的阶乘" class="headerlink" title="计算1-100中奇数位的阶乘"></a>计算1-100中奇数位的阶乘</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">i++</span><br><span class="line"><span class="comment">//判断是否为奇数</span></span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">result*=i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var 变量 = 初始值</span><br><span class="line">do&#123;</span><br><span class="line">迭代量</span><br><span class="line">循环体</span><br><span class="line">&#125;while(条件)</span><br></pre></td></tr></table></figure><p><strong>特点：先做后判断 最少执行一次</strong></p><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印100遍hello world</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">  i++</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h5 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h5><p>计算1-100的偶数和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure><p>计算100-1000的水仙花数之和 153  1的三次方+5的三次方+3的三次方 &#x3D;&#x3D; 本身的（153）每位的三次方的和等于本身就是水仙花数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//获取对应的i值个数 十位 和百位 进行对应的判断</span></span><br><span class="line">    <span class="keyword">var</span> a = i % <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(i / <span class="number">10</span>) % <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">parseInt</span>(i / <span class="number">100</span>)</span><br><span class="line">    <span class="comment">//判断是否为水仙花数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">pow</span>(a, <span class="number">3</span>) + <span class="title class_">Math</span>.<span class="title function_">pow</span>(b, <span class="number">3</span>) + <span class="title class_">Math</span>.<span class="title function_">pow</span>(c, <span class="number">3</span>) == i) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        sum += i</span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">1000</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure><h5 id="do-while和while以及使用场景"><a href="#do-while和while以及使用场景" class="headerlink" title="do while和while以及使用场景"></a>do while和while以及使用场景</h5><p>do while是先执行后判断  最少执行一次 （常用于人机交互）</p><p>while是先判断后执行 最少执行0次 (对应的循环处理)</p><h5 id="猜拳游戏"><a href="#猜拳游戏" class="headerlink" title="猜拳游戏"></a>猜拳游戏</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0 石头 1 剪刀  2  步 Math.random 随机取0-1的数 不包含1 包含0</span></span><br><span class="line"><span class="keyword">var</span> computedNumber = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//用户出拳的操作</span></span><br><span class="line">    <span class="keyword">var</span> userNumber = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入对应的内容 0 石头 1 剪刀  2  步&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (userNumber != <span class="number">0</span> &amp;&amp; userNumber != <span class="number">1</span> &amp;&amp; userNumber != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;输入出错 重新输入&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对应的比对</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (computedNumber == userNumber) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打平了&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((computedNumber == <span class="number">0</span> &amp;&amp; userNumber == <span class="number">2</span>) || (computedNumber == <span class="number">2</span> &amp;&amp; userNumber == <span class="number">1</span>) || (</span><br><span class="line">        computedNumber == <span class="number">1</span> &amp;&amp; userNumber == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;恭喜你取得胜利&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;很遗憾、你输了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (userNumber != <span class="number">0</span> &amp;&amp; userNumber != <span class="number">1</span> &amp;&amp; userNumber != <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for循环跟while之间可以互相转换也就说他们对应的运行过程是一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(初始值;条件判断;迭代量)&#123;</span><br><span class="line">循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123; <span class="comment">//执行101次</span></span><br><span class="line">    <span class="comment">//你声明初始值是多少 打印第一个值就是多少 i++属于后运行的 里面是执行100次</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure><p>for(;;) 死循环</p><h5 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h5><p>打印五个❤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;❤&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算1-5的阶乘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var result = 1</span><br><span class="line">for(var i=1;i&lt;=5;i++)&#123;</span><br><span class="line">result *= i</span><br><span class="line">&#125;</span><br><span class="line">console.log(result)</span><br></pre></td></tr></table></figure><h3 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h3><p>所有的循环都可以进行嵌套 不同循环之间可以相互嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;条件;迭代量)&#123;</span><br><span class="line">    <span class="keyword">for</span>(初始值;条件;迭代量)&#123;</span><br><span class="line">        执行的代码 （执行的次数是对应的俩个循环执行次数的乘积）</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> 变量 = 初始值</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">    执行的代码（循环体）</span><br><span class="line">    迭代</span><br><span class="line">    <span class="keyword">var</span> 变量 = 初始值</span><br><span class="line">    <span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">        执行的代码（循环体）</span><br><span class="line">        迭代</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(初始值;条件;迭代量)&#123;</span><br><span class="line">    <span class="keyword">var</span> 变量 = 初始值</span><br><span class="line">    <span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">        执行的代码（循环体）</span><br><span class="line">        迭代</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>嵌套在最里面的哪个循环执行的次数是所有的循环的次数的乘积</p><h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印一个正方形 5行10列</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123; <span class="comment">//列</span></span><br><span class="line">        str+=<span class="string">&#x27;❤&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//行</span></span><br><span class="line">    <span class="keyword">var</span> line = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123; <span class="comment">//列</span></span><br><span class="line">        line+=<span class="string">&#x27;❤&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(line+<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h5><p>打印1-100内 所有的质数 （除了1和本身没有其他的数可以整除）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从2数到100</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span> <span class="comment">//记录能整除的数的个数</span></span><br><span class="line">    <span class="comment">//从2开始到本身-1结束  如果在这个范围内有可以整除的就证明他不是质数 没有的话就是质数</span></span><br><span class="line">    <span class="comment">//记录能整除的数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前的个数如果为0 就打印</span></span><br><span class="line">    <span class="keyword">if</span> (!count) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入俩个数值 求出他们的最小公倍数  和最大公约数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最小公倍数</span></span><br><span class="line"><span class="keyword">var</span> first = <span class="title function_">prompt</span>()</span><br><span class="line"><span class="keyword">var</span> last = <span class="title function_">prompt</span>()</span><br><span class="line"><span class="comment">//设置一个最小公倍数为他们的之间的乘积</span></span><br><span class="line"><span class="keyword">var</span> min = first * last</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = first * last; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % first == <span class="number">0</span> &amp;&amp; i % last == <span class="number">0</span>) &#123;</span><br><span class="line">        min = i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(min)</span><br><span class="line"><span class="comment">//设置一个最大公约数为1</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> value = first&gt;last?<span class="attr">last</span>:first</span><br><span class="line"><span class="comment">//加到对应的俩个之间的最小值停</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;value;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (first % i == <span class="number">0</span> &amp;&amp; last % i == <span class="number">0</span>) &#123;</span><br><span class="line">        max = i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br></pre></td></tr></table></figure><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>break是用于跳出 他可以跳出对应的switch块 以及对应的循环块 （跳出来了也就意味着本次对应的循环或对应的代码执行结束了）</p><p>contiue是用于跳过某个循环 下次循环继续执行</p><h5 id="break示例"><a href="#break示例" class="headerlink" title="break示例"></a>break示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//结束了当前的循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="continue示例"><a href="#continue示例" class="headerlink" title="continue示例"></a>continue示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span> <span class="comment">//跳过本次循环 进入下一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">//1 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h6><p>打印以下图形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">*******</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> line = <span class="string">&#x27;&#x27;</span> <span class="comment">//接受每行的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        line += <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(line+<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   *   </span><br><span class="line">  *** </span><br><span class="line"> *****</span><br><span class="line">*******</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每行的* 1 3 5 7</span></span><br><span class="line"><span class="comment">//每行的空格 3 2 1 0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> line = <span class="string">&#x27;&#x27;</span> <span class="comment">//接受每行的内容</span></span><br><span class="line"> <span class="comment">//打印空格的循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>;k&lt;<span class="number">3</span>-i;k++)&#123;</span><br><span class="line">line+=<span class="string">&quot;&amp;nbsp;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        line += <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(line+<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>50-100之间 跳过所有的里面带7的和7的倍数 将其他的全部打印</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">50</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(i/<span class="number">10</span>) == <span class="number">7</span> || i%<span class="number">10</span> == <span class="number">7</span> || i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展内容（时间复杂度）"><a href="#扩展内容（时间复杂度）" class="headerlink" title="扩展内容（时间复杂度）"></a>扩展内容（时间复杂度）</h3><h5 id="时间复杂度概述"><a href="#时间复杂度概述" class="headerlink" title="时间复杂度概述"></a>时间复杂度概述</h5><p>在恒定的环境内，他的执行次数和对应的变量的比列构成的值为时间复杂度。时间复杂度是在一定程度上表示当前的程序的运行速度，时间复杂度越低那么运行速度就越快。还有一个就是我们需要考虑的空间复杂度，空间复杂度是指你的程序在运行的时候开辟的内存大小，空间复杂度越低占用的内存就越少（内存不再优先考虑）</p><h5 id="时间复杂度的分类及示例"><a href="#时间复杂度的分类及示例" class="headerlink" title="时间复杂度的分类及示例"></a>时间复杂度的分类及示例</h5><p>时间复杂度使用字母O来表示 他的对应分类和其执行次数的比列是相关的</p><p>O(1) 常数阶</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">//一切没有变量来控制的 只执行一次的代码他属于常数阶 O(1)</span></span><br></pre></td></tr></table></figure><p>O(logn) 对数阶</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2 * 2 * 2 100-10求二的对数 log2(n-m) O(logn)</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> k = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span>(m&gt;n)&#123;</span><br><span class="line">m *= k ;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n) 线性阶</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个的执行次数由对应变量n控制 所以他属于线性阶 O(n)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(nlogn) 线性对数阶</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">100</span></span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(m&gt;n)&#123;</span><br><span class="line">        m *= k ;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n平方) 平方阶</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n的立方) 立方阶</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n的k次方) k次方阶</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>从上可得 循环嵌套不会超过俩次！从对应得时间复杂度来看 我们可以得到logn和n是比较性常用得 我们发现logn是比n要快得，所以在后续得优化中我们采用logn级别得时间复杂度来替代n。对于for循环和while循环 对应得时间复杂度来说while要快于for循环，用while来替代for循环</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 控制语句 </tag>
            
            <tag> 循环 </tag>
            
            <tag> 条件表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2023/06/06/TechnicalArticles/js/05.%E6%95%B0%E7%BB%84/"/>
      <url>/2023/06/06/TechnicalArticles/js/05.%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><img src="/../../images/image-20230509103821261.png" alt="image-20230509103821261"></p><h3 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h3><h4 id="什么是数组？"><a href="#什么是数组？" class="headerlink" title="什么是数组？"></a>什么是数组？</h4><p>数组就是一组数据的集合</p><p>其表现形式就是内存中的一段连续的内存地址</p><p>数组名称其实就是连续内存地址的首地址</p><h4 id="为什么需要数组？"><a href="#为什么需要数组？" class="headerlink" title="为什么需要数组？"></a>为什么需要数组？</h4><p>有了数组就可以将散乱的相同类型的数据变的有序，从而可以通过数组名+索引号等方法简单快捷的对其进行操作</p><p>从而使对数据的处理变的简单</p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>];<span class="comment">//隐式创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>);<span class="comment">//直接实例化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>(size);<span class="comment">//创建数组并指定长度</span></span><br></pre></td></tr></table></figure><h5 id="JS定义数组的特点"><a href="#JS定义数组的特点" class="headerlink" title="JS定义数组的特点"></a>JS定义数组的特点</h5><ul><li>数组定义时无需指定数据类型</li><li>数组定义时可以不指定数组长度</li><li>数组可以存储任何数据类型的数据（比如说一个元素保存整型，一个元素保存字符串型，这个在JS中是可行的）</li></ul><h3 id="数组中的常用方法"><a href="#数组中的常用方法" class="headerlink" title="数组中的常用方法"></a>数组中的常用方法</h3><h4 id="一、会改变原数组的方法"><a href="#一、会改变原数组的方法" class="headerlink" title="一、会改变原数组的方法"></a>一、会改变原数组的方法</h4><h5 id="1-push-末尾加数据"><a href="#1-push-末尾加数据" class="headerlink" title="1.push()   末尾加数据"></a>1.push()   末尾加数据</h5><blockquote><p><strong>语法：数组名.push(数据)</strong></p><p><strong>作用:</strong> 就是往数组末尾添加数据</p><p><strong>返回值:</strong> 就是这个数组的长度</p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res = arr.<span class="title function_">push</span>(<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[10,20,30,40,20]</span></span><br></pre></td></tr></table></figure><h5 id="2-pop-删除末尾数据"><a href="#2-pop-删除末尾数据" class="headerlink" title="2.pop()   删除末尾数据"></a>2.pop()   删除末尾数据</h5><blockquote><p><strong>语法：数组名.pop()</strong></p><p><strong>作用</strong>：删除数组末尾的一个元素</p><p><strong>返回值</strong>：所删除的元素</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pop</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>] </span><br><span class="line">res =arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[10,20,30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//40</span></span><br></pre></td></tr></table></figure><h5 id="3-unshift-头部加数据"><a href="#3-unshift-头部加数据" class="headerlink" title="3.unshift()  头部加数据"></a>3.unshift()  头部加数据</h5><blockquote><p><strong>语法：数组名.unshift()</strong></p><p><strong>作用：</strong>在数组头部添加元素</p><p><strong>返回值：</strong>数组的长度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pop</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res=arr.<span class="title function_">unshift</span>(<span class="number">99</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[99,10,20,30,40]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><h5 id="4-shift-头部删一个数据"><a href="#4-shift-头部删一个数据" class="headerlink" title="4.shift()  头部删一个数据"></a>4.shift()  头部删一个数据</h5><blockquote><p><strong>语法：数组名.shift()</strong></p><p><strong>作用：</strong>删除头部的一个元素</p><p><strong>返回值：</strong>所删除的数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//shift</span></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"> res=arr.<span class="title function_">shift</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[20,30,40]</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h5 id="5-reverse-反转数组"><a href="#5-reverse-反转数组" class="headerlink" title="5.reverse()  反转数组"></a>5.reverse()  反转数组</h5><blockquote><p><strong>语法：数组名.reverse()</strong></p><p><strong>作用：</strong>反转数组</p><p><strong>返回值：</strong>反转后的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reverse</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res=arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[40,30,20,10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//[40,30,20,10]</span></span><br></pre></td></tr></table></figure><h5 id="6-sort-排序"><a href="#6-sort-排序" class="headerlink" title="6.sort()  排序"></a>6.sort()  排序</h5><blockquote><p>语法一:数组名.sort()           会排序 会按照位排序</p><p>语法二:数组名.sort( (a,b)&#x3D;&gt;(a-b)) 会正序排列</p><p>语法三:数组名.sort((a,b)&#x3D;&gt;( b-a)) 会倒序排列</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort()</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">63</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>, <span class="number">69</span>, <span class="number">11</span>, <span class="number">23</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[11, 2, 23, 4, 48, 5, 63, 69, 75]</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span>(a-b)&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[2, 4, 5, 11, 23, 48, 63, 69, 75]</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span>(b-a)&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[75, 69, 63, 48, 23, 11, 5, 4, 2]</span></span><br></pre></td></tr></table></figure><h5 id="7-splice-截取并添加"><a href="#7-splice-截取并添加" class="headerlink" title="7.splice() 截取并添加"></a>7.splice() 截取并添加</h5><blockquote><p><strong>语法一：数组名.splice(开始索引,多少个)</strong></p><p><strong>作用：</strong>用来截取数组</p><p><strong>返回值：</strong>被截取掉的数据</p><p><strong>语法二：数组名.splice(开始索引,多少个,要插入的数据)</strong></p><p><strong>作用：</strong>删除并插入数据</p><p><strong>返回值：</strong>被截取掉的数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//splice() 语法一</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">63</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>]</span><br><span class="line">res = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);[<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);[<span class="number">63</span>, <span class="number">48</span>]</span><br><span class="line"><span class="comment">//******************************</span></span><br><span class="line"><span class="comment">//splice() 语法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">63</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>]</span><br><span class="line">res = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">99999</span>,<span class="number">88888</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);[<span class="number">2</span>, <span class="number">99999</span>, <span class="number">88888</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);[<span class="number">63</span>]</span><br></pre></td></tr></table></figure><h4 id="二、不改变原数组的方法"><a href="#二、不改变原数组的方法" class="headerlink" title="二、不改变原数组的方法"></a>二、不改变原数组的方法</h4><h5 id="1-concat-合并数组"><a href="#1-concat-合并数组" class="headerlink" title="1.concat()  合并数组"></a>1.concat()  合并数组</h5><blockquote><p><strong>语法：数组名.concat(数据)</strong></p><p><strong>作用：</strong>合并数组</p><p><strong>返回值：</strong>一个新的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//concat</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">concat</span>(<span class="number">20</span>,<span class="string">&quot;小敏&quot;</span>,<span class="number">50</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);[<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">20</span>, <span class="string">&#x27;小敏&#x27;</span>, <span class="number">50</span>]</span><br></pre></td></tr></table></figure><h5 id="2-join-数组连接为字符串"><a href="#2-join-数组连接为字符串" class="headerlink" title="2.join()  数组连接为字符串"></a>2.join()  数组连接为字符串</h5><blockquote><p><strong>语法：数组名.join(‘连接符’)</strong></p><p><strong>作用：</strong>就是把数组转成字符串</p><p><strong>返回值：</strong>转换好的字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//join</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[10, 20, 10, 30, 40, 50, 60]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//10+20+10+30+40+50+60</span></span><br></pre></td></tr></table></figure><h5 id="3-slice-截取数据"><a href="#3-slice-截取数据" class="headerlink" title="3.slice()  截取数据"></a>3.slice()  截取数据</h5><blockquote><p><strong>语法：数组名.slice(开始索引,结束索引)</strong></p><p><strong>作用：</strong>截取数组的一部分</p><p><strong>返回值：</strong>截取出来的数据</p><p><strong>注意：</strong>包前不包后 包含开始索引，不包含结束索引</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//slice</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[10, 20, 10, 30, 40, 50, 60]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//[20, 10, 30]</span></span><br></pre></td></tr></table></figure><h5 id="4-indexOf-求索引值"><a href="#4-indexOf-求索引值" class="headerlink" title="4.indexOf()  求索引值"></a>4.indexOf()  求索引值</h5><blockquote><p><strong>语法一：数组名.indexOf(要查询的数据)</strong></p><p><strong>作用：</strong>检查该数组是否有该数据</p><p>​如果存在，则返回<strong>第一次</strong>出现的索引</p><p>​如果没有则返回 <strong>-1</strong></p><p><strong>语法二：数组名.indexOf(要查询的数据,开始的索引)</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf 语法一</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">indexOf</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[10, 20, 10, 30, 40, 50, 60]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//0</span></span><br><span class="line"><span class="comment">//*************************************</span></span><br><span class="line"><span class="comment">//indexOf  语法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">indexOf</span>(<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[10, 20, 10, 30, 40, 50, 60]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h5 id="5-lastIndexOf-反向求索引值"><a href="#5-lastIndexOf-反向求索引值" class="headerlink" title="5.lastIndexOf()  反向求索引值"></a>5.lastIndexOf()  反向求索引值</h5><blockquote><p><strong>语法一：数组名.lastIndexOf(要查询的数据)</strong></p><p><strong>作用：</strong>检查该数组是否有该数据</p><p>​如果存在，则返回<strong>第一次</strong>出现的索引</p><p>​如果没有则返回 <strong>-1</strong></p><p><strong>语法二：数组名.lastIndexOf(要查询的数据,开始的索引)</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lastIndexOf 语法一</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">lastIndexOf</span>(<span class="number">50</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[10, 20, 10, 30, 40, 50, 60]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//5</span></span><br><span class="line"><span class="comment">//*************************************</span></span><br><span class="line"><span class="comment">//lastIndexOf 语法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">lastIndexOf</span>(<span class="number">50</span>,<span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[10, 20, 10, 30, 40, 50, 60]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h4 id="三、ES5新增的数组方法"><a href="#三、ES5新增的数组方法" class="headerlink" title="三、ES5新增的数组方法"></a>三、ES5新增的数组方法</h4><h5 id="1-forEach-遍历"><a href="#1-forEach-遍历" class="headerlink" title="1.forEach()  遍历"></a>1.forEach()  遍历</h5><blockquote><p><strong>语法：数组名.forEach(function(item,index,arr){})</strong></p><ul><li>item：表示数组中的每一项</li><li>index：表示的是每一项对应的索引</li><li>arr：表示的是原数组</li></ul><p><strong>作用：</strong>用于循环遍历数组</p><p><strong>返回值：</strong>无返回值，硬要说的话就是undefined</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forEach</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item, <span class="string">&quot;------&quot;</span>, index, <span class="string">&quot;-------&quot;</span>, arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-map"><a href="#2-map" class="headerlink" title="2.map()"></a>2.map()</h5><blockquote><p><strong>语法：数组名.map(function (item,index,arr) {})</strong></p><p>+ item : 这个表示的是数组中的每一项</p><p>+ index : 这个表示的是每一项对应的索引</p><p>+ arr : 这个表示的是原数组</p><p><strong>作用:</strong> 就是用来映射</p><p><strong>返回值:</strong> 必然是一个数组 一个映射完毕的数组；这个数组合原数组长度一样</p><p><strong>注意:</strong> 要以return的形式执行返回条件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">1000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h5 id="3-filter-按照某些条件过滤数组"><a href="#3-filter-按照某些条件过滤数组" class="headerlink" title="3.filter  按照某些条件过滤数组"></a>3.filter  按照某些条件过滤数组</h5><blockquote><p><strong>语法：数组名.filter(function (item,index,arr) {})</strong></p><p> + item : 这个表示的是数组中的每一项</p><p> + index : 这个表示的是每一项对应的索引</p><p> + arr : 这个表示的是原数组</p><p><strong>作用:</strong> 用来过滤数组的</p><p><strong>返回值:</strong> 如果有就是过滤(筛选)出来的数据 保存在一个数组中；如果没有返回一个空数组</p><p><strong>注意:</strong> 要以return的形式执行返回条件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h5 id="4-every-判断数组是不是每项都满足条件"><a href="#4-every-判断数组是不是每项都满足条件" class="headerlink" title="4.every    判断数组是不是每项都满足条件"></a>4.every    判断数组是不是每项都满足条件</h5><blockquote><p>语法：数组名.every(function (item,index,arr) {})</p><p>+ item : 这个表示的是数组中的每一项</p><p>+ index : 这个表示的是每一项对应的索引</p><p>+ arr : 这个表示的是原数组</p><p><strong>作用:</strong> 主要是用来判断数组中是不是 每一个 都满足条件</p><p>   <strong>只有所有</strong>的都满足条件返回的是true</p><p>   只要有一个不满足返回的就是false</p><p><strong>返回值:</strong> 是一个布尔值</p><p><strong>注意:</strong> 要以return的形式执行返回条件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//every</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//打印结果  true</span></span><br></pre></td></tr></table></figure><h5 id="5-some（）-判断数组有没有满足条件的"><a href="#5-some（）-判断数组有没有满足条件的" class="headerlink" title="5.some（） 判断数组有没有满足条件的"></a>5.some（） 判断数组有没有满足条件的</h5><blockquote><p>语法：数组名.some(function (item,index,arr) {})</p><p>+ item : 这个表示的是数组中的每一项</p><p>+ index : 这个表示的是每一项对应的索引</p><p>+ arr : 这个表示的是原数组</p><p><strong>作用:</strong> 主要是用来判断数组中是不是 每一个 都满足条件</p><p>   <strong>只要有一个</strong>满足条件返回的是true</p><p>   只要都不满足返回的就是false</p><p><strong>返回值:</strong> 是一个布尔值</p><p><strong>注意:</strong> 要以return的形式执行返回条件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//some</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="6-find（）获取满足条件的数据"><a href="#6-find（）获取满足条件的数据" class="headerlink" title="6.find（）获取满足条件的数据"></a>6.find（）获取满足条件的数据</h5><blockquote><p>语法：数组名.find(function (item,index,arr) {})</p><p>+ item : 这个表示的是数组中的每一项</p><p>+ index : 这个表示的是每一项对应的索引</p><p>+ arr : 这个表示的是原数组</p><p><strong>作用:</strong> 用来获取数组中满足条件的数据</p><p><strong>返回值:</strong> 如果有 就是满足条件的第一个数据；如果没有就是undefined</p><p><strong>注意:</strong> 要以return的形式执行返回条件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)<span class="comment">//4</span></span><br></pre></td></tr></table></figure><h5 id="7-reduce"><a href="#7-reduce" class="headerlink" title="7.reduce()"></a>7.reduce()</h5><blockquote><p><strong>语法：数组名.reduce(function (prev,item,index,arr) {},初始值</strong></p><p>+ prev :一开始就是初始值 当第一次有了结果以后；这个值就是第一次的结果</p><p>+ item : 这个表示的是数组中的每一项</p><p>+ index : 这个表示的是每一项对应的索引</p><p>+ arr : 这个表示的是原数组</p><p><strong>作用:</strong> 就是用来叠加的</p><p><strong>返回值:</strong> 就是叠加后的结果</p><p><strong>注意:</strong> 以return的形式书写返回条件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reduce</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prev *= item</span><br><span class="line">&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//120</span></span><br></pre></td></tr></table></figure><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h4 id="常用的排序算法"><a href="#常用的排序算法" class="headerlink" title="常用的排序算法"></a><strong>常用的排序算法</strong></h4><table><thead><tr><th align="center">排序算法</th><th align="left">描述</th><th align="left">平均时间复杂度</th></tr></thead><tbody><tr><td align="center">冒泡排序</td><td align="left">逐层冒泡</td><td align="left">O(n²)</td></tr><tr><td align="center">选择排序</td><td align="left">选择一个数跟其他的进行比较</td><td align="left">O(n²)</td></tr><tr><td align="center">插入排序</td><td align="left">在插入数据的时候的排序法</td><td align="left">O(n²)</td></tr><tr><td align="center">希尔排序</td><td align="left">快速插入排序</td><td align="left">O(n1.5)</td></tr><tr><td align="center">快速排序</td><td align="left">利用递归，数据量不大的情况下最快</td><td align="left">O(N*logN)</td></tr><tr><td align="center">归并排序</td><td align="left">大数据处理中最快的排序</td><td align="left">O(N*logN)</td></tr><tr><td align="center">堆排序</td><td align="left">是指利用堆这种数据结构所设计的一种排序算法</td><td align="left">O(N*logN)</td></tr><tr><td align="center">基数排序</td><td align="left">属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）</td><td align="left">O(d(n+r))</td></tr></tbody></table><h4 id="冒泡排序O-n²"><a href="#冒泡排序O-n²" class="headerlink" title="冒泡排序O(n²)"></a>冒泡排序O(n²)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bubble sort</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">//轮数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.<span class="property">length</span>-<span class="number">1</span> ;i++)&#123;</span><br><span class="line">    <span class="comment">//比较的次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span> ; j&lt;arr.<span class="property">length</span>-i ; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            temp = arr[j]</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择排序O-n²"><a href="#选择排序O-n²" class="headerlink" title="选择排序O(n²)"></a>选择排序O(n²)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Select sort</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> max = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = max + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[max] &gt; arr[j]) &#123;</span><br><span class="line">            max = j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[max]</span><br><span class="line">    arr[max] = arr[i]</span><br><span class="line">    arr[i] = temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h4 id="快速排序O-N-logN"><a href="#快速排序O-N-logN" class="headerlink" title="快速排序O(N*logN)"></a>快速排序O(N*logN)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Quick sort</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">QuickSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="comment">//如果数组长度只有</span></span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="property">length</span>&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//中间值取第一个,方便快捷</span></span><br><span class="line">    <span class="keyword">let</span> mid = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">//左数组</span></span><br><span class="line">    <span class="keyword">let</span> left = []</span><br><span class="line">    <span class="comment">//右数组</span></span><br><span class="line">    <span class="keyword">let</span> right = []</span><br><span class="line">    <span class="comment">//循环比较,将数据推入左右数组</span></span><br><span class="line">    <span class="comment">//因为中间值取的是第一个,所以没必要自己和自己比，所以i的初始值取1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span> ; i &lt; arr.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">        arr[i]&gt;mid? right.<span class="title function_">push</span>(arr[i]) : left.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归调用无限取中间值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">QuickSort</span>(left).<span class="title function_">concat</span>(mid,<span class="title class_">QuickSort</span>(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">QuickSort</span>(arr))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> function </tag>
            
            <tag> 数组 </tag>
            
            <tag> forEach </tag>
            
            <tag> map </tag>
            
            <tag> filter </tag>
            
            <tag> some </tag>
            
            <tag> every </tag>
            
            <tag> splice </tag>
            
            <tag> slice </tag>
            
            <tag> indexOf </tag>
            
            <tag> find </tag>
            
            <tag> reduce </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2023/06/06/TechnicalArticles/js/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/06/06/TechnicalArticles/js/06.%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>字符串就是一串字符，由双（单）引号括起来。</li><li>字符串是 JavaScript 的一种数据类型。</li><li>和数组一样是一个容器。</li><li>值类型是常量，不能改变。</li><li>字符串的增删改查 <strong>不能针对于本身</strong> 而是返回一个<strong>新的字符串</strong>。</li></ul><h3 id="字符串的定义和使用"><a href="#字符串的定义和使用" class="headerlink" title="字符串的定义和使用"></a>字符串的定义和使用</h3><h4 id="1-直接赋值"><a href="#1-直接赋值" class="headerlink" title="1.直接赋值"></a>1.直接赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">&quot;hello world&quot;</span><span class="comment">//基本类型 </span></span><br></pre></td></tr></table></figure><h4 id="2-以new关键词声明（引用了对应的值的地址）"><a href="#2-以new关键词声明（引用了对应的值的地址）" class="headerlink" title="2.以new关键词声明（引用了对应的值的地址）"></a>2.以new关键词声明（引用了对应的值的地址）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>); <span class="comment">//引用了空值的地址,引用类型</span></span><br><span class="line"><span class="comment">//注意: 此刻str为引用类型(object对象) 用new产生的变量都是引用类型的变量，也叫对象</span></span><br></pre></td></tr></table></figure><h4 id="3-转换"><a href="#3-转换" class="headerlink" title="3.转换"></a>3.转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="title class_">String</span>(‘hello’);</span><br></pre></td></tr></table></figure><p><strong>new String() 和 String() 区别</strong><br>new String是构建一个String对象 （引用数据类型 有地址指向的）<br>String 单纯的将对应的传进入的参数转为string类型（值类型）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">String</span>(‘hello world’);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="title class_">String</span>(‘hello world’);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s1); <span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s2); <span class="comment">//string</span></span><br></pre></td></tr></table></figure><p><strong>ES6新增 字符串模板</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">`hello string <span class="subst">$&#123;a&#125;</span>`</span> <span class="comment">//esc下面的这个键 解析$&#123;&#125; 以变量来解析</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">//hello string jack</span></span><br></pre></td></tr></table></figure><h3 id="字符串的属性"><a href="#字符串的属性" class="headerlink" title="字符串的属性"></a>字符串的属性</h3><p>.length属性<br>返回字符串的长度（包含空格及换行）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a b12&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)<span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">0</span>]);  <span class="comment">//获取字符串中对应下标的字符a</span></span><br></pre></td></tr></table></figure><p><strong>注意: ECMAScript 中的字符串是不可变的; 也就是说，字符串一旦创建，它们的值就不能改变.</strong></p><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><h4 id="1-charAt-根据下标返回字符串"><a href="#1-charAt-根据下标返回字符串" class="headerlink" title="1.charAt() 根据下标返回字符串"></a>1.charAt() 根据下标返回字符串</h4><p>通过下标找字符串（char 字符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">str.<span class="title function_">charAt</span>(<span class="number">0</span>) <span class="comment">//返回的是a</span></span><br></pre></td></tr></table></figure><h4 id="2-charCodeAt-返回ACSII码"><a href="#2-charCodeAt-返回ACSII码" class="headerlink" title="2.charCodeAt() 返回ACSII码"></a>2.charCodeAt() 返回ACSII码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) <span class="comment">//返回的是97</span></span><br></pre></td></tr></table></figure><p>通过字符串找下标（找不到返回-1 找的到返回对应的下标值 number（第一次出现的））</p><h4 id="3-indexOf-返回下标"><a href="#3-indexOf-返回下标" class="headerlink" title="3.indexOf() 返回下标"></a>3.indexOf() 返回下标</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;ab&#x27;</span>)) <span class="comment">//返回的下标0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;g&#x27;</span>)) <span class="comment">//找不到返回-1</span></span><br><span class="line"><span class="comment">//可以有俩个参数 第一个参数：对应需要查询的字符串 第二个参数：开始查找的下标</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)) <span class="comment">//返回 -1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abbbccde&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)) <span class="comment">//返回 2</span></span><br></pre></td></tr></table></figure><h5 id="简易的实现indexOf"><a href="#简易的实现indexOf" class="headerlink" title="简易的实现indexOf()"></a>简易的实现indexOf()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&#x27;abcbcaabcsc&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myIndexOf</span>(<span class="params">value , index</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数错误！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == <span class="literal">undefined</span>)&#123;</span><br><span class="line">        index == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历查找</span></span><br><span class="line">    <span class="comment">//先获取value的长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果value的长度大于本身的字符串长度，则直接返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(index+value.<span class="property">length</span> &gt; str.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = index ; i &lt; str.<span class="property">length</span> - value.<span class="property">length</span>; i++)&#123;</span><br><span class="line"><span class="comment">//根据value的长度来拼接</span></span><br><span class="line">            <span class="keyword">var</span> v = str[i]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span> ; j &lt; value.<span class="property">length</span> ; j++)&#123;</span><br><span class="line">                v+=str[i+j]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据对应的value来比较</span></span><br><span class="line">            <span class="keyword">if</span>(value == v)&#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myIndexOf</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="4-lastIndexOf-返回下标"><a href="#4-lastIndexOf-返回下标" class="headerlink" title="4.lastIndexOf() 返回下标"></a>4.lastIndexOf() 返回下标</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcdebc&#x27;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>)) <span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">0</span>)) <span class="comment">//-1 从0的位置往前找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">4</span>)) <span class="comment">//1//也就是说默认的情况下 对应的后面的下标可以省略 str.length-1</span></span><br></pre></td></tr></table></figure><h4 id="5-search-支持正则表达式的查找"><a href="#5-search-支持正则表达式的查找" class="headerlink" title="5.search() 支持正则表达式的查找"></a>5.search() 支持正则表达式的查找</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="regexp">/bc/</span>)) <span class="comment">//1 /bc/正则表达式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(<span class="regexp">/ab/</span>,<span class="number">0</span>)) <span class="comment">//从0的位置开始找 匹配ab的内容</span></span><br></pre></td></tr></table></figure><h4 id="6-fromCharCode-将ASCII码转为字符串"><a href="#6-fromCharCode-将ASCII码转为字符串" class="headerlink" title="6.fromCharCode() 将ASCII码转为字符串"></a>6.fromCharCode() 将ASCII码转为字符串</h4><p><strong>静态方法（通过构造方法名直接调用的叫做静态方法 他是对应的static修饰的）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">98</span>) <span class="comment">//返回的是一个字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//b</span></span><br></pre></td></tr></table></figure><h4 id="7-concat-字符串拼接"><a href="#7-concat-字符串拼接" class="headerlink" title="7.concat() 字符串拼接"></a>7.concat() 字符串拼接</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>.<span class="title function_">concat</span>(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)<span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><h4 id="8-支持正则的方法（4个）"><a href="#8-支持正则的方法（4个）" class="headerlink" title="8.支持正则的方法（4个）"></a>8.<strong>支持正则的方法（4个）</strong></h4><h5 id="search-查找（找到返回下标-没找到返回-1）"><a href="#search-查找（找到返回下标-没找到返回-1）" class="headerlink" title="search 查找（找到返回下标 没找到返回-1）"></a>search 查找（找到返回下标 没找到返回-1）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abca&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str1 = str.<span class="title function_">search</span>(<span class="string">&#x27;a&#x27;</span>)<span class="comment">//寻找a的位置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1)<span class="comment">//0</span></span><br></pre></td></tr></table></figure><h5 id="match-匹配"><a href="#match-匹配" class="headerlink" title="match() 匹配"></a>match() 匹配</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//match 返回一个数组 （匹配的内容）</span></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">&quot;abcacc&quot;</span></span><br><span class="line"><span class="comment">//默认只找第一个匹配的 加入到数组</span></span><br><span class="line"><span class="keyword">var</span> arr = str.<span class="title function_">match</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//a</span></span><br></pre></td></tr></table></figure><h5 id="replace-替换-（将找到的第一个字符串替换成一个新的字符串）"><a href="#replace-替换-（将找到的第一个字符串替换成一个新的字符串）" class="headerlink" title="replace 替换 （将找到的第一个字符串替换成一个新的字符串）"></a>replace 替换 （将找到的第一个字符串替换成一个新的字符串）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abca&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str1 = str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>)<span class="comment">//将a替换成hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1)<span class="comment">//hellobca</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//高阶函数写法</span></span><br><span class="line"><span class="keyword">var</span> str1 = str.<span class="title function_">replace</span>(<span class="regexp">/a/g</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="comment">//在正则表达式后面加g，则可以实现全局替换</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;f&#x27;</span></span><br><span class="line">&#125;)<span class="comment">//将a替换成f </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1)<span class="comment">//fbcf</span></span><br></pre></td></tr></table></figure><h5 id="split-字符串分割"><a href="#split-字符串分割" class="headerlink" title="split() 字符串分割"></a>split() 字符串分割</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分割 成为一个数组 split 数组变成字符串 join （默认以,）</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;1,2,3&#x27;</span></span><br><span class="line"><span class="comment">//默认不是以,作为分割 默认不分割 直接填入到数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>()); <span class="comment">//[&#x27;1,2,3&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)); <span class="comment">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>小练习</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将&#x27;abcabcabcab&#x27;中的bc全部替换为--</span></span><br><span class="line"><span class="comment">//方法一，使用正则</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcabcabcabc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> replaceStr = str.<span class="title function_">replace</span>(<span class="regexp">/bc/g</span>, <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(replaceStr)<span class="comment">//a--a--a--a--</span></span><br><span class="line"><span class="comment">//方法二，循环</span></span><br><span class="line"><span class="keyword">let</span> replaceStr2 = str</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; str.<span class="property">length</span> ;i++)&#123;</span><br><span class="line">    replaceStr2 = replaceStr2.<span class="title function_">replace</span>(<span class="string">&#x27;bc&#x27;</span>,<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(replaceStr2)<span class="comment">//a--a--a--a--</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计一个字符串在另外一个字符串中出现的次数</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;abcabcabcabc&#x27;</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; str2.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str2.<span class="title function_">search</span>(str1)!=-<span class="number">1</span>)&#123;</span><br><span class="line">        count++</span><br><span class="line">        i = str2.<span class="title function_">search</span>(str1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br></pre></td></tr></table></figure><h4 id="9-字符串截取"><a href="#9-字符串截取" class="headerlink" title="9.字符串截取"></a>9.字符串截取</h4><h5 id="substring-开始的下标-结束的下标"><a href="#substring-开始的下标-结束的下标" class="headerlink" title="substring(开始的下标,结束的下标)"></a>substring(开始的下标,结束的下标)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//截取的方法 substring substr</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">let</span> =<span class="string">&quot;abcdef&quot;</span></span><br><span class="line"><span class="comment">//substring(开始的下标,结束的下标) 不包含结束的下标</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>));<span class="comment">//bcdef</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//截取不包含最后一个下标 （默认不填str.length）bc</span></span><br></pre></td></tr></table></figure><h5 id="substr-开始的下标-个数"><a href="#substr-开始的下标-个数" class="headerlink" title="substr(开始的下标,个数)"></a>substr(开始的下标,个数)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// substr(开始的下标,截取的个数)</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">let</span> =<span class="string">&quot;abcdef&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>));<span class="comment">//默认的情况是截取到最后 bcdef</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">3</span>));<span class="comment">//从下标1开始截取 截取个数为3个 bcd</span></span><br></pre></td></tr></table></figure><h5 id="slice-开始的下标-结束的下标"><a href="#slice-开始的下标-结束的下标" class="headerlink" title="slice(开始的下标,结束的下标)"></a><strong>slice(开始的下标,结束的下标)</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//slice(开始的下标,结束的下标)</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">let</span> =<span class="string">&quot;abcdef&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>());<span class="comment">//不写参数则从头截到尾 abcedf</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">//bc</span></span><br></pre></td></tr></table></figure><h4 id="10-toUpperCase-转大写"><a href="#10-toUpperCase-转大写" class="headerlink" title="10.toUpperCase() 转大写"></a>10.toUpperCase() 转大写</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcA&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>())<span class="comment">//ABCA</span></span><br></pre></td></tr></table></figure><h4 id="11-toLowerCase-转小写"><a href="#11-toLowerCase-转小写" class="headerlink" title="11.toLowerCase() 转小写"></a>11.toLowerCase() 转小写</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcA&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>())<span class="comment">//abca</span></span><br></pre></td></tr></table></figure><h4 id="12-trim-去除首尾空格"><a href="#12-trim-去除首尾空格" class="headerlink" title="12.trim() 去除首尾空格"></a>12.trim() 去除首尾空格</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27; a b c &#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>())<span class="comment">//a b c</span></span><br></pre></td></tr></table></figure><p><strong>小练习</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计字符串中大写字母的个数</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;LuoLuLu is A Englishi Teacher&#x27;</span></span><br><span class="line"><span class="comment">//for循环</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str.<span class="title function_">charAt</span>(i) &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; str.<span class="title function_">charAt</span>(i) &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2，利用正则</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(<span class="regexp">/[A-Z]/g</span>).<span class="property">length</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HOW ARE YOU ? I AM DJ.将DJ变成**并且变成红色 将首字母大写 其他全部小写</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;HOW ARE YOU ? I AM DJ.DJ DJ DJ... &#x27;</span></span><br><span class="line">str = str.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>()<span class="comment">//先去掉前后空格,并全部小写</span></span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)<span class="comment">//以空格分割为数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; arr.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">    arr[i] = arr[i].<span class="title function_">replace</span>(<span class="string">&#x27;dj&#x27;</span>,<span class="string">&#x27;***&#x27;</span>.<span class="title function_">fontcolor</span>(<span class="string">&#x27;red&#x27;</span>))<span class="comment">//遇到dj,则直接替换为红色***</span></span><br><span class="line">    arr[i] = arr[i][<span class="number">0</span>].<span class="title function_">toUpperCase</span>()+arr[i].<span class="title function_">slice</span>(<span class="number">1</span>)<span class="comment">//直接将数组的第一个转为大写，并拼接上剩余的字符串</span></span><br><span class="line">&#125;</span><br><span class="line">str = arr.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str)</span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li>string是不能改变的（常量）</li><li>string的方法返回的都是一个新的字符串</li><li>string的length属性是只读的（不能赋值）读取对应的字符串的长度</li><li>字符串可以通过下标进行访问（string[i]）</li><li>字符串方法 charAt charCodeAt</li><li>搜索 indexOf lastIndexOf search</li><li>支持正则的方法 search replace split match</li><li>截取的方法 substring substr</li><li>转大写和小写 toUpperCase和 toLowerCase</li><li>静态方法 fromCharCode 根据ascii转为字符串</li></ul><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><p>一起和数学计算相关的方法都在这个里面且这个方法都是静态方法</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a><strong>属性</strong></h5><ul><li>Math.PI：表示π(3.1415926…)</li><li>E: 科学计算法</li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h5><ul><li>Math.round() ：将括号里面的数字采用四舍五入形式取整。</li><li>Math.abs()：求绝对值</li><li>Math.ceil()：将括号里面的小数采用向上取整</li><li>Math.floor()：将括号里面的小数采用向下取整</li><li>Math.pow()：求幂，第一个参数是底数，第二个参数是指数。</li><li>Math.max()：求括号里面数字的最大值，数字之间逗号隔开。</li><li>Math.min()：求括号里面数字的最小值，数字之间逗号隔开。</li><li>Math.sqrt()：开根号。</li><li>Math.random()：随机数  [0,1)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取区间内的随机数</span></span><br><span class="line"><span class="comment">//最大值:max 最小值:min</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">radom</span>*(max-min)+min</span><br></pre></td></tr></table></figure><h3 id="生成随机的验证码"><a href="#生成随机的验证码" class="headerlink" title="生成随机的验证码"></a>生成随机的验证码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.生成随机的数字</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radomNumber</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(<span class="number">9</span>-<span class="number">0</span>)+<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.生成随机的字母</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radomChar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(<span class="number">90</span>-<span class="number">65</span>)+<span class="number">65</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.随机选择数字需要几位</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radomFor</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(n-<span class="number">0</span>)+<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.合并数字和字母，生成验证码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radomCode</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> codeStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> numnum = <span class="title function_">radomFor</span>(num)<span class="comment">//需要多少个数字，便知道需要多少个字母</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; numnum ; i++)&#123;<span class="comment">//拼接数字</span></span><br><span class="line">        codeStr+=<span class="title function_">radomNumber</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ; j &lt; num-numnum ; j++)&#123;<span class="comment">//拼接字母</span></span><br><span class="line">        codeStr+=<span class="title function_">radomChar</span>()    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> codeStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">radomCode</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 字符串 </tag>
            
            <tag> charAt </tag>
            
            <tag> search </tag>
            
            <tag> concat </tag>
            
            <tag> match </tag>
            
            <tag> replace </tag>
            
            <tag> split </tag>
            
            <tag> substring </tag>
            
            <tag> substr </tag>
            
            <tag> trim </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM对象</title>
      <link href="/2023/06/06/TechnicalArticles/js/08.BOM%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/06/06/TechnicalArticles/js/08.BOM%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>BOM（Browser Object Mode）浏览器对象模型，是Javascript的重要组成部分。它提供了一系列对象用于与浏览器窗口进行交互，这些对象通常统称为BOM。</p><p>各内置对象之间按照某种层次组织起来的模型统称为Bom浏览器对象模型</p><hr><p><img src="/../../images/BOM(%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B).png" alt="BOM(浏览器对象模型)"></p><hr><p><img src="/../../images/image-20230215102627411.png" alt="image-20230215102627411"></p><hr><h3 id="BOM的共有对象"><a href="#BOM的共有对象" class="headerlink" title="BOM的共有对象"></a>BOM的共有对象</h3><ul><li>window 窗口对象（浏览器的global对象)</li><li>location 地址栏对象</li><li>history 历史对象</li><li>navigator 导航对象（浏览器信息对象)</li><li>screen 屏幕对象(适配)</li><li>frames 框架对象(其实也是个window)</li><li>document 文档对象</li></ul><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><p>window窗口对象，他是浏览器的global对象，他包含所有的全局变量。</p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li><p>caches 返回一个缓存对象 CacheStorage</p></li><li><p>closed 是否关闭（默认值为false）</p></li><li><p>cookieStore 存储cookie的空间</p></li><li><p>crossOriginIsolated  cors设置（跨域设置）</p></li><li><h6 id="innerHeight-窗口可操作区域的高度"><a href="#innerHeight-窗口可操作区域的高度" class="headerlink" title="innerHeight 窗口可操作区域的高度"></a>innerHeight 窗口可操作区域的高度</h6></li><li><h6 id="innerWidth-窗口可操作区域的宽度"><a href="#innerWidth-窗口可操作区域的宽度" class="headerlink" title="innerWidth 窗口可操作区域的宽度"></a>innerWidth 窗口可操作区域的宽度</h6></li><li><p>indexedDB 浏览器内置数据库对象</p></li><li><p>localStorage 本地存储</p></li><li><p>sessionStorage 他是session生命周期本地存储</p></li><li><p>chrome 谷歌内核的属性</p></li><li><p>console 控制台</p></li><li><h6 id="scrollX-滚动栏的坐标-scrollY-滚动栏的坐标"><a href="#scrollX-滚动栏的坐标-scrollY-滚动栏的坐标" class="headerlink" title="scrollX 滚动栏的坐标 scrollY 滚动栏的坐标"></a>scrollX 滚动栏的坐标 scrollY 滚动栏的坐标</h6></li><li><p>….</p></li></ul><p><strong>其他的所有对象都是window对象的属性 window可以被省略</strong></p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><h6 id="打印方法（控制台打印方法）"><a href="#打印方法（控制台打印方法）" class="headerlink" title="打印方法（控制台打印方法）"></a>打印方法（控制台打印方法）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制台打印方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;日志打印&#x27;</span>) <span class="comment">//日志打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误打印&#x27;</span>) <span class="comment">//错误打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;警告打印&#x27;</span>) <span class="comment">//警告打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;信息打印&#x27;</span>) <span class="comment">//信息打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">debug</span>(<span class="string">&#x27;调试打印&#x27;</span>) <span class="comment">//调试打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">group</span>(<span class="string">&#x27;分组打印&#x27;</span>) <span class="comment">//分组打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">table</span>(<span class="string">&#x27;表格打印&#x27;</span>) <span class="comment">//表格打印</span></span><br></pre></td></tr></table></figure><h6 id="弹框方法"><a href="#弹框方法" class="headerlink" title="弹框方法"></a>弹框方法</h6><ul><li>alert 弹信息框 没有返回值</li><li>prompt 弹输入框 有返回值返回值为输入的内容 （string）</li><li>confirm 弹选择框 有返回值 返回为boolean类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹窗</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">prompt</span>(<span class="string">&#x27;请输入内容&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">confirm</span>(<span class="string">&#x27;请问你是否是单身贵族&#x27;</span>))</span><br></pre></td></tr></table></figure><h6 id="打开窗口的方法-open"><a href="#打开窗口的方法-open" class="headerlink" title="打开窗口的方法 open"></a>打开窗口的方法 open</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openBtn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//打开的url路径地址  打开的方式(a标签的target一致)  打开时的配置(使用=号赋值 使用,号隔开)</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>,<span class="string">&#x27;_blank&#x27;</span>,<span class="string">&#x27;width=100,height=200,left=200,top=200&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="关闭窗口的方法-close-（只能关闭当前窗口）"><a href="#关闭窗口的方法-close-（只能关闭当前窗口）" class="headerlink" title="关闭窗口的方法 close （只能关闭当前窗口）"></a>关闭窗口的方法 close （只能关闭当前窗口）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;closeBtn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//打开的url路径地址  打开的方式(a标签的target一致)  打开时的配置(使用=号赋值 使用,号隔开)</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="改变窗口位置的方法"><a href="#改变窗口位置的方法" class="headerlink" title="改变窗口位置的方法"></a>改变窗口位置的方法</h6><ul><li>moveTo</li><li>moveBy</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//moveTo 给定实际坐标 moveBy 给定变化的距离</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveTo</span>(<span class="number">30</span>,<span class="number">30</span>) <span class="comment">//到达30,30的坐标</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveBy</span>(<span class="number">20</span>,<span class="number">20</span>) <span class="comment">//10 10 变成 30,30的坐标</span></span><br></pre></td></tr></table></figure><h6 id="改变窗口大小的方法"><a href="#改变窗口大小的方法" class="headerlink" title="改变窗口大小的方法"></a>改变窗口大小的方法</h6><ul><li>resizeTo</li><li>resizeBy</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//resizeTo 给定实际大小 resizeBy 在当前下发生变化</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeTo</span>(<span class="number">30</span>,<span class="number">30</span>) <span class="comment">//大小改为width 30 height 30大小</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeBy</span>(<span class="number">30</span>,<span class="number">30</span>) <span class="comment">//原本的width增加30 原本的height也增加30</span></span><br></pre></td></tr></table></figure><h6 id="改变的滚动栏位置的方法-（-）"><a href="#改变的滚动栏位置的方法-（-）" class="headerlink" title="改变的滚动栏位置的方法 （*）"></a>改变的滚动栏位置的方法 （*）</h6><ul><li>scrollTo</li><li>scrollBy</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;scrollToBtn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">300</span>,<span class="number">300</span>) <span class="comment">//滚动栏x轴到达30 y轴到达30</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">scrollX</span>,<span class="variable language_">window</span>.<span class="property">scrollY</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;scrollByBtn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollBy</span>(<span class="number">300</span>,<span class="number">300</span>) <span class="comment">//滚动栏x轴到达30 y轴到达30</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">scrollX</span>,<span class="variable language_">window</span>.<span class="property">scrollY</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="打印机功能调用-print打印方法-（-）"><a href="#打印机功能调用-print打印方法-（-）" class="headerlink" title="打印机功能调用 print打印方法 （*）"></a>打印机功能调用 print打印方法 （*）</h6><ul><li>print (打印的基础实现)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure><h6 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a>find 查找</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">find</span>()</span><br></pre></td></tr></table></figure><h6 id="窗口-foucs-获取焦点-blur-失去焦点"><a href="#窗口-foucs-获取焦点-blur-失去焦点" class="headerlink" title="窗口 foucs 获取焦点 blur 失去焦点"></a>窗口 foucs 获取焦点 blur 失去焦点</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">foucs</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">blur</span>()</span><br></pre></td></tr></table></figure><h6 id="setInterval-和-setTimeout"><a href="#setInterval-和-setTimeout" class="headerlink" title="setInterval 和 setTimeout"></a>setInterval 和 setTimeout</h6><h6 id="clearInterval-和-clearTimeout"><a href="#clearInterval-和-clearTimeout" class="headerlink" title="clearInterval 和  clearTimeout"></a>clearInterval 和  clearTimeout</h6><h6 id="fetch-发送一个异步请求-（-）"><a href="#fetch-发送一个异步请求-（-）" class="headerlink" title="fetch 发送一个异步请求 （*）"></a>fetch 发送一个异步请求 （*）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fetch 异步的请求 Axios的底层实现 （内核为xhr）</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="variable language_">window</span>.<span class="title function_">fetch</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h3 id="Location-（-）"><a href="#Location-（-）" class="headerlink" title="Location （*）"></a>Location （*）</h3><h5 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h5><p>location是地址栏对象，他可以获取地址栏上的所有信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_9664507230212976443%22%7D&amp;n_type=-1&amp;p_from=-1</span></span><br></pre></td></tr></table></figure><ul><li>https:&#x2F;&#x2F; 协议</li><li>mbd.baidu.com 域名（解析ip+端口号）</li><li>浏览器访问根据协议的不同指定不同的端口号 80端口http  443端口https</li><li>&#x2F;newspage&#x2F;data&#x2F;landingsuper 路径地址</li><li>?context&#x3D;%7B%22nid%22%3A%22news_9664507230212976443%22%7D&amp;n_type&#x3D;-1&amp;p_from&#x3D;-1 传递参数（get请求）</li></ul><h5 id="location的相关属性（都支持赋值）"><a href="#location的相关属性（都支持赋值）" class="headerlink" title="location的相关属性（都支持赋值）"></a>location的相关属性（都支持赋值）</h5><ul><li>hash 获取#后面携带的内容（#通常在最后面）</li><li>host  主机 ip地址+端口号</li><li>hostname 主机名 ip地址</li><li>href  url路径</li><li>port 端口号</li><li>pathname 路径名</li><li>search 获取?后面传递的参数</li><li>protocol 协议</li><li>origin 跨域地址</li><li>ancestorOrigins 获取倒序排列的文档对象及来源的浏览器上下文 （插件开发）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location)</span><br><span class="line"><span class="comment">//获取hash前面带#</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)</span><br><span class="line"><span class="comment">//默认自己添加#</span></span><br><span class="line">location.<span class="property">hash</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">host</span>)</span><br><span class="line"><span class="comment">//localhost == 127.0.0.1</span></span><br><span class="line"><span class="comment">//location.host = &quot;123.123.123.123:8080&quot; 一般不建议设置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hostname</span>)<span class="comment">//主机名其实就是个ip地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>)<span class="comment">//路径</span></span><br><span class="line"><span class="comment">// 跳转页面</span></span><br><span class="line"><span class="comment">// location.href = &#x27;http://www.baidu.com&#x27; //不会产生历史页面的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">origin</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">port</span>)</span><br><span class="line"><span class="comment">//获取?后的内容 里面的写法为key=value&amp;key=value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>)</span><br><span class="line">location.<span class="property">search</span> = <span class="string">&#x27;name=jack&amp;age=19&#x27;</span></span><br><span class="line"><span class="comment">//http（不安全 明文 80） 及 https （安全 加密 443（openssl（对称加密 非对称加密 hash加密等等） ））  超文本传输协议 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">protocol</span>)<span class="comment">//协议</span></span><br><span class="line"><span class="comment">//只读属性 返回的是一个domstringlist对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">ancestorOrigins</span>)</span><br></pre></td></tr></table></figure><h5 id="location的方法"><a href="#location的方法" class="headerlink" title="location的方法"></a>location的方法</h5><ul><li>assgin 跳转页面 （会产生历史页面）</li><li>replace 替换url跳转页面</li><li>reload 重新加载页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>).<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    location.<span class="title function_">assign</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同herf赋值</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>).<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    location.<span class="title function_">replace</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn3&#x27;</span>).<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    location.<span class="title function_">reload</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h6><p><a href="https://www.baidu.com/s?ie=UTF-8&wd=mdn&tn=15007414_dg">https://www.baidu.com/s?ie=UTF-8&amp;wd=mdn&amp;tn=15007414_dg</a> 解析这个url</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;https://www.baidu.com/s?ie=UTF-8&amp;wd=mdn&amp;tn=15007414 dg&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;https://baike.baidu.com/item/MDN/4216027?fr=aladdin&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> protocol<span class="comment">//协议: https:</span></span><br><span class="line">    <span class="keyword">let</span> host<span class="comment">//host:  www.baidu.com</span></span><br><span class="line">    <span class="keyword">let</span> hostname<span class="comment">//hostname: www.baidu.com</span></span><br><span class="line">    <span class="keyword">let</span> port<span class="comment">//port: &#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> origin<span class="comment">//origin: https://www.baidu.com</span></span><br><span class="line">    <span class="keyword">let</span> pathname<span class="comment">//pathname: /s</span></span><br><span class="line">    <span class="keyword">let</span> search<span class="comment">//search: ?ie=UTF-8&amp;wd=mdn&amp;tn=15007414 dg</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> index</span><br><span class="line">    <span class="keyword">let</span> index2 = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; url.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(url[i]==<span class="string">&#x27;/&#x27;</span> &amp;&amp; url[i+<span class="number">1</span>]==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//获取协议字段</span></span><br><span class="line">            protocol = url.<span class="title function_">slice</span>(<span class="number">0</span>,i)</span><br><span class="line">            index = i+<span class="number">1</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(url[i]==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                origin = url.<span class="title function_">slice</span>(<span class="number">0</span>,i)</span><br><span class="line">                index2.<span class="title function_">push</span>(i)</span><br><span class="line">                hostname = url.<span class="title function_">slice</span>(index+<span class="number">1</span>,index2[<span class="number">1</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(url[i]==<span class="string">&#x27;?&#x27;</span>)&#123;</span><br><span class="line">            pathname = url.<span class="title function_">slice</span>(index2[<span class="number">1</span>],i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;protocol: &#x27;</span>+protocol);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hostname: &#x27;</span>+hostname);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;origin: &#x27;</span>+origin);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pathname: &#x27;</span>+pathname);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取search</span></span><br><span class="line">    search = url.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;search:&#x27;</span>+search);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再次获取参数</span></span><br><span class="line">    <span class="keyword">let</span> params = search.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">ParamsObj</span> = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ; j &lt; params.<span class="property">length</span> ; j++)&#123;</span><br><span class="line">        <span class="title class_">ParamsObj</span>[params[j].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]] = params[j].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ParamsObj: &#x27;</span>,<span class="title class_">ParamsObj</span>);</span><br></pre></td></tr></table></figure><h3 id="history-（-）"><a href="#history-（-）" class="headerlink" title="history （*）"></a>history （*）</h3><h5 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h5><p>history对象是历史对象，他记录所有的历史页面。</p><h5 id="history的属性"><a href="#history的属性" class="headerlink" title="history的属性"></a>history的属性</h5><ul><li>length 历史页面个数（包含当前页面）</li><li>state 值 （默认值为null）</li><li>scrollRestoration 滚动恢复属性 （auto || manual）</li></ul><h5 id="history的方法"><a href="#history的方法" class="headerlink" title="history的方法"></a>history的方法</h5><ul><li>forward 前进</li><li>back 后退</li><li>go 去任意历史页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用的方法 前进 后退 任意跳转 事件会自动传递参数 参数叫event</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;forward&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    history.<span class="title function_">forward</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;back&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    history.<span class="title function_">back</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;go&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//0为区间 0是自己 1为前进 -1为后退</span></span><br><span class="line">    history.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pushstate 添加一个state（新增历史页面）</li><li>replacestate 替换state （不会新增历史页面）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pushstate&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//第一个参数为数据 state的数据值 第二个 unsend 常用值为&quot;&quot; 第三为url 改变的url</span></span><br><span class="line">    history.<span class="title function_">pushState</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&#x27;./location对象讲解.html&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(history.<span class="property">state</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(history.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;replacestate&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//第一个参数为数据 state的数据值 第二个 unsend 常用值为&quot;&quot; 第三为url 改变的url</span></span><br><span class="line">    history.<span class="title function_">replaceState</span>(<span class="string">&#x27;你好&#x27;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&#x27;./location对象讲解.html&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(history.<span class="property">state</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(history.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="pushstate及replacestate都会进行的操作"><a href="#pushstate及replacestate都会进行的操作" class="headerlink" title="pushstate及replacestate都会进行的操作"></a>pushstate及replacestate都会进行的操作</h6><p><strong>会影响state值 会改变url地址 但是不会跳转页面（页面不会刷新）</strong></p><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><h5 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h5><p>navigator他是属于浏览器的导航对象，里面包含浏览器的相关信息以及你的系统信息。</p><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><ul><li><h6 id="userAgent-用户信息"><a href="#userAgent-用户信息" class="headerlink" title="userAgent 用户信息"></a>userAgent 用户信息</h6></li><li><p>appName</p></li><li><p>appVersion</p></li><li><p>language (国际化)</p></li><li><p>…</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//携带 浏览器版本信息以及系统版本信息兼容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">userAgent</span>) <span class="comment">//用户相关信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appName</span>) <span class="comment">//应用名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">appVersion</span>)<span class="comment">//应用版本</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator.<span class="property">language</span>)<span class="comment">//语言</span></span><br></pre></td></tr></table></figure><h3 id="screen-屏幕"><a href="#screen-屏幕" class="headerlink" title="screen 屏幕"></a>screen 屏幕</h3><h5 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h5><p>用于屏幕相关信息 （适配  大屏可视化）</p><h5 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h5><ul><li>width 屏幕宽</li><li>height  屏幕高</li><li>availWidth 屏幕可视区宽度</li><li>availHeight  屏幕可视区高度</li><li>availLeft 屏幕可视区离左边的距离</li><li>availTop 屏幕可视区离上边的距离</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">width</span>)<span class="comment">//宽</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">height</span>)<span class="comment">//高</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">availHeight</span>) <span class="comment">//可视区高度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">availWidth</span>) <span class="comment">//可视区宽度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">availLeft</span>) <span class="comment">//可视区离左边的距离</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">availTop</span>) <span class="comment">//可视区离上边的距离</span></span><br></pre></td></tr></table></figure><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><h5 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h5><p>document是文档对象，他指代的是html整个文档。包含用于操作对应的html文档的相关内容。他是整个DOM里面最大的对象，他是属于BOM的。</p><h6 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h6><ul><li>body 获取body</li><li>forms 获取所有的表单</li><li>head 获取head</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">forms</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">head</span>)</span><br></pre></td></tr></table></figure><p><strong>BOM是路由的底层实现，所有的前端JS框架的路由底层都是BOM。</strong></p><h3 id="页面跳转的方式汇总"><a href="#页面跳转的方式汇总" class="headerlink" title="页面跳转的方式汇总"></a>页面跳转的方式汇总</h3><ul><li>location.replace()</li><li>location.assgin()</li><li>location.href</li><li>loaction &#x3D; location</li><li>history.go</li><li>history.forward </li><li>history.back</li></ul><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h3 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h3><p>根据不同的url地址来给你渲染不同的内容，路由主要分为俩种。前端路由，后端路由。</p><h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><h5 id="后端介绍"><a href="#后端介绍" class="headerlink" title="后端介绍"></a>后端介绍</h5><p>后端 主要提供数据的，以及对应的数据进行相关的业务处理。后端用到的语言主要java，php，node.js…</p><h5 id="后端路由-1"><a href="#后端路由-1" class="headerlink" title="后端路由"></a>后端路由</h5><h6 id="接口路由-（json格式-restful接口）"><a href="#接口路由-（json格式-restful接口）" class="headerlink" title="接口路由  （json格式  restful接口）"></a>接口路由  （json格式  restful接口）</h6><p>根据不同的接口返回不同的数据</p><h6 id="渲染路由-（ssr-服务器渲染-前后端不分离）"><a href="#渲染路由-（ssr-服务器渲染-前后端不分离）" class="headerlink" title="渲染路由 （ssr 服务器渲染 前后端不分离）"></a>渲染路由 （ssr 服务器渲染 前后端不分离）</h6><p>根据不同的url地址来渲染不同的页面 (后端服务器的压力大)</p><p><strong>优点</strong></p><p>利于seo （搜索引擎优化）</p><p>首页渲染速度快 （主页都是做ssr）</p><p><strong>缺点</strong></p><p>服务器压力大</p><p>维护不便</p><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>根据不同url地址来渲染不同的页面（浏览器解析）</p><h5 id="前端路由划分"><a href="#前端路由划分" class="headerlink" title="前端路由划分"></a>前端路由划分</h5><p>页面路由 （根据不同的url跳转不同的页面 （刷新操作））</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">href</span> = 地址</span><br><span class="line">location.<span class="title function_">assign</span>(<span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line">location.<span class="title function_">replace</span>(<span class="string">&#x27;地址&#x27;</span>)</span><br></pre></td></tr></table></figure><p>hash路由 （根据不同hash值渲染不同的内容 不刷新）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;location.hash = &#x27;hello&#x27;&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;location.hash = &#x27;byby&#x27;&quot;</span>&gt;</span>byby<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;context&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//监听事件 onhashchange</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hash = location.<span class="property">hash</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(hash==<span class="string">&#x27;#hello&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;context&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;context&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;byby&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>history路由 （根据不同的url来渲染不同的内容 不刷新）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.pushState(&#x27;&#x27;,&#x27;&#x27;,&#x27;./document.html&#x27;)&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.replaceState(&#x27;&#x27;,&#x27;&#x27;,&#x27;./histroy.html&#x27;)&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;context&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//监听事件 onpopstate</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//等待back 或者 go 或 forwad才触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onpopstate</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(location.<span class="property">href</span>.<span class="title function_">search</span>(<span class="string">&#x27;document&#x27;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;context&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;context&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;byby&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hash路由和history路由常用于SPA（单页应用程序）程序，不刷新页面也能实现视图的切换。所以对应的在vue或者react的路由底层设计中只有俩种模式一种为hash模式一种为history模式。这种程序一般运用在前后端分离的基础上。</p><h5 id="单页应用程序的优缺点"><a href="#单页应用程序的优缺点" class="headerlink" title="单页应用程序的优缺点"></a>单页应用程序的优缺点</h5><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><p>无刷新 减少了页面的回流（重新渲染）</p><p>业务更加清晰 代码结构更加明了</p><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><p>不利于seo</p><p><strong>所以为了解决单页应用不利于seo的问题出现了一个新的技术叫预渲染</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> history </tag>
            
            <tag> BOM </tag>
            
            <tag> window </tag>
            
            <tag> location </tag>
            
            <tag> navigator </tag>
            
            <tag> document </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日期对象</title>
      <link href="/2023/06/06/TechnicalArticles/js/07.%E6%97%A5%E6%9C%9F%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/06/06/TechnicalArticles/js/07.%E6%97%A5%E6%9C%9F%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Date ()是一个专门用来创建时间对象的，是一个复杂数据类型，具有读写属性</p><h3 id="Date-对象的创建"><a href="#Date-对象的创建" class="headerlink" title="Date 对象的创建"></a>Date 对象的创建</h3><h4 id="创建当前时间对象"><a href="#创建当前时间对象" class="headerlink" title="创建当前时间对象"></a>创建当前时间对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参数构造声明</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br></pre></td></tr></table></figure><h4 id="传入字符串作为参数"><a href="#传入字符串作为参数" class="headerlink" title="传入字符串作为参数"></a>传入字符串作为参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式不正确会出现invalid date</span></span><br><span class="line"><span class="keyword">let</span> date =  <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2000/2/13/ 10:33:10&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br></pre></td></tr></table></figure><h4 id="传递多个number类型的参数-如果超出自动向上递增"><a href="#传递多个number类型的参数-如果超出自动向上递增" class="headerlink" title="传递多个number类型的参数(如果超出自动向上递增)"></a>传递多个number类型的参数(如果超出自动向上递增)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建指定日期的时间对象，至少传递两个参数,分别是：年，月，日，时，分，秒，毫秒 需要注意的是这里的月是从0开始的// 如果输入的数字超出范围会自定进位</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2000</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br></pre></td></tr></table></figure><h4 id="通过时间戳创建"><a href="#通过时间戳创建" class="headerlink" title="通过时间戳创建"></a>通过时间戳创建</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1666666666666</span>)</span><br></pre></td></tr></table></figure><h3 id="Date-对象常用方法"><a href="#Date-对象常用方法" class="headerlink" title="Date 对象常用方法"></a>Date 对象常用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="title class_">Date</span>()                  <span class="comment">//返回当日的日期和时间</span></span><br><span class="line">myDate.<span class="title function_">getYear</span>();       <span class="comment">//获取当前年份(2位)</span></span><br><span class="line">myDate.<span class="title function_">getFullYear</span>();   <span class="comment">//获取完整的年份(4位,1970-????)</span></span><br><span class="line">myDate.<span class="title function_">getMonth</span>();      <span class="comment">//获取当前月份(0-11,0代表1月)</span></span><br><span class="line">myDate.<span class="title function_">getDate</span>();       <span class="comment">//获取当前日(1-31)</span></span><br><span class="line">myDate.<span class="title function_">getDay</span>();        <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></span><br><span class="line">myDate.<span class="title function_">getTime</span>();       <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></span><br><span class="line">myDate.<span class="title function_">getHours</span>();      <span class="comment">//获取当前小时数(0-23)</span></span><br><span class="line">myDate.<span class="title function_">getMinutes</span>();    <span class="comment">//获取当前分钟数(0-59)</span></span><br><span class="line">myDate.<span class="title function_">getSeconds</span>();    <span class="comment">//获取当前秒数(0-59)</span></span><br><span class="line">myDate.<span class="title function_">getMilliseconds</span>();       <span class="comment">//获取当前毫秒数(0-999)</span></span><br><span class="line">myDate.<span class="title function_">toLocaleDateString</span>();    <span class="comment">//获取当前日期</span></span><br><span class="line">myDate.<span class="title function_">toLocaleTimeString</span>();    <span class="comment">//获取当前时间</span></span><br><span class="line">myDate.<span class="title function_">toLocaleString</span>( );       <span class="comment">//获取日期与时间</span></span><br></pre></td></tr></table></figure><p><strong>小练习</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设计一个函数返回一个时间n天后的时间,以YYYY-mm-dd hh:MM:ss显示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">returnDays</span>(<span class="params">date, days</span>) &#123;</span><br><span class="line">    date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>()+days)</span><br><span class="line">    <span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span> &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>) : (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> day = date.<span class="title function_">getDate</span>() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + date.<span class="title function_">getDate</span>() : date.<span class="title function_">getDate</span>()</span><br><span class="line">    <span class="keyword">let</span> time = date.<span class="title function_">getHours</span>() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + date.<span class="title function_">getHours</span>() : date.<span class="title function_">getHours</span>()</span><br><span class="line">    <span class="keyword">let</span> minutes = date.<span class="title function_">getMinutes</span>() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + date.<span class="title function_">getMinutes</span>() : date.<span class="title function_">getMinutes</span>()</span><br><span class="line">    <span class="keyword">let</span> seconds = date.<span class="title function_">getSeconds</span>() &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + date.<span class="title function_">getSeconds</span>() : date.<span class="title function_">getSeconds</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;time&#125;</span>:<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">returnDays</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">7</span>));</span><br></pre></td></tr></table></figure><h3 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 Object"></a>对象 Object</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>在ECMA-262中把对象定义为：“无序属性的集合，其属性可以包含基本值、对象、或者函数。”严格来说，这就是相当于说对象是一组没有特定序列的值。对象的每一个属性或方法都有一个名字，而每一个名字都映射到一个值</p><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><h5 id="1-字面量的形式创建"><a href="#1-字面量的形式创建" class="headerlink" title="1.字面量的形式创建"></a>1.字面量的形式创建</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;luolulu&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params">toWho</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello~&#x27;</span>+toWho)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-通过new-object创建对象"><a href="#2-通过new-object创建对象" class="headerlink" title="2.通过new object创建对象"></a>2.通过new object创建对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();<span class="comment">//创建一个空数组对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//创建一个空时间对象  </span></span><br></pre></td></tr></table></figure><h4 id="对象属性的增删改查"><a href="#对象属性的增删改查" class="headerlink" title="对象属性的增删改查"></a>对象属性的增删改查</h4><h5 id="属性的访问"><a href="#属性的访问" class="headerlink" title="属性的访问"></a>属性的访问</h5><ul><li>对象名.属性名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;luolulu&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params">toWho</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello~&#x27;</span>+toWho)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)</span><br></pre></td></tr></table></figure><ul><li>对象名[属性名字符串]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;luolulu&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params">toWho</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello~&#x27;</span>+toWho)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1[<span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><h5 id="属性的添加"><a href="#属性的添加" class="headerlink" title="属性的添加"></a>属性的添加</h5><ul><li>直接赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;</span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><h5 id="属性的修改"><a href="#属性的修改" class="headerlink" title="属性的修改"></a>属性的修改</h5><ul><li>直接修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><h5 id="属性的删除"><a href="#属性的删除" class="headerlink" title="属性的删除"></a>属性的删除</h5><ul><li>delete关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name : <span class="string">&#x27;names&#x27;</span>,</span><br><span class="line">    ages : <span class="string">&#x27;ages&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> obj1.<span class="property">name</span></span><br><span class="line"><span class="keyword">delete</span> obj1[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br></pre></td></tr></table></figure><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><h4 id="一、this原理"><a href="#一、this原理" class="headerlink" title="一、this原理"></a>一、this原理</h4><p>this是JavaScript的一个关键字，函数调用时才会出现；<br>因为函数是在一定的环境中运行的，调用函数时肯定需要知道是[谁调用的]？就用到了this进行指向；<br>那么this到底指向的是什么？<br>this 既不指向函数自身，也不指函数的词法<strong>作用域</strong>，而是调用函数时的<strong>对象</strong>！</p><h4 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h4><h5 id="普通函数的调用，this指向的是Window"><a href="#普通函数的调用，this指向的是Window" class="headerlink" title="普通函数的调用，this指向的是Window"></a>普通函数的调用，this指向的是Window</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cat</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;有鱼&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);<span class="comment">//卡卡</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cat</span>();</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>这里大家可能有疑问，不是说this指向的是调用函数的对象吗？cat()并没有对象出现啊，这个是因为在全局作用域中，window是根目录，一般可以省略，例如：alert()其实是 window.alert();</p><h5 id="对象的方法，this指的是该对象"><a href="#对象的方法，this指的是该对象" class="headerlink" title="对象的方法，this指的是该对象"></a>对象的方法，this指的是该对象</h5><p>1、一层作用域链时，this指的该对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;卡卡&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;有鱼&#x27;</span>,</span><br><span class="line">  <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);<span class="comment">//有鱼</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure><h3 id="window-对象的两个函数"><a href="#window-对象的两个函数" class="headerlink" title="window 对象的两个函数"></a>window 对象的两个函数</h3><h4 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval() 定时器"></a>setInterval() 定时器</h4><p><strong>写法</strong></p><ul><li>以匿名函数的形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：所执行的代码 ；参数2：执行的间隔时间(可省略) ；参数3：传递给参数一的参数(可省略)</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h4 id="setTimeout-延时器"><a href="#setTimeout-延时器" class="headerlink" title="setTimeout() 延时器"></a>setTimeout() 延时器</h4><p><strong>写法</strong></p><ul><li>以匿名函数的形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：所执行的代码 ；参数2：执行的间隔时间(可省略) ；参数3：传递给参数一的参数(可省略)</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="返回指定时间到现在的时间差"><a href="#返回指定时间到现在的时间差" class="headerlink" title="返回指定时间到现在的时间差"></a>返回指定时间到现在的时间差</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeDistance</span>(<span class="params">tnums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> time1 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">    <span class="keyword">let</span> time2 = <span class="keyword">new</span> <span class="title class_">Date</span>(tnums).<span class="title function_">getTime</span>()</span><br><span class="line">    <span class="keyword">let</span> td = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(time1 - time2))</span><br><span class="line">    <span class="keyword">let</span> days = <span class="built_in">parseInt</span>(td / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">let</span> hours = <span class="built_in">parseInt</span>(td / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>)</span><br><span class="line">    <span class="keyword">let</span> minutes = <span class="built_in">parseInt</span>(td / <span class="number">1000</span> / <span class="number">60</span> % <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">let</span> seconds = <span class="built_in">parseInt</span>(td / <span class="number">1000</span> % <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;days&#125;</span>天/<span class="subst">$&#123;hours&#125;</span>时/<span class="subst">$&#123;minutes&#125;</span>分/<span class="subst">$&#123;seconds&#125;</span>秒)`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">timeDistance</span>(<span class="string">&#x27;2023-2-11 11:11:11&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="定时器案例"><a href="#定时器案例" class="headerlink" title="定时器案例"></a>定时器案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;定时器案例&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .time &#123;</span><br><span class="line">            font-size: 24px;</span><br><span class="line">            color: red;</span><br><span class="line">            margin: 30px;</span><br><span class="line">            margin-left: 60px;</span><br><span class="line">            display: block;</span><br><span class="line">            background-color: rgb(255, 255, 182);</span><br><span class="line">            width: 120px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;span class=&quot;time&quot;&gt;00:00:00&lt;/span&gt;</span><br><span class="line">    &lt;button class=&quot;btn&quot;&gt;点击开始&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn2&quot;&gt;点击暂停&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn3&quot;&gt;点击重置&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let time = document.querySelector(&#x27;.time&#x27;)</span><br><span class="line">        let btn = document.querySelector(&#x27;.btn&#x27;)</span><br><span class="line">        let btn2 = document.querySelector(&#x27;.btn2&#x27;)</span><br><span class="line">        let btn3 = document.querySelector(&#x27;.btn3&#x27;)</span><br><span class="line">        let timer//定时器</span><br><span class="line">        //开始计时</span><br><span class="line">        btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">            let h = 0;</span><br><span class="line">            let m = 0;</span><br><span class="line">            let s = 0;</span><br><span class="line">            let timeStr = &#x27;&#x27;</span><br><span class="line">            timer = setInterval(function () &#123;</span><br><span class="line">                s++</span><br><span class="line">                if (s &gt;= 60) &#123;</span><br><span class="line">                    m++</span><br><span class="line">                    s = 0</span><br><span class="line">                &#125;</span><br><span class="line">                if (m &gt;= 60) &#123;</span><br><span class="line">                    h++</span><br><span class="line">                    m = 0</span><br><span class="line">                &#125;</span><br><span class="line">                timeStr = `$&#123;addZero(h)&#125;:$&#123;addZero(m)&#125;:$&#123;addZero(s)&#125;`</span><br><span class="line">                time.innerHTML = timeStr</span><br><span class="line">                console.log(timeStr);</span><br><span class="line">            &#125;, 1000)</span><br><span class="line">        &#125;)</span><br><span class="line">        //暂停操作</span><br><span class="line">        btn2.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">            clearInterval(timer)</span><br><span class="line">        &#125;)</span><br><span class="line">        //重置操作</span><br><span class="line">        btn3.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">            timeStr = &#x27;00:00:00&#x27;</span><br><span class="line">            time.innerHTML = timeStr</span><br><span class="line">            clearInterval(timer)</span><br><span class="line">        &#125;)</span><br><span class="line">        //个位数时，给十位数补0</span><br><span class="line">        function addZero(num) &#123;</span><br><span class="line">            if (num &lt; 10) &#123;</span><br><span class="line">                return &#x27;0&#x27; + num</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                return num</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="活动倒计时"><a href="#活动倒计时" class="headerlink" title="活动倒计时"></a>活动倒计时</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;活动倒计时&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;示例输入：2023-2-16 11:11:11&lt;/p&gt;</span><br><span class="line">    &lt;span class=&quot;times&quot; style=&quot;border:1px solid red&quot;&gt;倒计时：00天00时00分00秒&lt;/span&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;ipt&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;btn&quot;&gt;开始倒计时&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //个位数时，给十位数补0</span><br><span class="line">        function addZero(num) &#123;</span><br><span class="line">            if (num &lt; 10) &#123;</span><br><span class="line">                return &#x27;0&#x27; + num</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                return num</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function timeDistance(tnums) &#123;</span><br><span class="line">            let time1 = new Date().getTime()</span><br><span class="line">            let time2 = new Date(tnums).getTime()</span><br><span class="line">            let td = parseInt(Math.abs(time1 - time2))</span><br><span class="line">            let days = addZero(parseInt(td / 1000 / 60 / 60 / 24))</span><br><span class="line">            let hours = addZero(parseInt(td / 1000 / 60 / 60 % 60))</span><br><span class="line">            let minutes = addZero(parseInt(td / 1000 / 60 % 60))</span><br><span class="line">            let seconds = addZero(parseInt(td / 1000 % 60))</span><br><span class="line">            return `倒计时：$&#123;days&#125;天/$&#123;hours&#125;时/$&#123;minutes&#125;分/$&#123;seconds&#125;秒`</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        let times = document.querySelector(&#x27;.times&#x27;)</span><br><span class="line">        let ipt = document.querySelector(&#x27;.ipt&#x27;)</span><br><span class="line">        let btn = document.querySelector(&#x27;.btn&#x27;)</span><br><span class="line">        let timer</span><br><span class="line">        btn.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">            let targetTime = ipt.value</span><br><span class="line">            clearInterval(timer)</span><br><span class="line">            timer = setInterval(function()&#123;</span><br><span class="line">                times.innerHTML = timeDistance(targetTime)</span><br><span class="line">            &#125;,1000)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .container&#123;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            border:1px dashed #ccc;</span><br><span class="line">            margin-bottom: 30px;</span><br><span class="line">        &#125;</span><br><span class="line">        .jdt&#123;</span><br><span class="line">            width: 0px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            transition: .1s ease-in;</span><br><span class="line">            color: #000;</span><br><span class="line">            line-height: 80px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;进度条&lt;/h2&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;jdt&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button class=&quot;btn&quot;&gt;开始加载&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn2&quot;&gt;暂停&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;btn3&quot;&gt;开始卸载&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    let jdt = document.querySelector(&#x27;.jdt&#x27;)</span><br><span class="line">    let btn = document.querySelector(&#x27;.btn&#x27;)</span><br><span class="line">    let btn2 = document.querySelector(&#x27;.btn2&#x27;)</span><br><span class="line">    let btn3 = document.querySelector(&#x27;.btn3&#x27;)</span><br><span class="line"></span><br><span class="line">    let timer</span><br><span class="line">    let count = 0</span><br><span class="line">    btn.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">        timer = setInterval(function()&#123;</span><br><span class="line">            count+=1</span><br><span class="line">            jdt.style.width = count +&#x27;%&#x27;</span><br><span class="line">            jdt.innerHTML = count +&#x27;%&#x27;</span><br><span class="line">            if(count &gt; 100)&#123;</span><br><span class="line">                count = 100</span><br><span class="line">                jdt.innerHTML =&#x27;加载完毕&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,100)</span><br><span class="line">    &#125;)</span><br><span class="line">    btn2.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">    &#125;)</span><br><span class="line">    btn3.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">        clearInterval(timer)</span><br><span class="line">        timer = setInterval(function()&#123;</span><br><span class="line">            count-=1</span><br><span class="line">            jdt.style.width = count +&#x27;%&#x27;</span><br><span class="line">            jdt.innerHTML = count +&#x27;%&#x27;</span><br><span class="line">            if(count &lt;= 0)&#123;</span><br><span class="line">                count = 0</span><br><span class="line">                jdt.innerHTML =&#x27; &#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,100)</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> window </tag>
            
            <tag> 日期对象 </tag>
            
            <tag> Date </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM对象</title>
      <link href="/2023/06/06/TechnicalArticles/js/09.DOM%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/06/06/TechnicalArticles/js/09.DOM%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h3 id="DOM概述"><a href="#DOM概述" class="headerlink" title="DOM概述"></a>DOM概述</h3><p>DOM 文档对象模型(document object model) 主要是用于操作html文档及相关内容（css）。对于文档的操作会造成浏览器的重新渲染（重绘（改变的一个元素的显示内容及部分样式） 重排（改变一个元素的位置及大小尺寸）（回流）重绘不一定重排 重排必定发生重绘）</p><h3 id="DOM具备的内容"><a href="#DOM具备的内容" class="headerlink" title="DOM具备的内容"></a>DOM具备的内容</h3><ul><li><strong>document</strong> （属于BOM）文档对象</li><li><strong>rootElement</strong> （根元素）</li><li><strong>element</strong> （所有的标签都是element）</li><li><strong>attribute</strong> （所有标签的属性都是attribute）</li><li><strong>text</strong> （所有标签内容的文本都是text）</li></ul><p><img src="/../../images/image-20230216114907264.png" alt="image-20230216114907264"></p><h5 id="从上的包含关系可以看出大的内容可以获取或操作包含的内容也就是"><a href="#从上的包含关系可以看出大的内容可以获取或操作包含的内容也就是" class="headerlink" title="从上的包含关系可以看出大的内容可以获取或操作包含的内容也就是"></a>从上的包含关系可以看出大的内容可以获取或操作包含的内容也就是</h5><ul><li>document可以获取rootElement</li><li>document可以获取element</li><li>element可以获取里面的element</li><li>element可以获取里面attribute以及text</li></ul><h3 id="获取元素相关的操作-document和element都有的方法"><a href="#获取元素相关的操作-document和element都有的方法" class="headerlink" title="获取元素相关的操作 document和element都有的方法"></a>获取元素相关的操作 document和element都有的方法</h3><ul><li>getElementById 通过id来获取元素  （元素 element）</li><li>getElementsByClassName  通过classname获取所有的符合的元素 （伪数组）</li><li>getElementsByTagName 通过标签名获取所有符合的元素 （伪数组）</li><li>getElementsByName 通过name属性来获取符合的元素 （伪数组）</li><li>querySelector 通过传入选择器来获取符合的第一个元素 （元素 element）</li><li>querySelectorAll 通过传入选择器获取符合的所有元素 （伪数组）</li><li>所有跟上面一致后面带NS表示命名空间获取查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素的方式</span></span><br><span class="line"><span class="comment">// 通过id获取div</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>))<span class="comment">//传入一个id名返回一个元素（htmlElement）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;context&#x27;</span>))<span class="comment">//传入一个class名返回 HTMLCollection 伪数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>))<span class="comment">//传入一个标签名返回HTMLCollection</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hello&#x27;</span>))<span class="comment">//传入一个name属性名返回NodeList 伪数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.context&#x27;</span>)) <span class="comment">//根据选择器获取匹配的第一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#box&#x27;</span>)) <span class="comment">//根据选择器获取所有匹配的 返回NodeList 伪数组</span></span><br><span class="line"><span class="comment">//通过id为box的div获取里面的a标签</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="comment">//document获取根元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">document</span>.<span class="title function_">getRootNode</span>())</span><br></pre></td></tr></table></figure><p><strong>伪数组具备下标的特性及length属性 但是不具备数组的方法</strong></p><h3 id="element操作attribute"><a href="#element操作attribute" class="headerlink" title="element操作attribute"></a>element操作attribute</h3><h5 id="getAttribute-获取属性值的方法-setAttribute-设置属性的方法"><a href="#getAttribute-获取属性值的方法-setAttribute-设置属性的方法" class="headerlink" title="getAttribute 获取属性值的方法 setAttribute 设置属性的方法"></a>getAttribute 获取属性值的方法 setAttribute 设置属性的方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line"><span class="comment">//使用getAttribute函数来获取属性值</span></span><br><span class="line"><span class="keyword">var</span> value = element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>) <span class="comment">//根据属性名获取属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line"><span class="comment">//getAttribute相匹配的setAttribute</span></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;number&#x27;</span>,<span class="string">&#x27;10&#x27;</span>)<span class="comment">//设置属性number值为10</span></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;number&#x27;</span>,<span class="string">&#x27;20&#x27;</span>)<span class="comment">//修改属性number为20</span></span><br></pre></td></tr></table></figure><h5 id="getAttributeNode-获取属性对象-setAttributeNode-设置属性对象"><a href="#getAttributeNode-获取属性对象-setAttributeNode-设置属性对象" class="headerlink" title="getAttributeNode 获取属性对象  setAttributeNode 设置属性对象"></a>getAttributeNode 获取属性对象  setAttributeNode 设置属性对象</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取单个的属性节点 及 设置对应的属性节点</span></span><br><span class="line"><span class="keyword">var</span> obj = element.<span class="title function_">getAttributeNode</span>(<span class="string">&#x27;class&#x27;</span>) <span class="comment">//返回的是一个属性对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">value</span>)</span><br><span class="line"><span class="comment">//传入一个Attr对象 进行设置</span></span><br><span class="line"><span class="comment">// element.setAttributeNode()</span></span><br></pre></td></tr></table></figure><h5 id="获取所有的属性名-getAttributeNames"><a href="#获取所有的属性名-getAttributeNames" class="headerlink" title="获取所有的属性名 getAttributeNames"></a>获取所有的属性名 getAttributeNames</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> attrNames = element.<span class="title function_">getAttributeNames</span>() <span class="comment">//返回所有的属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrNames)</span><br></pre></td></tr></table></figure><h5 id="attributes-属性-（属于element的属性）"><a href="#attributes-属性-（属于element的属性）" class="headerlink" title="attributes 属性 （属于element的属性）"></a>attributes 属性 （属于element的属性）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用attributes来获取所有的属性对象 伪数组 NameNodeMap</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">attributes</span>)</span><br><span class="line"><span class="comment">// console.log(element.attributes)</span></span><br><span class="line"><span class="comment">//访问对应的class属性对象</span></span><br><span class="line"><span class="comment">//利用下标访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">attributes</span>[<span class="number">2</span>])<span class="comment">//Attribute对象</span></span><br><span class="line"><span class="comment">//利用key来访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">attributes</span>[<span class="string">&#x27;class&#x27;</span>].<span class="property">value</span>)</span><br><span class="line"><span class="comment">//Attribute对象里面的属性值的访问使用value属性方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">attributes</span>[<span class="number">2</span>].<span class="property">value</span>)<span class="comment">//class的属性值</span></span><br><span class="line"><span class="comment">//NameNodeMap里面对应的属性的增删改查</span></span><br><span class="line"><span class="keyword">var</span> attrs = element.<span class="property">attributes</span></span><br><span class="line"><span class="comment">//查询 getNamedItem item</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrs.<span class="title function_">getNamedItem</span>(<span class="string">&#x27;class&#x27;</span>).<span class="property">value</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrs.<span class="title function_">item</span>(<span class="number">2</span>).<span class="property">value</span>)</span><br><span class="line"><span class="comment">//修改 添加是一样的方法</span></span><br><span class="line">attrs[<span class="number">0</span>].<span class="property">value</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment">// attrs.setNamedItem() 传递一个Attr对象来进行修改或者添加</span></span><br><span class="line"><span class="comment">//删除方法</span></span><br><span class="line">attrs.<span class="title function_">removeNamedItem</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="element都具备的属性-（直接赋值或者获取）"><a href="#element都具备的属性-（直接赋值或者获取）" class="headerlink" title="element都具备的属性 （直接赋值或者获取）"></a>element都具备的属性 （直接赋值或者获取）</h5><ul><li><p>id</p></li><li><p>className</p></li><li><p>tagName</p></li><li><p>titile</p></li><li><p>style</p></li><li><p>innerHTML 显示的html代码 和 innerText 显示的文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">innerHTML</span>) <span class="comment">//直接获取里面所有的html代码 赋值的时候会自动识别html代码(xss攻击)</span></span><br><span class="line">box.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;font color=&quot;red&quot;&gt;hahahah&lt;/font&gt;&#x27;</span></span><br><span class="line"><span class="comment">// console.log(box.innerText) //只会获取文本 不会识别html代码</span></span><br><span class="line">box.<span class="property">innerText</span> = <span class="string">&#x27;&lt;font color=&quot;red&quot;&gt;hahahah&lt;/font&gt;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>对于本身自带的属性可以直接点的形式来进行获取或者赋值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于element元素本身自带的属性 可以直接设置 a标签本身自带href input标签本身自带value属性</span></span><br><span class="line"><span class="comment">//通过直接点出来的形式进行设置和获取</span></span><br><span class="line"><span class="comment">// id class style 标签名  title</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">id</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">className</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">style</span>) <span class="comment">//返回一个样式对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">tagName</span>) <span class="comment">//标签名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">title</span>) <span class="comment">//标签名</span></span><br><span class="line"><span class="comment">//对于标签本身不自带的属性 出现的值为undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">hi</span>)</span><br><span class="line">box.<span class="property">id</span> = <span class="string">&#x27;box&#x27;</span></span><br><span class="line">box.<span class="property">className</span> = <span class="string">&#x27;context&#x27;</span></span><br><span class="line"><span class="comment">//直接设置a标签的href属性</span></span><br><span class="line">element.<span class="property">href</span> = <span class="string">&#x27;http://www.bilibili.com&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="元素内样式的操作"><a href="#元素内样式的操作" class="headerlink" title="元素内样式的操作"></a>元素内样式的操作</h3><h5 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h5><h6 id="style-返回一个样式对象-通过样式对象-样式名来获取"><a href="#style-返回一个样式对象-通过样式对象-样式名来获取" class="headerlink" title="style 返回一个样式对象 通过样式对象.样式名来获取"></a>style 返回一个样式对象 通过样式对象.样式名来获取</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取样式</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//第一种方式 使用style属性进行获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>) <span class="comment">//返回的是一个对象 样式对象 里面包含的对应的样式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>[<span class="number">0</span>]) <span class="comment">//获取style里面包含的样式 fontsize样式名 (如果不是内嵌的样式 那么使用style属性无法获取)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>.<span class="property">fontSize</span>)<span class="comment">//获取style属性中包含的fontSize的样式值</span></span><br><span class="line"><span class="comment">//如果要获取style属性中包含样式（内嵌的样式）那么使用element.style.样式名（使用驼峰命名）</span></span><br><span class="line"><span class="comment">//但是这种获取方式无法获取外联样式及内联样式 只能获取内嵌</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">style</span>.<span class="property">color</span>)</span><br></pre></td></tr></table></figure><h6 id="getComputedStyle-返回一个样式对象-通过样式对象-样式名来获取"><a href="#getComputedStyle-返回一个样式对象-通过样式对象-样式名来获取" class="headerlink" title="getComputedStyle 返回一个样式对象 通过样式对象.样式名来获取"></a>getComputedStyle 返回一个样式对象 通过样式对象.样式名来获取</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种获取方式 通过对应的方法来进行获取 (兼容问题)</span></span><br><span class="line"><span class="comment">//第一个参数需要被获取的元素 这个返回的style里面是有内置的默认值的 如果你设置的样式他就会覆盖这个默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(div))<span class="comment">//属于window的方法 返回的是样式对象 他可以获取所有的样式 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(div).<span class="property">position</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(div).<span class="property">color</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(div).<span class="property">fontSize</span>)</span><br></pre></td></tr></table></figure><p>存在兼容问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//兼容问题解决</span></span><br><span class="line"><span class="comment">//兼容问题 ie的</span></span><br><span class="line"><span class="comment">// element.currentStyle</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyle</span>(<span class="params">ele,name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> getComputedStyle?<span class="title function_">getComputedStyle</span>(ele)[name]:ele.<span class="property">currentStyle</span>[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h5><h6 id="style来进行设置"><a href="#style来进行设置" class="headerlink" title="style来进行设置"></a>style来进行设置</h6><p>优点</p><ul><li>可以单独对于某一个样式进行精确控制</li></ul><p>缺点</p><ul><li>每次只能设置一个样式</li><li>他会发生多次重绘和重排 （效率低）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置样式</span></span><br><span class="line"><span class="comment">// 第一种方式 (每次设置只能设置一个)</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">fontWeight</span> = <span class="number">700</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;40px&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="通过指定class名字来设置"><a href="#通过指定class名字来设置" class="headerlink" title="通过指定class名字来设置"></a>通过指定class名字来设置</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种设置通过class名字来设置(一次性可以设置多个样式)</span></span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;font&#x27;</span></span><br></pre></td></tr></table></figure><p>优点</p><ul><li>可以一次性设置多个样式</li><li>只会发生一次重绘和重排 （效率高）</li></ul><p>缺点</p><ul><li>没有办法做到随意更改</li></ul><h3 id="创建对应的内容"><a href="#创建对应的内容" class="headerlink" title="创建对应的内容"></a>创建对应的内容</h3><ul><li>创建元素 createElement</li><li>创建属性 createAttribute</li><li>创建文本 createTextNode</li><li>创建片段 createDocumentFragment</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建元素</span></span><br><span class="line"><span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">//传入标签</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ele)</span><br><span class="line"><span class="comment">//创建属性</span></span><br><span class="line"><span class="keyword">var</span> attr = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;href&#x27;</span>)<span class="comment">//传入属性名 通过value来进行赋值</span></span><br><span class="line">attr.<span class="property">value</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attr)</span><br><span class="line"><span class="comment">//将attr和ele联系在一块 建议使用setAttribute</span></span><br><span class="line">ele.<span class="title function_">setAttributeNode</span>(attr)</span><br><span class="line"><span class="comment">//创建文本节点 传入对应的文本内容</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line"><span class="comment">//appenChild 建议使用innerText</span></span><br><span class="line">ele.<span class="title function_">appendChild</span>(text) <span class="comment">//将文本添加到元素中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ele)</span><br><span class="line"><span class="comment">//创建片段</span></span><br><span class="line"><span class="comment">// document.createDocumentFragment</span></span><br></pre></td></tr></table></figure><h3 id="节点相关操作"><a href="#节点相关操作" class="headerlink" title="节点相关操作"></a>节点相关操作</h3><p>节点主要分为三类 分别为</p><ul><li>元素节点 （element）</li><li>属性节点 （attribute）</li><li>文本节点  （textNode）</li></ul><h4 id="关于节点的属性"><a href="#关于节点的属性" class="headerlink" title="关于节点的属性"></a>关于节点的属性</h4><ul><li>nodeType 节点类型</li><li>nodeName 节点名</li><li>nodeValue 节点值</li></ul><table><thead><tr><th>节点名</th><th>nodeType</th><th>nodeName</th><th>nodeValue</th></tr></thead><tbody><tr><td>元素节点</td><td>1</td><td>标签名</td><td>null</td></tr><tr><td>属性节点</td><td>2</td><td>属性名</td><td>属性值</td></tr><tr><td>文本节点</td><td>3</td><td>#text</td><td>文本值</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">//传入标签</span></span><br><span class="line"><span class="comment">//创建属性</span></span><br><span class="line"><span class="keyword">var</span> attr = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&#x27;href&#x27;</span>)<span class="comment">//传入属性名 通过value来进行赋值</span></span><br><span class="line">attr.<span class="property">value</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line"><span class="comment">//创建文本节点 传入对应的文本内容</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ele.<span class="property">nodeType</span>)<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">nodeType</span>)<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="property">nodeType</span>)<span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ele.<span class="property">nodeName</span>)<span class="comment">//标签名 大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ele.<span class="property">tagName</span>)<span class="comment">//标签名 大写 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">nodeName</span>)<span class="comment">//属性名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="property">nodeName</span>)<span class="comment">//#text</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ele.<span class="property">nodeValue</span>)<span class="comment">//null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">nodeValue</span>)<span class="comment">//属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="property">nodeValue</span>)<span class="comment">//文本值</span></span><br></pre></td></tr></table></figure><h4 id="节点操作的方法"><a href="#节点操作的方法" class="headerlink" title="节点操作的方法"></a>节点操作的方法</h4><h5 id="节点的添加"><a href="#节点的添加" class="headerlink" title="节点的添加"></a>节点的添加</h5><ul><li>append 追加到后面（支持追加多个）</li><li>appendChild （追加到最后）</li><li>insertBefor （插入到某个子元素之前）</li><li>insertAdjacentHTML （插入html）</li><li>insertAdjacentText  (插入文本）</li><li>insertAdjacentElement （插入元素）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ele = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">//传入标签</span></span><br><span class="line"><span class="keyword">var</span> ele1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>) <span class="comment">//传入标签</span></span><br><span class="line"><span class="comment">//将a标签添加到div中</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line"><span class="comment">//追加子元素 在后面添加</span></span><br><span class="line">box.<span class="title function_">appendChild</span>(ele)</span><br><span class="line"><span class="comment">//插入到b的前面 第一个参数是需要插入的元素 第二个参数是子元素</span></span><br><span class="line"><span class="comment">//不允许重复插入同一元素 插入同一元素只会改变位置</span></span><br><span class="line">box.<span class="title function_">insertBefore</span>(ele,box.<span class="title function_">querySelector</span>(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="comment">//append追加</span></span><br><span class="line"><span class="comment">//  box.append(ele)</span></span><br><span class="line"><span class="comment">//  box.append(ele,ele1) //支持追加多个</span></span><br><span class="line">box.<span class="title function_">append</span>(<span class="string">&#x27;&lt;b&gt;hello&lt;/b&gt;&#x27;</span>)<span class="comment">//如果传入的是string类型 他会当作文本节点插入</span></span><br><span class="line"><span class="comment">//插入对应元素的</span></span><br><span class="line"><span class="comment">//传入俩个参数 位置 内容</span></span><br><span class="line"><span class="comment">// 位置字符串 beforeBegin afterBegin 开始 beforeend aterend 结尾</span></span><br><span class="line">box.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;afterbegin&quot;</span>,<span class="string">&#x27;&lt;header&gt;hahahah&lt;/header&gt;&#x27;</span>) <span class="comment">//插入html</span></span><br><span class="line">box.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeBegin&quot;</span>,<span class="string">&#x27;&lt;header&gt;hahahah&lt;/header&gt;&#x27;</span>) <span class="comment">//插入html</span></span><br><span class="line">box.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeend&quot;</span>,<span class="string">&#x27;&lt;header&gt;hahahah&lt;/header&gt;&#x27;</span>) <span class="comment">//插入html</span></span><br><span class="line">box.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;afterend&quot;</span>,<span class="string">&#x27;&lt;header&gt;hahahah&lt;/header&gt;&#x27;</span>) <span class="comment">//插入html</span></span><br><span class="line"><span class="comment">// box.insertAdjacentText() //插入文本 </span></span><br><span class="line">box.<span class="title function_">insertAdjacentText</span>(<span class="string">&quot;afterend&quot;</span>,<span class="string">&#x27;&lt;header&gt;hahahah&lt;/header&gt;&#x27;</span>) <span class="comment">//插入文本</span></span><br><span class="line"><span class="comment">// box.insertAdjacentElement() //插入元素</span></span><br><span class="line">box.<span class="title function_">insertAdjacentElement</span>(<span class="string">&quot;beforeBegin&quot;</span>,<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;footer&#x27;</span>)) </span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul><li>remove 移除本身</li><li>removeChild 传入对应的子节点进行删除</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//remove移除自身的所有</span></span><br><span class="line"><span class="comment">// box.remove()</span></span><br><span class="line"><span class="comment">// removeChild删除子元素</span></span><br><span class="line">box.<span class="title function_">removeChild</span>(box.<span class="title function_">querySelector</span>(<span class="string">&#x27;b&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><ul><li>replaceChild 替换子节点</li><li>replaceChildren 替换所有的子节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换子节点 用于替换的节点 子节点</span></span><br><span class="line">box.<span class="title function_">replaceChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>),box.<span class="title function_">querySelector</span>(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="comment">//替换所有的子节点 replaceChildren</span></span><br><span class="line">box.<span class="title function_">replaceChildren</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>),<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;文本&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="克隆节点-（返回新的节点）"><a href="#克隆节点-（返回新的节点）" class="headerlink" title="克隆节点 （返回新的节点）"></a>克隆节点 （返回新的节点）</h5><ul><li>cloneNode 返回一个新的节点传入一个boolean类型的值是否深度克隆</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cloneNode 传入一个boolean类型的值 是否深度克隆 默认值为false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( box.<span class="title function_">cloneNode</span>()) <span class="comment">//只会克隆自身 里面的内容不会进行克隆</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( box.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)) <span class="comment">//会克隆所有的内容</span></span><br></pre></td></tr></table></figure><h5 id="判断是否存在子节点"><a href="#判断是否存在子节点" class="headerlink" title="判断是否存在子节点"></a>判断是否存在子节点</h5><ul><li>hasChildNodes 是否存在某节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否存在子节点 (不包含属性节点)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">hasChildNodes</span>())</span><br></pre></td></tr></table></figure><h4 id="判断是否存在属性的相关方法"><a href="#判断是否存在属性的相关方法" class="headerlink" title="判断是否存在属性的相关方法"></a>判断是否存在属性的相关方法</h4><ul><li>hasAttribute 判断是否存在指定属性</li><li>hasAttributes 判断是否存在属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">hello</span>=<span class="string">&quot;你好&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//判断是否存在指定属性（必须声明） 返回值boolean</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;hello&#x27;</span>))<span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;id&#x27;</span>))<span class="comment">//false</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="节点的关系-（关系查询）（只读属性）"><a href="#节点的关系-（关系查询）（只读属性）" class="headerlink" title="节点的关系 （关系查询）（只读属性）"></a>节点的关系 （关系查询）（只读属性）</h4><h5 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h5><ul><li>childNodes 获取所有的子节点 </li><li>children 获取所有的子元素节点</li><li>firstChild 获取第一个子节点</li><li>firstElementChild 获取第一个子元素节点</li><li>lastChild 获取最后一个节点</li><li>lastElementChild 获取最后一个子元素节点</li><li>parentNode 父节点</li><li>parentElement 父元素节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取子节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">childNodes</span>)<span class="comment">//所有的子节点 NodeList 包含空文本节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">childNodes</span>.<span class="property">length</span>)<span class="comment">//所有的子节点的个数</span></span><br><span class="line"><span class="comment">//获取所有的子元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">children</span>)<span class="comment">//所有的子元素节点 HTMLCollection</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">children</span>.<span class="property">length</span>)</span><br><span class="line"><span class="comment">//获取第一个子节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">firstChild</span>)</span><br><span class="line"><span class="comment">//获取第一个元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">firstElementChild</span>)</span><br><span class="line"><span class="comment">//获取最后一个子节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">lastChild</span>)</span><br><span class="line"><span class="comment">//获取最后一个元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">lastElementChild</span>)</span><br><span class="line"><span class="comment">//获取父节点 parent</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">parentNode</span>) <span class="comment">//父节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">parentElement</span>) <span class="comment">//父元素</span></span><br></pre></td></tr></table></figure><h5 id="兄弟关系"><a href="#兄弟关系" class="headerlink" title="兄弟关系"></a>兄弟关系</h5><ul><li>previousSibling 前一个节点</li><li>previousElementSibling 前一个元素节点</li><li>nextSibling 后一个节点</li><li>nextElementSibling 后一个元素节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//兄弟关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousSibling</span>) <span class="comment">//前面兄弟节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousElementSibling</span>) <span class="comment">//前面的兄弟元素节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextSibling</span>) <span class="comment">//后面兄弟节点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextElementSibling</span>) <span class="comment">//后面的兄弟元素节点</span></span><br></pre></td></tr></table></figure><h4 id="去除空文本节点"><a href="#去除空文本节点" class="headerlink" title="去除空文本节点"></a>去除空文本节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeEmptyTextNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">//去除所有的空文本节点  删除</span></span><br><span class="line">    <span class="keyword">var</span> childs = node.<span class="property">childNodes</span> <span class="comment">//获取所有的子节点</span></span><br><span class="line">    <span class="comment">//遍历 伪数组实现了迭代iterator 可以被for of遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> child <span class="keyword">of</span> childs) &#123;</span><br><span class="line">        <span class="comment">//找到所有的空文本节点</span></span><br><span class="line">        <span class="keyword">if</span> (child.<span class="property">nodeType</span> == <span class="number">3</span> &amp;&amp; child.<span class="property">nodeValue</span>.<span class="title function_">trim</span>() == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            child.<span class="title function_">remove</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> document </tag>
            
            <tag> DOM </tag>
            
            <tag> element </tag>
            
            <tag> 节点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie以及本地存储</title>
      <link href="/2023/06/06/TechnicalArticles/js/12.Cookie/"/>
      <url>/2023/06/06/TechnicalArticles/js/12.Cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="day13-Cookie"><a href="#day13-Cookie" class="headerlink" title="day13 Cookie"></a>day13 Cookie</h1><h3 id="计算机重要的四个内容"><a href="#计算机重要的四个内容" class="headerlink" title="计算机重要的四个内容"></a>计算机重要的四个内容</h3><ul><li><p>数据结构</p><p>数据存储的结构及其逻辑的体现，以及相关数据结构之间的操作（算法）</p></li><li><p>操作系统</p><p>windows （dos命令） 、  linux （指令操作）</p></li><li><p>计算组成原理</p><p>冯诺伊曼  （主板 cpu 内存条 显卡 硬盘）</p></li><li><p>计算机网络</p><p>网络通信就是指代一台计算机到利用传播介质传播到另一台计算机的数据通信过程。</p></li></ul><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><h5 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h5><p>计算机网络主要概述的是一台一台计算机到利用传播介质传播到另一台计算机的数据传输过程。</p><h5 id="主要的内容"><a href="#主要的内容" class="headerlink" title="主要的内容"></a>主要的内容</h5><ul><li>网络应用   宽带拨号软件</li><li>传播介质   网线  wifi </li><li>协议</li></ul><h5 id="网络模型图"><a href="#网络模型图" class="headerlink" title="网络模型图"></a>网络模型图</h5><p><img src="/../../images/image-20230222191906632.png" alt="image-20230222191906632"></p><ul><li><p>物理层 硬件支持</p></li><li><p>数据链路层 数据传输的接口规范</p></li><li><p>网络层 网络通信</p><p>ip协议  ip4 ip6 （DNS分配）</p></li><li><p>传输层 主要协议支持</p><p>TCP   一对一传输 （必须建立连接）</p><p>UDP  丢包的形式 （可以一对多 多对多 多对一）</p></li><li><p>（应用层 会话层 表示层）应用层相关的内容  （应用层相关协议都是来于对应底层的支持）</p></li></ul><h5 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h5><p>TCP 必须建立连接 （只能1对1）他是以字节流的形式发送数据的 他的报文头有20个字节</p><p>UDP 不一定建立连接  通过发送数据报包的形式发送数据 他的报文头只有8个字节</p><p>UDP 更快</p><h5 id="应用层相关的协议"><a href="#应用层相关的协议" class="headerlink" title="应用层相关的协议"></a>应用层相关的协议</h5><p>http 、https  超文本传输协议</p><ul><li>http 使用明文传输</li><li>https 使用密文传输 （ssl进行加密 采用了对称加密及非对称加密 为了安全还提供对应的CA证书）</li></ul><p>http有版本差距 http1 http2（http1和http2的区别）</p><ul><li>http1以文件传输形式进行传输 （一个请求要有一个连接）</li><li>http2以流的形式进行传输 （多路复用 一个连接支持多个请求 同域名下只有一个连接）</li></ul><h3 id="http的讲解"><a href="#http的讲解" class="headerlink" title="http的讲解"></a>http的讲解</h3><h5 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h5><p>http 称为超文本传输协议，一般用于网络传输（一般是对应的数据交互），一般交互的数据为JSON格式数据（字符串）、xml（类似于html）。http是基于tcp之上的协议。</p><h5 id="数据交互的过程-（tcp-三次握手-四次挥手）"><a href="#数据交互的过程-（tcp-三次握手-四次挥手）" class="headerlink" title="数据交互的过程 （tcp 三次握手 四次挥手）"></a>数据交互的过程 （tcp 三次握手 四次挥手）</h5><h6 id="建立连接的过程-称为三次握手"><a href="#建立连接的过程-称为三次握手" class="headerlink" title="建立连接的过程 称为三次握手"></a>建立连接的过程 称为三次握手</h6><ul><li>客户端先发送一个信息 告诉他我要建立连接</li><li>服务端接收到 我已经准备好了</li><li>客户端收到  那么来建立连接</li></ul><p><img src="/../../images/image-20230222191930956.png" alt="image-20230222191930956"></p><h6 id="断开连接的过程-称为四次挥手"><a href="#断开连接的过程-称为四次挥手" class="headerlink" title="断开连接的过程 称为四次挥手"></a>断开连接的过程 称为四次挥手</h6><ul><li>客户端发送断开连接请求</li><li>服务端接收到断开连接请求</li><li>服务端断开连接</li><li>客户端断开连接</li></ul><p><img src="/../../images/image-20230222191944208.png" alt="image-20230222191944208"></p><h5 id="http的对应的特性"><a href="#http的对应的特性" class="headerlink" title="http的对应的特性"></a>http的对应的特性</h5><ul><li>无状态 (当前a发送一个请求到b b接收到以后不知道是a 没有记忆能力无法发送请求的人)</li><li>无连接 （请求发送完建立连接以后会立马断开）</li><li>长连接 短连接 </li><li>…</li></ul><h5 id="解决对应的无状态问题"><a href="#解决对应的无状态问题" class="headerlink" title="解决对应的无状态问题"></a>解决对应的无状态问题</h5><ul><li>主要是通过对应的session（存储在服务端上的）来解决的，每个连接的建立都会存在一个对应的<strong>sessionId</strong> 这个sessionId是由<strong>服务端派发给对应的浏览器</strong>的。连接断开以后对应的sessionId就不在了，为了解决这个问题他就是sessionId存储在浏览器上，<strong>每次请求都会带上这个sessionId（cookie）</strong>。<strong>在浏览器用于存储sessionId容器就叫cookie</strong>。如果我对应的服务器关闭那么对应的存储sessionId就没有意义了，所以cookie也就没有了意义。那么cookie既然存储在对应的浏览器上那么对应的他不应该被销毁，那么时间一长对应的cookie就会越来越大，这点来说对我们是不好的。所以为了避免这点他将我们的cookie和session的生命周期做了绑定也就是说<strong>默认情况下对应的cookie的生命周期和session的生命周期是一样的</strong>。session的生命周期是连接一断开他就销毁了。（<strong>浏览器一关闭就销毁cookie session）</strong></li></ul><h3 id="cookie讲解"><a href="#cookie讲解" class="headerlink" title="cookie讲解"></a>cookie讲解</h3><h4 id="cookie的结构"><a href="#cookie的结构" class="headerlink" title="cookie的结构"></a>cookie的结构</h4><p>cookie里面存储的内容是一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cookie的名字 name cookie的值 value</span></span><br><span class="line"><span class="comment">//expires 过期时间 如果没有设置默认情况 浏览器关闭就是销毁 如果设置了那么在对应的时间就会销毁</span></span><br><span class="line"><span class="comment">//domain 跨域的地址设置</span></span><br><span class="line"><span class="comment">//path 什么路径下才携带cookie</span></span><br><span class="line"><span class="comment">//secure 是否为https</span></span><br><span class="line">name=value;expires=<span class="title class_">Date</span>;domain=地址;path=路径;secure</span><br></pre></td></tr></table></figure><h4 id="cookie访问"><a href="#cookie访问" class="headerlink" title="cookie访问"></a>cookie访问</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">//显示的过程中只会显示 对应的 name=value</span></span><br><span class="line"><span class="comment">//cookie的添加</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`name=张三;expires=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>;domain=http://127.0.0.1;path=/hello;secure`</span></span><br></pre></td></tr></table></figure><h4 id="cookie的操作方法"><a href="#cookie的操作方法" class="headerlink" title="cookie的操作方法"></a>cookie的操作方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加cookie  修改</span></span><br><span class="line"><span class="comment">//name  value 传入一个option 设置对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addCookie</span>(<span class="params">name,value,option</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!name)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> cookieStr = <span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">  <span class="comment">//判断option中是否存在对应的配置</span></span><br><span class="line">  <span class="comment">//instanceof 检索引用数据类型的类型</span></span><br><span class="line">  <span class="keyword">if</span>(option)&#123;</span><br><span class="line">    <span class="keyword">if</span>(option.<span class="property">expires</span> <span class="keyword">instanceof</span> <span class="title class_">Date</span>)&#123;</span><br><span class="line">      cookieStr += <span class="string">`;expires=<span class="subst">$&#123;option.expires&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(option.<span class="property">domain</span>)&#123;</span><br><span class="line">      cookieStr += <span class="string">`;domain=<span class="subst">$&#123;option.domain&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(option.<span class="property">path</span>)&#123;</span><br><span class="line">      cookieStr += <span class="string">`;path=<span class="subst">$&#123;option.path&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(option.<span class="property">secure</span>)&#123;</span><br><span class="line">      cookieStr += <span class="string">&#x27;;secure&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = cookieStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">//过期时间设置为当前时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeCookie</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="title function_">addCookie</span>(name,<span class="literal">null</span>,&#123;</span><br><span class="line">    <span class="attr">expires</span>:<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装对应的获取所有的cookie方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookieValue</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> cookieStr = <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line">  <span class="keyword">var</span> cookie = &#123;&#125;</span><br><span class="line">  <span class="comment">//分号分割</span></span><br><span class="line">  <span class="keyword">var</span> cookieStrArr = cookieStr.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> str <span class="keyword">of</span> cookieStrArr)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = str.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    cookie[arr[<span class="number">0</span>]] = arr[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cookie[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三方的cookie-js库（vue2的cookie里引入cookie-js）"><a href="#第三方的cookie-js库（vue2的cookie里引入cookie-js）" class="headerlink" title="第三方的cookie.js库（vue2的cookie里引入cookie.js）"></a>第三方的cookie.js库（vue2的cookie里引入cookie.js）</h4><ul><li>set 设置</li><li>get 获取</li><li>remove 删除</li><li>clear 清除所有</li><li>all 打印所有的cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cookie.<span class="title function_">set</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookie.<span class="title function_">get</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">cookie.<span class="title function_">remove</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">cookie.<span class="title function_">clear</span>() <span class="comment">// 清理所有cookie</span></span><br><span class="line">cookie.<span class="title function_">all</span>()</span><br></pre></td></tr></table></figure><p><a href="https://toscode.gitee.com/jaywcjlove/cookie.js/">https://toscode.gitee.com/jaywcjlove/cookie.js/</a></p><h4 id="cookie的特性"><a href="#cookie的特性" class="headerlink" title="cookie的特性"></a>cookie的特性</h4><ul><li>cookie 随请求发送 （每次请求都会携带cookie）</li><li>cookie 存储在浏览器上 默认的生命周期为session（浏览器关闭就销毁）</li><li>cookie 设置持久化是利用对应的expires属性来设置对应的持久化时间</li><li>cookie 的大小只有4k左右 （浏览器不同他就不同）</li><li>cookie 里面存在的数据都是字符串</li><li>cookie 可以跨域携带 （domain）</li><li>cookie 不安全 （被篡改 被伪造 ）</li></ul><h4 id="localStorage-sessionStorage-本地存储"><a href="#localStorage-sessionStorage-本地存储" class="headerlink" title="localStorage sessionStorage 本地存储"></a>localStorage sessionStorage 本地存储</h4><h5 id="对应的方法"><a href="#对应的方法" class="headerlink" title="对应的方法"></a>对应的方法</h5><ul><li>setItem 设置元素 key ： value</li><li>getItem 获取元素 key</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能存字符串</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="localStorage和sessionStorage存储时间的区别"><a href="#localStorage和sessionStorage存储时间的区别" class="headerlink" title="localStorage和sessionStorage存储时间的区别"></a>localStorage和sessionStorage存储时间的区别</h5><p>localStorage 关闭浏览器数据依然存在 sessionStorage 浏览器关闭数据就会被清除</p><h5 id="localStorage-、-sessionStorage-及-cookie的区别"><a href="#localStorage-、-sessionStorage-及-cookie的区别" class="headerlink" title="localStorage 、 sessionStorage 及 cookie的区别"></a>localStorage 、 sessionStorage 及 cookie的区别</h5><h6 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h6><ul><li>cookie会随请求发送 localStorage 、 sessionStorage  不会随请求发送</li><li>cookie只有4kb左右 localStorage一般是4-10MB（5MB）</li><li>cookie存储的位置localStorage 、 sessionStorage存储的位置不一致</li><li>cookie（可以跨域存储） 不能存储复杂的数据 localStorage 、 sessionStorage</li><li>sessionStorage 默认浏览器关闭销毁 cookie默认跟session一样通过expires来设置过期时间 localStorage永久（手动删除）</li></ul><h6 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h6><ul><li>都是存在浏览器上的 （容易被篡改）</li><li>都是以字符串的形式进行存储的</li></ul><h3 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h3><p>JSON格式是一种数据交互格式，一般后台给我们返回的都是json格式的字符串，但是在js中可以将json格式的字符串变为对象。</p><h5 id="交互图-（主要JSON格式数据进行交互）"><a href="#交互图-（主要JSON格式数据进行交互）" class="headerlink" title="交互图 （主要JSON格式数据进行交互）"></a>交互图 （主要JSON格式数据进行交互）</h5><p><img src="https://img1.baidu.com/it/u=1809329098,3829964884&fm=253&fmt=auto&app=138&f=PNG?w=500&h=294" alt="img"></p><ul><li>后端主要提供数据 （数据处理（业务）三层模型）</li><li>前端主要是负责渲染 （部分业务前移  三层模型（业务分离））</li><li>后端给我们返回JSON格式字符串 前端进行解析成对象、然后进行数据渲染</li></ul><h5 id="主要表现形式-数组和对象可以多级嵌套"><a href="#主要表现形式-数组和对象可以多级嵌套" class="headerlink" title="主要表现形式 (数组和对象可以多级嵌套)"></a>主要表现形式 (数组和对象可以多级嵌套)</h5><ul><li>对象 {}</li><li>数组 []</li></ul><h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;<span class="attr">likes</span>:[&#123;<span class="attr">name</span>:<span class="string">&#x27;苹果&#x27;</span>,<span class="attr">price</span>:<span class="number">50</span>&#125;],<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="comment">//获取苹果的价格</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">likes</span>[<span class="number">0</span>].<span class="property">price</span>)</span><br><span class="line"><span class="keyword">var</span> jsonArr = [&#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>&#125;]</span><br><span class="line"><span class="comment">//获取王五</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonArr[<span class="number">2</span>].<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h5 id="练习（将歌词解析处理-然后进行相关的渲染）"><a href="#练习（将歌词解析处理-然后进行相关的渲染）" class="headerlink" title="练习（将歌词解析处理  然后进行相关的渲染）"></a>练习（将歌词解析处理  然后进行相关的渲染）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;sgc&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;sfy&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;qfy&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;lrc&quot;</span>:&#123;<span class="string">&quot;version&quot;</span>:<span class="number">11</span>,<span class="string">&quot;lyric&quot;</span>:<span class="string">&quot;[00:00.000] 作词 : 陈思宇/谈晓珍/潘瑛\n[00:00.746] 作曲 : Lee Yong Min/Hwang Se Joon\n[00:01.492]Rap词：MC HAN韩勇\n[00:10.985]RAP：\n[00:11.705]Ya boy MC HAN\n[00:14.454]我弹的钢琴都是为了你弹\n[00:16.577]弹了那么久还是觉得浪漫\n[00:19.434]我弹的时候能听到你在唱\n[00:21.412]感觉上你在这\n[00:22.580]跟我一起说话\n[00:23.964]一天到晚　我不停地想\n[00:26.197]You’re all that I think of\n[00:27.826]You’re all that I want\n[00:28.929]跟你一起总是让我特别开心\n[00:31.190]不论发生什么事我永远爱你\n[00:33.716]如果你突然打了个喷嚏　那一定就是我在想你\n[00:38.058]如果半夜被手机吵醒　啊那是因为我关心\n[00:42.620]常常想你说的话是不是别有用心\n[00:47.463]明明很想相信　却又忍不住怀疑\n[00:52.558]在你的心里　我是否就是唯一　爱就是有我常烦着你\n[01:01.420]Ho Baby　情话多说一点　想我就多看一眼\n[01:07.028]表现多一点点　让我能　真的看见\n[01:11.363]Oh Bye　少说一点　想陪你不止一天\n[01:16.430]多一点　让我　心甘情愿　爱你\n[01:35.835]喜欢在你的臂弯里胡闹　你的世界是一座城堡\n[01:40.409]在大头贴画满心号　贴在手机上对你微笑\n[01:45.169]常常想我说的话你是否听得进去\n[01:50.040]明明很想生气　却又止不住笑意\n[01:54.734]Oh Oh 在我的心里 你真的就是唯一　爱就是有我常赖着你\n[02:03.785]Ho Baby　情话多说一点　想我就多看一眼\n[02:09.130]表现多一点点　让我能　真的看见\n[02:14.255]Oh Bye　少说一点　想陪你不止一天\n[02:18.766]多一点　让我　心甘情愿　爱你\n[02:23.603]就这样　一天多一点　慢慢地累积感觉\n[02:28.811]两人的世界　就能够贴近一点\n[02:37.339]Ho Baby　情话多说一点　想我就多看一眼\n[02:42.969]表现多一点点　让我能　真的看见\n[02:47.728]Oh Bye　少说一点　想陪你不止一天\n[02:52.449]多一点　让我　心甘情愿　爱你\n[02:57.118]Ho Baby　情话多说一点　想我就多看一眼\n[03:02.191]表现多一点点　让我能　真的看见\n[03:06.923]Oh Bye　少说一点　想陪你不止一天\n[03:11.429]多一点　让我　心甘情愿　爱你\n[03:16.584]多一点　才会慢慢发现　因为你　让我心甘情愿\n[03:26.227]（OT：Nae Yae Gil Eo Bwa）\n&quot;</span>&#125;,<span class="string">&quot;tlyric&quot;</span>:&#123;<span class="string">&quot;version&quot;</span>:<span class="number">0</span>,<span class="string">&quot;lyric&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,<span class="string">&quot;code&quot;</span>:<span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="对象转为JSON格式字符串（序列化）"><a href="#对象转为JSON格式字符串（序列化）" class="headerlink" title="对象转为JSON格式字符串（序列化）"></a>对象转为JSON格式字符串（序列化）</h4><h5 id="JSON这个类是帮助我们来处理JSON格式数据的-里面提供对应的序列化及反序列化方法"><a href="#JSON这个类是帮助我们来处理JSON格式数据的-里面提供对应的序列化及反序列化方法" class="headerlink" title="JSON这个类是帮助我们来处理JSON格式数据的 里面提供对应的序列化及反序列化方法"></a>JSON这个类是帮助我们来处理JSON格式数据的 里面提供对应的序列化及反序列化方法</h5><h6 id="JSON-stringify-将对应的对象转为json格式的字符串"><a href="#JSON-stringify-将对应的对象转为json格式的字符串" class="headerlink" title="JSON.stringify 将对应的对象转为json格式的字符串"></a>JSON.stringify 将对应的对象转为json格式的字符串</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//toString 转为的字符串有问题 默认形式的转换字符串用的就是toString</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()) <span class="comment">//[object object]</span></span><br><span class="line"><span class="comment">//利用序列化方法来完成转换成json格式字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br></pre></td></tr></table></figure><h4 id="JSON格式字符串转为对象（反序列化）"><a href="#JSON格式字符串转为对象（反序列化）" class="headerlink" title="JSON格式字符串转为对象（反序列化）"></a>JSON格式字符串转为对象（反序列化）</h4><h6 id="JSON-parse-将对应的字符串转为对象"><a href="#JSON-parse-将对应的字符串转为对象" class="headerlink" title="JSON.parse 将对应的字符串转为对象"></a>JSON.parse 将对应的字符串转为对象</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将对应的字符串转为对象 反序列化方法</span></span><br><span class="line"><span class="comment">//eval 方法也能转换 执行里面的js （不安全 会直接执行里面的函数）</span></span><br><span class="line"><span class="comment">// console.log(eval(str))</span></span><br><span class="line"><span class="comment">//JSON.parse JSON格式字符串必须是双引号修饰的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)) <span class="comment">//传入对应的字符串 返回一个对象 </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> Cookie </tag>
            
            <tag> localStorage </tag>
            
            <tag> sessionStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件(上)</title>
      <link href="/2023/06/06/TechnicalArticles/js/10.%E4%BA%8B%E4%BB%B6(%E4%B8%8A)/"/>
      <url>/2023/06/06/TechnicalArticles/js/10.%E4%BA%8B%E4%BB%B6(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>事件是指，一个东西的操作被另外一个东西监听以后的过程（事件）</p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul><li>事件源：哪一个元素需要发生动态改变</li><li>事件类型：指标签执行的一系列静态页面的操作行为</li><li>事件处理程序：对此事件触发的处理</li></ul><h3 id="绑定事件的几种模式"><a href="#绑定事件的几种模式" class="headerlink" title="绑定事件的几种模式"></a>绑定事件的几种模式</h3><h4 id="内联模式"><a href="#内联模式" class="headerlink" title="内联模式"></a>内联模式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此时调用者是window --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(this)&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 弹窗输出window --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="脚本模式"><a href="#脚本模式" class="headerlink" title="脚本模式"></a>脚本模式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>)<span class="comment">//btn是个对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//此时onclick，相当于btn的属性</span></span></span><br><span class="line"><span class="language-javascript">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="variable language_">this</span>)<span class="comment">//此时this输出的是btn对象</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内联模式和脚本模式的区别"><a href="#内联模式和脚本模式的区别" class="headerlink" title="内联模式和脚本模式的区别"></a>内联模式和脚本模式的区别</h4><p>内联模式相等于属性赋值里面的代码是window对象帮你执行，而对应的脚本模式里面的this执行当前的调用元素</p><h3 id="事件的分类（事件名）"><a href="#事件的分类（事件名）" class="headerlink" title="事件的分类（事件名）"></a>事件的分类（事件名）</h3><h4 id="鼠标事件（mouse）"><a href="#鼠标事件（mouse）" class="headerlink" title="鼠标事件（mouse）"></a>鼠标事件（mouse）</h4><p>-<br>  click 点击事件</p><ul><li>dblclick 双击事件</li><li>mousedown 鼠标按下事件</li><li>mouseup 鼠标抬起事件（一次click包含一次mousedown和一次mouseup）</li><li>mouseenter 鼠标移入事件</li><li>mouseleave 鼠标移出事件</li><li>mouseover 鼠标进入事件（会触发事件冒泡，子元素的over out事件也会触发事件）</li><li>mouseout  鼠标离开事件</li><li>mousemove 鼠标移动事件</li><li>contextmenu 鼠标右击事件</li></ul><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul><li>keydown 键盘按下</li><li>keyup 键盘抬起</li><li>keypress 非功能键按下（只要按下就会触发）</li></ul><h4 id="window事件"><a href="#window事件" class="headerlink" title="window事件"></a>window事件</h4><ul><li>load 页面中所有资源都被加载完毕的时候</li><li>unload 窗口卸载</li><li>close 窗口关闭</li><li>beforeunload 在卸载之前触发</li><li>scroll 页面的卷动</li><li>hashchange hash值发生变化时触发</li><li>resize 大小发生变化</li></ul><h4 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h4><ul><li><p>focus 当一个元素获取到焦点时</p></li><li><p>blur 当一个元素失去焦点时</p></li></ul><h4 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h4><ul><li>touchstart 触摸开始事件 会在手指按下的时候触发</li><li>touchmove  触摸并移动 会在手指按下并移动的时候触发</li><li>touchend  触摸结束事件 会在手指离开的时候触发</li></ul><h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><ul><li>input 输入框输入事件</li><li>change value值发送变化事件</li><li>select 内容被选中触发事件</li><li>reset 表单重置事件</li><li>submit 表单提交事件</li></ul><h4 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h4><ul><li>animationstart 动画开始时触发 </li><li>animationend  动画结束时触发</li><li>transitionend  过渡结束时触发</li></ul><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>event是一个事件源对象，他包含了事件触发过程的内容，以及对应的元素内容。他会默认传入给对应事件的处理函数。</p><h4 id="event对象的相关属性"><a href="#event对象的相关属性" class="headerlink" title="event对象的相关属性"></a>event对象的相关属性</h4><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">type</td><td align="left">触发事件的类型</td></tr><tr><td align="left">target</td><td align="left">触发的目标元素</td></tr><tr><td align="left">currentTarget</td><td align="left">当前的事件元素</td></tr><tr><td align="left">pagex pageY</td><td align="left">获取当前鼠标在页面上的位置(包含滚动栏位置)</td></tr><tr><td align="left">clientx clientY</td><td align="left">获取当前鼠标在可视区的位置(不包含滚动栏)</td></tr><tr><td align="left">offsetx offsetY</td><td align="left">获取当前鼠标在目标元素上的位置</td></tr><tr><td align="left">screenX screenY</td><td align="left">获取当前鼠标在屏幕上的位置</td></tr><tr><td align="left">altKey shiftKey ctrlKey</td><td align="left">是否按下对应的功能键</td></tr><tr><td align="left">cancelBubble</td><td align="left">取消冒泡</td></tr><tr><td align="left">bubbles</td><td align="left">是否执行对应的默认行为</td></tr><tr><td align="left">returnValue</td><td align="left">是否执行对应的默认行为</td></tr></tbody></table><h4 id="event属性相关的位移图解"><a href="#event属性相关的位移图解" class="headerlink" title="event属性相关的位移图解"></a>event属性相关的位移图解</h4><p><img src="/../../images/xy.png" alt="img" title="位移图解"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> event </tag>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS事件(下)</title>
      <link href="/2023/06/06/TechnicalArticles/js/11.%E4%BA%8B%E4%BB%B6(%E4%B8%8B)/"/>
      <url>/2023/06/06/TechnicalArticles/js/11.%E4%BA%8B%E4%BB%B6(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<h1 id="day12-事件下"><a href="#day12-事件下" class="headerlink" title="day12 事件下"></a>day12 事件下</h1><h3 id="事件流的传播流程"><a href="#事件流的传播流程" class="headerlink" title="事件流的传播流程"></a>事件流的传播流程</h3><p>事件流的传播有三个阶段</p><ul><li>捕获阶段</li><li>目标阶段</li><li>冒泡阶段</li></ul><h3 id="事件流的俩种模式"><a href="#事件流的俩种模式" class="headerlink" title="事件流的俩种模式"></a>事件流的俩种模式</h3><h4 id="冒泡模式-（从里到外-逐层执行对应的事件）"><a href="#冒泡模式-（从里到外-逐层执行对应的事件）" class="headerlink" title="冒泡模式 （从里到外 逐层执行对应的事件）"></a>冒泡模式 （从里到外 逐层执行对应的事件）</h4><p>冒泡模式是常用的模式，他现在默认设计的就是冒泡模式。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(2)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">5</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以上的这个示例 会从button开始不断向上执行 直到window停止 所以对应的执行结果为 2 1 3 4 5</li></ul><p>如果我们不想触发对应的外层的事件 只是想触发本身的事件 那么我们就需要禁止事件冒泡了</p><h5 id="禁止事件冒泡的处理"><a href="#禁止事件冒泡的处理" class="headerlink" title="禁止事件冒泡的处理"></a>禁止事件冒泡的处理</h5><h6 id="stopPropagation-（event对象的方法-对于低版本ie浏览器不支持）"><a href="#stopPropagation-（event对象的方法-对于低版本ie浏览器不支持）" class="headerlink" title="stopPropagation （event对象的方法 对于低版本ie浏览器不支持）"></a>stopPropagation （event对象的方法 对于低版本ie浏览器不支持）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">//事件源对象</span></span><br><span class="line">    e = e || <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">    <span class="comment">//禁止事件冒泡的方法</span></span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="cancelBubble-（event对象的属性）"><a href="#cancelBubble-（event对象的属性）" class="headerlink" title="cancelBubble （event对象的属性）"></a>cancelBubble （event对象的属性）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cancelBubble 取消冒泡 默认为false</span></span><br><span class="line">e.<span class="property">cancelBubble</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h6 id="兼容写法"><a href="#兼容写法" class="headerlink" title="兼容写法"></a>兼容写法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="property">stopPropagation</span>?e.<span class="title function_">stopPropagation</span>():e.<span class="property">cancelBubble</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="捕获模式-（从外到里-逐层执行对应的事件）"><a href="#捕获模式-（从外到里-逐层执行对应的事件）" class="headerlink" title="捕获模式 （从外到里 逐层执行对应的事件）"></a>捕获模式 （从外到里 逐层执行对应的事件）</h4><p>捕获模式他是火狐提出来的模式，ie对应的6、7、8 不支持。现在的模式一般很少使用捕获模式。</p><h3 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h3><p>元素标签有其默认行为（a 标签会默认跳转页面 form标签里面submit默认提交（刷新）），对应的事件也有其默认行为（contextmenu 会出现对应的菜单栏等）。</p><h6 id="e-defaultPrevented-检测当前是否禁止默认行为"><a href="#e-defaultPrevented-检测当前是否禁止默认行为" class="headerlink" title="e.defaultPrevented 检测当前是否禁止默认行为"></a>e.defaultPrevented 检测当前是否禁止默认行为</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">defaultPrevented</span>) <span class="comment">//是否阻止默认行为 只读 默认为false</span></span><br></pre></td></tr></table></figure><h4 id="禁止默认行为"><a href="#禁止默认行为" class="headerlink" title="禁止默认行为"></a>禁止默认行为</h4><h5 id="preventDefault-（event对象的方法）"><a href="#preventDefault-（event对象的方法）" class="headerlink" title="preventDefault （event对象的方法）"></a>preventDefault （event对象的方法）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">preventDefault</span>() <span class="comment">//preventDefault阻止默认行为</span></span><br></pre></td></tr></table></figure><h5 id="returnValue-（event对象的属性）"><a href="#returnValue-（event对象的属性）" class="headerlink" title="returnValue  （event对象的属性）"></a>returnValue  （event对象的属性）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="property">returnValue</span> = <span class="literal">false</span> <span class="comment">//兼容ie的</span></span><br></pre></td></tr></table></figure><h5 id="兼容写法-1"><a href="#兼容写法-1" class="headerlink" title="兼容写法"></a>兼容写法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="property">preventDefault</span>?e.<span class="title function_">preventDefault</span>():e.<span class="property">returnValue</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="return-false"><a href="#return-false" class="headerlink" title="return false"></a>return false</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应的右键点击</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">oncontextmenu</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;右键点击了&#x27;</span>)</span><br><span class="line">    <span class="comment">// e.preventDefault?e.preventDefault():e.returnValue=false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//一定要放在最后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><p>右键点击出现对应的菜单栏 这个菜单栏自定义（前进功能 后退功能 刷新功能 换肤 打印）</p><h3 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h3><p>eventListener 他是一个标准的观察者模式，他是通过对应的监听器来监听事件的触发和执行。</p><h5 id="主要有俩个方法"><a href="#主要有俩个方法" class="headerlink" title="主要有俩个方法"></a>主要有俩个方法</h5><ul><li>addEventListener 添加事件监听器</li><li>removeEventListener 移除事件监听器</li></ul><h5 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h5><p>传入对应的事件名及处理函数以及对应的是否冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取按钮</span></span><br><span class="line"><span class="keyword">var</span> btn  = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="comment">//添加事件监听器 传入 事件名 处理函数  是否捕获(默认的事件模式 冒泡 false 捕获 true)</span></span><br><span class="line"><span class="comment">// btn.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;按钮点击了&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)//指定为冒泡模式</span></span><br><span class="line"><span class="comment">// btn.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;按钮点击了1&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;,true)//指定为捕获模式 先执行</span></span><br><span class="line"><span class="comment">// btn.addEventListener(&#x27;click&#x27;,function()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;按钮点击了2&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//addEventListener 他可以给一个事件添加多个处理函数 </span></span><br><span class="line"><span class="comment">//一个事件 有一个处理函数的数组</span></span><br><span class="line"><span class="comment">//事件监听器中的事件名 支持自定义</span></span><br><span class="line"><span class="comment">// btn.addEventListener(&#x27;dblclick&#x27;,function()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;双击&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//直接使用onclick 进行赋值的操作他会被覆盖也就是说他只有一个处理函数 后写会覆盖先写的 （属性赋值操作）</span></span><br><span class="line"><span class="comment">// document.querySelector(&#x27;div&#x27;).onclick = function()&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;div被点击了&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,handler,<span class="literal">false</span>)<span class="comment">//指定为冒泡模式</span></span><br></pre></td></tr></table></figure><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><ul><li>addEventListener 可以在一个事件中传入多个处理函数 （一个事件对应一个处理函数数组）</li><li>EventListenter 支持自定义事件名 </li><li>属性事件赋值不支持多个处理函数 （因为会被覆盖）</li></ul><h5 id="removeEventListener"><a href="#removeEventListener" class="headerlink" title="removeEventListener"></a>removeEventListener</h5><p>移除对应的添加的事件监听器，传入事件名、处理函数、是否冒泡 每个都必须和添加的事件监听器一致不然不能被移除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,handler,<span class="literal">false</span>)<span class="comment">//指定为冒泡模式</span></span><br><span class="line"><span class="comment">// 要移除的事件名 要移除的处理函数(也要一致 如果是匿名函数那么就不能被移除 对象比对的是地址) 模式也要一致</span></span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,handler,<span class="literal">false</span>)  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮点击了&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h6><ul><li>如果添加事件监听器的时候传入处理函数为匿名处理函数 那么不能被移除（对象比对的是地址）</li></ul><h3 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h3><h4 id="拖拽原理"><a href="#拖拽原理" class="headerlink" title="拖拽原理"></a>拖拽原理</h4><ul><li>给对应的需要拖拽的元素添加鼠标按下事件</li><li>在按下事件内添加给区间的元素对应的鼠标移动事件</li><li>在按下事件内给document添加对应的鼠标弹起事件 在弹起事件中释放移动事件及释放弹起事件</li></ul><h4 id="基础拖拽"><a href="#基础拖拽" class="headerlink" title="基础拖拽"></a>基础拖拽</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul><li>获取拖拽的元素</li><li>给拖拽元素添加鼠标按下事件 并记录按下的坐标（在对应的盒子里的坐标）</li><li>在按下事件内给区间元素添加鼠标移动事件 并记录每次移动的坐标 </li><li>在区间元素的鼠标移动事件中 设置对应的拖拽元素的坐标（移动的坐标 &#x3D; 当前的坐标 - 鼠标点击位置的坐标 + ‘px’）</li><li>在按下事件内在document中添加鼠标弹起事件 并释放之前的移动事件及自身的弹起事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">box.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//记录在而盒子上的坐标 </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> x = e.<span class="property">offsetX</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> y = e.<span class="property">offsetY</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//在document中移动</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取页面上的坐标</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> currentX = e.<span class="property">pageX</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> currentY = e.<span class="property">pageY</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//移动的坐标 = 当前的坐标 - 鼠标点击位置的坐标 + &#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">box.<span class="property">style</span>.<span class="property">left</span> = currentX - x + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">box.<span class="property">style</span>.<span class="property">top</span> = currentY - y + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="区间拖拽"><a href="#区间拖拽" class="headerlink" title="区间拖拽"></a>区间拖拽</h4><h5 id="offset家族-（属于元素对象-element对象）"><a href="#offset家族-（属于元素对象-element对象）" class="headerlink" title="offset家族 （属于元素对象 element对象）"></a>offset家族 （属于元素对象 element对象）</h5><ul><li>offsetParent 偏移的父元素 （从里到外找有定位的父元素 没有的话就是body）</li><li>offsetLeft 左偏移量 （不包含偏移的父元素本身的margin 包含偏移的父元素本身padding border）</li><li>offsetTop 上偏移量</li><li>offsetHeight 偏移元素的高度 （包含padding及border 不包含margin）</li><li>offsetWidth 偏移元素的宽度</li></ul><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><ul><li>获取拖拽的元素</li><li>给拖拽元素添加鼠标按下事件 并记录按下的坐标（在对应的盒子里的坐标）</li><li>在按下事件内给区间元素添加鼠标移动事件 并记录每次移动的坐标 </li><li>在区间元素的鼠标移动事件中 获取对应的区间元素的位置 及 能够移动的距离 （区间元素的宽&#x2F;高度 - 自身的宽&#x2F;高度）</li><li>设置移动元素处在区间元素的位置  移动位置在父元素的坐标 &#x3D;  页面的位置 - 父元素离页面的位置 - 鼠标点击的位置 </li><li>对应坐标位置进行区间判断 小于0的时候值应该设置为0 大于能够移动的距离设为最大的距离</li><li>在按下事件内在document中添加鼠标弹起事件 并释放之前的移动事件及自身的弹起事件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">        移动的按钮</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    button.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//记录在而盒子上的坐标 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = e.<span class="property">offsetX</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> y = e.<span class="property">offsetY</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//在box中移动</span></span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取区间元素的位置</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bx = <span class="variable language_">this</span>.<span class="property">offsetLeft</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> by = <span class="variable language_">this</span>.<span class="property">offsetTop</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取能够移动的最大距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maxX =  <span class="variable language_">this</span>.<span class="property">offsetWidth</span> - button.<span class="property">offsetWidth</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> maxY =  <span class="variable language_">this</span>.<span class="property">offsetHeight</span> - button.<span class="property">offsetHeight</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//移动位置在父元素的坐标 = 页面的位置 - 父元素离页面的位置 - 鼠标点击的位置</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> targetX = e.<span class="property">pageX</span> - bx - x</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> targetY = e.<span class="property">pageY</span> - by - y</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//进行区间判断</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(targetX &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                targetX = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(targetY &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                targetY = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(targetX &gt; maxX)&#123;</span></span><br><span class="line"><span class="language-javascript">                targetX = maxX</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(targetY &gt; maxY)&#123;</span></span><br><span class="line"><span class="language-javascript">                targetY = maxY</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            button.<span class="property">style</span>.<span class="property">left</span> = targetX + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            button.<span class="property">style</span>.<span class="property">top</span> = targetY + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            box.<span class="property">onmousemove</span> = <span class="variable language_">document</span>.<span class="property">onmouseup</span>  = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="封装一个方法找盒子到页面的距离"><a href="#封装一个方法找盒子到页面的距离" class="headerlink" title="封装一个方法找盒子到页面的距离"></a>封装一个方法找盒子到页面的距离</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getBoxToPageDistance</span>(<span class="params">element</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> distance = &#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">&#125; <span class="comment">//距离对象</span></span><br><span class="line"><span class="keyword">while</span>(element.<span class="property">offsetParent</span>)&#123; <span class="comment">//找到body就停止</span></span><br><span class="line">distance.<span class="property">x</span> += element.<span class="property">offsetLeft</span></span><br><span class="line">distance.<span class="property">y</span> += element.<span class="property">offsetTop</span></span><br><span class="line">element = element.<span class="property">offsetParent</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> distance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装好的拖拽函数（drag-js）"><a href="#封装好的拖拽函数（drag-js）" class="headerlink" title="封装好的拖拽函数（drag.js）"></a>封装好的拖拽函数（drag.js）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">专门用于区间滑动的封装函数，</span></span><br><span class="line"><span class="comment">第一个参数为对应的滑块子元素 (必填参数)</span></span><br><span class="line"><span class="comment">第二个参数为对应的滑块元素的父元素 (非必填参数)</span></span><br><span class="line"><span class="comment">第三个参数为是否回到原来的位置 (非必填参数)</span></span><br><span class="line"><span class="comment">第四个参数为回调函数 (非必填参数)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：子父元素均需要设置定位属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dragEle</span>(<span class="params">child, parent, isback ,callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果没有传递父元素,则默认是document进行传递</span></span><br><span class="line">    <span class="keyword">if</span> (!parent) &#123;</span><br><span class="line">        parent = <span class="variable language_">document</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有传递是否返回原位isback,则默认是false</span></span><br><span class="line">    <span class="keyword">if</span> (isback == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        isback = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标按下，获取鼠标初始位置</span></span><br><span class="line">    child.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        e = e || winodw.<span class="property">event</span> <span class="comment">//兼容IE</span></span><br><span class="line">        e.<span class="property">preventDefault</span> ? e.<span class="title function_">preventDefault</span>() : e.<span class="property">returnValue</span> = <span class="literal">false</span><span class="comment">//取消子元素的默认事件，防止拖拽不成功，并兼容ie</span></span><br><span class="line">        child.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;none&#x27;</span><span class="comment">//拖动时不需要过渡效果</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 元素的最终位置</span></span><br><span class="line">        <span class="keyword">let</span> dragx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> dragy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击时，获取当前鼠标在滑块的偏移位置</span></span><br><span class="line">        <span class="keyword">let</span> mousex = e.<span class="property">offsetX</span></span><br><span class="line">        <span class="keyword">let</span> mousey = e.<span class="property">offsetY</span></span><br><span class="line">        <span class="comment">// 给父元素添加鼠标移动事件</span></span><br><span class="line">        parent.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            e = e || winodw.<span class="property">event</span> <span class="comment">//兼容IE</span></span><br><span class="line">            <span class="comment">// 获得子元素在父元素中的最大移动距离</span></span><br><span class="line">            <span class="comment">// 若父元素为document，父元素宽度则置为可视区大小</span></span><br><span class="line">            <span class="keyword">let</span> parentWidth = parent.<span class="property">offsetWidth</span> ? parent.<span class="property">offsetWidth</span> : <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line">            <span class="keyword">let</span> parentHeight = parent.<span class="property">offsetHeight</span> ? parent.<span class="property">offsetHeight</span> : <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">            <span class="comment">// 计算出最大宽度</span></span><br><span class="line">            <span class="keyword">let</span> maxw = parentWidth - child.<span class="property">offsetWidth</span></span><br><span class="line">            <span class="keyword">let</span> maxh = parentHeight - child.<span class="property">offsetHeight</span></span><br><span class="line">            <span class="comment">// 元素的最终位置 = 鼠标在页面的位置 - 父元素离页面的位置 - 鼠标在滑块的偏移位置</span></span><br><span class="line">            dragx = e.<span class="property">pageX</span> - <span class="title function_">getBoxToPageDistance</span>(parent).<span class="property">x</span> - mousex</span><br><span class="line">            dragy = e.<span class="property">pageY</span> - <span class="title function_">getBoxToPageDistance</span>(parent).<span class="property">y</span> - mousey</span><br><span class="line">            <span class="comment">// 若位移为负，则置为0</span></span><br><span class="line">            <span class="keyword">if</span> (dragx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                dragx = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dragy &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                dragy = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若位移大于最大移动距离，则置为最大移动距离</span></span><br><span class="line">            <span class="keyword">if</span> (dragx &gt; maxw) &#123;</span><br><span class="line">                dragx = maxw</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dragy &gt; maxh) &#123;</span><br><span class="line">                dragy = maxh</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置滑块位置</span></span><br><span class="line">            child.<span class="property">style</span>.<span class="property">left</span> = dragx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">            child.<span class="property">style</span>.<span class="property">top</span> = dragy + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">onmouseup</span>= <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 鼠标抬起，清空移动事件</span></span><br><span class="line">            parent.<span class="property">onmousemove</span> = <span class="literal">null</span></span><br><span class="line">            <span class="comment">// 验证是否传入的callback</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_">callback</span>(dragPoint = &#123;<span class="attr">x</span>:dragx,<span class="attr">y</span>:dragy&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若isback == true ,将滑块位置回到原位，并添加0.5s的过渡效果</span></span><br><span class="line">            <span class="keyword">if</span> (isback) &#123;</span><br><span class="line">                child.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">                child.<span class="property">style</span>.<span class="property">top</span> = <span class="number">0</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">                child.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;.5s&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到父盒子到页面的距离的封装方法，</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBoxToPageDistance</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> distance = &#123;<span class="comment">//存放距离的对象</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ele.<span class="property">offsetParent</span>) &#123;<span class="comment">//查找是否有存在定位属性的父级，找到body就停止</span></span><br><span class="line">        distance.<span class="property">x</span> += ele.<span class="property">offsetLeft</span></span><br><span class="line">        distance.<span class="property">y</span> += ele.<span class="property">offsetTop</span></span><br><span class="line">        ele = ele.<span class="property">offsetParent</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> event </tag>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则</title>
      <link href="/2023/06/06/TechnicalArticles/js/13.%E6%AD%A3%E5%88%99/"/>
      <url>/2023/06/06/TechnicalArticles/js/13.%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="day14-正则"><a href="#day14-正则" class="headerlink" title="day14 正则"></a>day14 正则</h1><h3 id="正则概述"><a href="#正则概述" class="headerlink" title="正则概述"></a>正则概述</h3><p>正则是用于检验对应的字符串的一种特殊表达式。一般用于用户格式验证。</p><h3 id="正则对象声明"><a href="#正则对象声明" class="headerlink" title="正则对象声明"></a>正则对象声明</h3><h5 id="使用-x2F-x2F-来声明"><a href="#使用-x2F-x2F-来声明" class="headerlink" title="使用&#x2F;&#x2F;来声明"></a>使用&#x2F;&#x2F;来声明</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/a/ig</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp)</span><br></pre></td></tr></table></figure><h5 id="使用new关键字声明"><a href="#使用new关键字声明" class="headerlink" title="使用new关键字声明"></a>使用new关键字声明</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个传入的是对应的正则表达式 第二个传入为当前匹配模式</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp)</span><br></pre></td></tr></table></figure><h5 id="正则的匹配修饰符"><a href="#正则的匹配修饰符" class="headerlink" title="正则的匹配修饰符"></a>正则的匹配修饰符</h5><ul><li>g 全局</li><li>i 不区分大小写</li><li>m 换行</li><li>s 单个匹配</li></ul><h3 id="正则对象的方法及属性"><a href="#正则对象的方法及属性" class="headerlink" title="正则对象的方法及属性"></a>正则对象的方法及属性</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>test 验证是否匹配</li><li>exec 返回匹配的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正则对象的方法 boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="title function_">test</span>(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="title function_">test</span>(<span class="string">&#x27;apple&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="comment">//exec 执行 返回的是一个数组 类于match</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="title function_">exec</span>(<span class="string">&#x27;ooA&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>dotAll 是否到匹配修饰符s</li><li>flags 匹配修饰符</li><li>global 是否全局查找</li><li>ignoreCase  是否不区分大小写</li><li>lastIndex  下一次匹配的开始索引</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="property">dotAll</span>)<span class="comment">//是否到匹配修饰符s</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="property">flags</span>) <span class="comment">//匹配修饰符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="property">global</span>) <span class="comment">//是否全局查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="property">ignoreCase</span>) <span class="comment">//是否不区分大小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="property">lastIndex</span>) <span class="comment">//下一次匹配的开始索引</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式中的元字符（特殊字符）"><a href="#正则表达式中的元字符（特殊字符）" class="headerlink" title="正则表达式中的元字符（特殊字符）"></a>正则表达式中的元字符（特殊字符）</h3><ul><li><h6 id="表示开头"><a href="#表示开头" class="headerlink" title="^ 表示开头"></a>^ 表示开头</h6></li><li><h6 id="表示结尾"><a href="#表示结尾" class="headerlink" title="$ 表示结尾"></a>$ 表示结尾</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^ab$/</span>  <span class="comment">//以a开头 以b结尾</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp.<span class="title function_">test</span>(<span class="string">&#x27;a1b&#x27;</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><h6 id="表示里面的任意一个元素"><a href="#表示里面的任意一个元素" class="headerlink" title="[] 表示里面的任意一个元素"></a>[] 表示里面的任意一个元素</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[] 表示里面的任意一个元素</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[abc]a$/</span> <span class="comment">//只匹配aa ba ca</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[abc][ab]$/</span> <span class="comment">//只匹配aa ab ba bb ca cb</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><h6 id="表示个数"><a href="#表示个数" class="headerlink" title="{} 表示个数"></a>{} 表示个数</h6><p>{n} 表示n个</p><p>{n,m} 表示n到m个 （必要条件 n&lt;m）</p><p>{n,}  表示n到无穷个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#123;&#125; 表示个数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[abc]&#123;2&#125;/</span> <span class="comment">//里面包含  /[abc]&#123;2&#125;/ == /[abc][abc]/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">//&#123;2,3&#125; 俩个到三个</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[abc]&#123;2,3&#125;$/</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">//&#123;2,&#125; 俩个到无穷个</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a]&#123;2,&#125;/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaab&#x27;</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><h6 id="表示分组"><a href="#表示分组" class="headerlink" title="() 表示分组"></a>() 表示分组</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//() 表示分组 </span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(ab)&#123;2&#125;/</span> <span class="comment">//abab </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abaa&#x27;</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><h6 id="数字的表示方式"><a href="#数字的表示方式" class="headerlink" title="数字的表示方式"></a>数字的表示方式</h6><p>\d 表示数字 \D表示非数字</p><p>[0-9] 表示数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//\d表示数字 [0-9]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\d/</span>.<span class="title function_">test</span>(<span class="string">&#x27;1a&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[0-9]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;1a&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">//\D表示非数字 大小的表示相反</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\D/</span>.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><h6 id="字母表示方式"><a href="#字母表示方式" class="headerlink" title="字母表示方式"></a>字母表示方式</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示字母 [A-Z]大写字母 [a-z] 小写字母  [A-z] 大写字母和小写字母</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[A-Z]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[A-z]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[a-z]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><h6 id="w-表示数字字母下滑线-W-非数字字母下滑线"><a href="#w-表示数字字母下滑线-W-非数字字母下滑线" class="headerlink" title="\w 表示数字字母下滑线 \W  非数字字母下滑线"></a>\w 表示数字字母下滑线 \W  非数字字母下滑线</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \w表示数字 字母及下滑线 \W表示非数字 字母 下滑线</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\w/</span>.<span class="title function_">test</span>(<span class="string">&#x27;_&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\w/</span>.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\w/</span>.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\w/</span>.<span class="title function_">test</span>(<span class="string">&#x27;-&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\W/</span>.<span class="title function_">test</span>(<span class="string">&#x27;-&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\W/</span>.<span class="title function_">test</span>(<span class="string">&#x27;_&#x27;</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><h6 id="s-表示空白字符-S非空白字符"><a href="#s-表示空白字符-S非空白字符" class="headerlink" title="\s 表示空白字符 \S非空白字符"></a>\s 表示空白字符 \S非空白字符</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//\s表示空白字符 \S表示非空白字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\s/</span>.<span class="title function_">test</span>(<span class="string">&quot;  &quot;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\S/</span>.<span class="title function_">test</span>(<span class="string">&quot;  &quot;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\S/</span>.<span class="title function_">test</span>(<span class="string">&quot;a&quot;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><h6 id="表示1个到多个-相当于-1"><a href="#表示1个到多个-相当于-1" class="headerlink" title="+ 表示1个到多个 相当于{1,}"></a><code>+</code> 表示1个到多个 相当于{1,}</h6></li><li><h6 id="表示0个到多个-相当于-0"><a href="#表示0个到多个-相当于-0" class="headerlink" title="* 表示0个到多个 相当于{0,}"></a><code>*</code> 表示0个到多个 相当于{0,}</h6></li><li><h6 id="？表示0个到1个-相当于-0-1"><a href="#？表示0个到1个-相当于-0-1" class="headerlink" title="？表示0个到1个  相当于{0,1}"></a><code>？</code>表示0个到1个  相当于{0,1}</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +表示0到多个 ?表示0个到一个 *表示0个到多个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^([\d\w]*)+$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;19w8101397198347&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^([\d\w]*)+$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;?_+1&#x27;</span>))<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^([\d\w]*)+$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><h6 id="或者符号"><a href="#或者符号" class="headerlink" title="| 或者符号"></a>| 或者符号</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//| 或者 | 或符号建议和分组一起使用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^([a]&#123;2&#125;)|([b]&#123;3&#125;)$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^([a]&#123;2&#125;)|([b]&#123;3&#125;)$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;bbb&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^([a]&#123;2&#125;)|([b]&#123;3&#125;)$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;abb&#x27;</span>))<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><h6 id="表示任意字符"><a href="#表示任意字符" class="headerlink" title=".表示任意字符"></a>.表示任意字符</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//. 任意字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^.$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;1&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^.$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^.$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;?&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^.$/</span>.<span class="title function_">test</span>(<span class="string">&#x27; &#x27;</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="正则的转义"><a href="#正则的转义" class="headerlink" title="正则的转义"></a>正则的转义</h3><h6 id="转义的概念就是将我们的元字符变为普通字符串"><a href="#转义的概念就是将我们的元字符变为普通字符串" class="headerlink" title="转义的概念就是将我们的元字符变为普通字符串"></a>转义的概念就是将我们的元字符变为普通字符串</h6><ul><li>使用[] 进行转义 只能对应的普通的元字符 (? * . +等)</li><li>使用\转义字符 可以对任意进行转义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转义 第一种方式将对应的非修饰的字母 不带反斜杠开头的元字符 使用[]把他包起来</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[?]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;?&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[.]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;.&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[.]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[\d]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;\d&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/[\w]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;\w&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="comment">//第二种使用转义字符 \</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\[\]/</span>.<span class="title function_">test</span>(<span class="string">&#x27;[]&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/\./</span>.<span class="title function_">test</span>(<span class="string">&#x27;.&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="支持正则的字符串的方法"><a href="#支持正则的字符串的方法" class="headerlink" title="支持正则的字符串的方法"></a>支持正则的字符串的方法</h3><ul><li>match  匹配</li><li>search 查找</li><li>replace 替换</li><li>split 切割</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> RegExp </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5和ES6</title>
      <link href="/2023/06/06/TechnicalArticles/js/14.ES5%E5%92%8CES6/"/>
      <url>/2023/06/06/TechnicalArticles/js/14.ES5%E5%92%8CES6/</url>
      
        <content type="html"><![CDATA[<h1 id="ES5和ES6"><a href="#ES5和ES6" class="headerlink" title="ES5和ES6"></a>ES5和ES6</h1><h3 id="ECMAScript大纲"><a href="#ECMAScript大纲" class="headerlink" title="ECMAScript大纲"></a>ECMAScript大纲</h3><p><img src="/../../images/image-20230227095710562.png" alt="image-20230227095710562" title="ECMAScript大纲"></p><h3 id="JavaScript构成"><a href="#JavaScript构成" class="headerlink" title="JavaScript构成"></a>JavaScript构成</h3><ul><li>BOM 对象</li><li>DOM 对象</li><li>ECMAScript 基础语法</li></ul><h3 id="ECMAScript概述"><a href="#ECMAScript概述" class="headerlink" title="ECMAScript概述"></a>ECMAScript概述</h3><p>ECMAScript是对应的js基础语法，里面包含了除dom操作和bom操作外的所有内容。</p><p>ECMAScript主要拆分为两个单词ECMA（<em>ecma</em>一般指欧洲计算机制造商协会）、script（脚本）</p><p>ECMAScript简称es 主要的版本有ES3、ES5、ES6…（往后的版本也通常成为ES6）</p><blockquote><p>但是不同es版本也有着相应的兼容问题，为了应对，通常可以使用Babel.js解决此问题</p><p><a href="https://babeljs.io/">Babel</a> 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。</p></blockquote><h3 id="ECMAScript的版本"><a href="#ECMAScript的版本" class="headerlink" title="ECMAScript的版本"></a>ECMAScript的版本</h3><ul><li><p>ES3 （1999 年 12 月）基础版本 </p><blockquote><p>3.0 版是一个巨大的成功，在业界得到广泛支持，成为通行标准，奠定了 JavaScript 语言的基本语法，以后的版本完全继承。直到今天，初学者一开始学习 JavaScript，其实就是在学 3.0 版的语法。</p></blockquote></li><li><p>ES5 （2009 年 12 月） 在es3上增强了对应的规范性以及应对方法</p><blockquote><p>ES5 在 2013 年的年中成为 JavaScript 开发的主流标准，并在此后五年中一直保持这个位置。</p></blockquote></li><li><p>ES6 （2015 年 6 月）在es5的基础上扩展了对应的类以及对应的处理</p></li></ul><h3 id="ES5新增内容"><a href="#ES5新增内容" class="headerlink" title="ES5新增内容"></a>ES5新增内容</h3><h4 id="怪异模式"><a href="#怪异模式" class="headerlink" title="怪异模式"></a>怪异模式</h4><p>就是我们之前一直使用的开发模式，就叫怪异模式。因为很多时候出来的结果是非常怪异的，所以才称之为怪异模式。</p><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>即更严格的模式 在这种模式下执行，浏览器会对JS的要求更苛刻，语法格式要求更细致，更符合逻辑。</p><blockquote><p> 主流浏览器现在实现了严格模式。但是不要盲目地依赖它，因为市场上仍然有大量的浏览器版本只部分支持严格模式或者根本就不支持（比如 IE10 之前的版本）。<em>严格模式改变了语义。*依赖这些改变可能会导致没有实现严格模式的浏览器中出现问题或者错误。谨慎地使用严格模式，通过检测相关代码的功能保证严格模式不出问题。最后，记得*在支持或者不支持严格模式的浏览器中测试你的代码</em>。如果你只在不支持严格模式的浏览器中测试，那么在支持的浏览器中就很有可能出问题，反之亦然。</p></blockquote><h5 id="为什么需要严格模式"><a href="#为什么需要严格模式" class="headerlink" title="为什么需要严格模式"></a>为什么需要严格模式</h5><ul><li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p></li><li><p>代码运行的一些不安全之处，保证代码运行的安全；</p></li><li><p>提高编译器效率，增加运行速度；</p></li><li><p>为未来的ECMAScript版本铺平道路</p><blockquote><p>未来版本的 ECMAScript 很有可能会引入新语法，ECMAScript5 中的严格模式就提早设置了一些限制来减轻之后版本改变产生的影响。如果提早使用了严格模式中的保护机制，那么做出改变就会变得更容易。</p></blockquote></li></ul><h5 id="书写方式"><a href="#书写方式" class="headerlink" title="书写方式"></a>书写方式</h5><ul><li>声明 <code> use strict</code>在首行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">    n = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line"><span class="comment">//Uncaught ReferenceError: n is not defined</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li>不可以省略var声明变量 </li><li>禁止函数使用this关键字指向全局对象 （global）（winodw)</li><li>禁止使用八进制方法 </li><li>不允许在非函数的代码块内声明函数（只能在上下文中）</li><li>函数名的参数唯一</li><li>严格模式下,arguments变量,形参是不会变(不同步)</li></ul><h4 id="数组新增的高阶函数"><a href="#数组新增的高阶函数" class="headerlink" title="数组新增的高阶函数"></a>数组新增的高阶函数</h4><p>以函数作为参数的函数被称为高阶函数</p><blockquote><p>有七个：forEach，map，filter，every，some，reduce，reduceRight</p></blockquote><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><blockquote><p><strong>语法：数组名.forEach (function(当前值，当前下标，当前数组){})</strong></p><p><strong>作用:</strong> 遍历</p><p><strong>返回:</strong> void</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="comment">//传入的函数为操作函数</span></span><br><span class="line"><span class="comment">//传入的函数有三个参数分别为遍历的值遍历的下标遍历的数组</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value,index,array)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><blockquote><p><strong>语法：数组名.map(function(当前值，当前下标，当前数组){})</strong></p><p><strong>作用:</strong> 遍历</p><p><strong>返回:</strong> 一个数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map的使用和forEach是一样的唯一的区别在于forEach map有返回值</span></span><br><span class="line"><span class="comment">// map返回的是一个数组这个数组的个数一定和遍历的数组个数是一样的</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="comment">//传入的函数为操作函数</span></span><br><span class="line"><span class="comment">//传入的函数有三个参数分别为遍历的值遍历的下标遍历的数组</span></span><br><span class="line"><span class="keyword">let</span> nums = arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value,index,array)</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums)<span class="comment">//[0, undefined, 2, undefined]</span></span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><blockquote><p><strong>语法：数组名.filter(function(当前值，当前下标，当前数组){过滤规则})</strong></p><p><strong>作用:</strong> 过滤</p><p><strong>返回:</strong> 满足函数条件的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fi1ter用于过滤,里面传入的对应的函数的返回值是boolean</span></span><br><span class="line"><span class="comment">//添加的返回的数组如果是false就不添加</span></span><br><span class="line"><span class="comment">//v表示对应的值 i表示下标array表示数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filterArr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>].<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/a/</span>.<span class="title function_">test</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterArr)<span class="comment">//[&#x27;a&#x27;, &#x27;ab&#x27;]</span></span><br></pre></td></tr></table></figure><h5 id="every"><a href="#every" class="headerlink" title="every"></a>every</h5><blockquote><p><strong>语法：数组名.(function(当前值，当前下标，当前数组){寻找规则})</strong></p><p><strong>作用:</strong> 遍历是否每个都满足条件</p><p><strong>返回:</strong> Boolean</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value&gt;<span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="some"><a href="#some" class="headerlink" title="some"></a>some</h5><blockquote><p><strong>语法：数组名.(function(当前值，当前下标，当前数组){寻找规则})</strong></p><p><strong>作用:</strong> 遍历是否存在满足条件</p><p><strong>返回:</strong> Boolean</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value&gt;<span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><blockquote><p><strong>语法：数组名.(function(前一个值，当前值，当前下标，数组){累加})</strong></p><p><strong>作用:</strong> 对数组中的每个元素进行累加，返回一个新的值，可以传入初始值</p><p><strong>返回:</strong> 累计值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prv,value,index,array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> prv + value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//15</span></span><br></pre></td></tr></table></figure><h5 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h5><blockquote><p><strong>语法：数组名.(function(前一个值，当前值，当前下标，数组){累加})</strong></p><p><strong>作用:</strong> 反向对数组中的每个元素进行累加，返回一个新的值，可以传入初始值</p><p><strong>返回:</strong> 累计值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">reduceRight</span>(<span class="keyword">function</span>(<span class="params">prv,value,index,array</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> prv + value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//15</span></span><br></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><h5 id="Function对象的方法"><a href="#Function对象的方法" class="headerlink" title="Function对象的方法"></a>Function对象的方法</h5><h6 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h6><p>手动调用，返回一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHello</span>()<span class="comment">//&#123;name: &#x27;hello&#x27;, sayHello: ƒ&#125;</span></span><br><span class="line">obj.<span class="property">sayHello</span>.<span class="title function_">bind</span>(<span class="variable language_">window</span>)();<span class="comment">//bind返回的是个函数，需要自己调用//Window </span></span><br></pre></td></tr></table></figure><h6 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h6><p>自动调用，返回值对应的函数执行的结果，传递的参数是<strong>对应的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">    <span class="attr">sayWorld</span>: <span class="keyword">function</span> (<span class="params">n1,n2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n1+n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="title function_">sayWorld</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//&#123;name: &#x27;world&#x27;, sayWorld: ƒ&#125; 3</span></span><br><span class="line">obj2.<span class="property">sayWorld</span>.<span class="title function_">apply</span>(<span class="variable language_">window</span>,[<span class="number">1</span>,<span class="number">2</span>])<span class="comment">//Window 3</span></span><br></pre></td></tr></table></figure><h6 id="call"><a href="#call" class="headerlink" title="call"></a>call</h6><p>自动调用，返回值对应的函数执行的结果，传递的参数是<strong>一个个的元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">    <span class="attr">sayJs</span>: <span class="keyword">function</span> (<span class="params">n1,n2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n1+n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj3.<span class="title function_">sayJs</span>(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//&#123;name: &#x27;js&#x27;, sayJs: ƒ&#125; 3</span></span><br><span class="line">obj3.<span class="property">sayJs</span>.<span class="title function_">call</span>(<span class="variable language_">window</span>,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//Window 3</span></span><br></pre></td></tr></table></figure><h6 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h6><ul><li>bind返回的是一个函数，需要手动调用</li><li>apply会自动调用函数，且返回的是对应的函数的执行结果（传递的参数是一个数组）</li><li>call会自动调用函数，且返回的是对应的函数的执行结果（传递的参数是一个个的元素）</li><li><strong>bind函数执行完返回的函数不能被apply和call进行二次更改this指向</strong></li></ul><h3 id="ES5其他新增"><a href="#ES5其他新增" class="headerlink" title="ES5其他新增"></a>ES5其他新增</h3><h4 id="Array-trim"><a href="#Array-trim" class="headerlink" title="Array.trim()"></a>Array.trim()</h4><p>去除前后空格</p><h4 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h4><p>是否为数组</p><h4 id="Array-indexOf"><a href="#Array-indexOf" class="headerlink" title="Array.indexOf()"></a>Array.indexOf()</h4><p>查找相应的元素下标</p><h4 id="Array-lastIndexOf"><a href="#Array-lastIndexOf" class="headerlink" title="Array.lastIndexOf()"></a>Array.lastIndexOf()</h4><p>从后面开始查找相应的元素下标</p><h4 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h4><p>序列化</p><h4 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h4><p>反序列化</p><h4 id="Object-defineproperty"><a href="#Object-defineproperty" class="headerlink" title="Object.defineproperty()"></a>Object.defineproperty()</h4><p>vue2中元素的动态绑定所使用过</p><h4 id="getter-setter（属于对象）"><a href="#getter-setter（属于对象）" class="headerlink" title="getter setter（属于对象）"></a>getter setter（属于对象）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">_name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getter 调动了！&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = value</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter 调动了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);<span class="comment">//getter 调动了！ hello</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;world&#x27;</span><span class="comment">//setter 调动了！</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);<span class="comment">//getter 调动了！ world</span></span><br></pre></td></tr></table></figure><h3 id="ES6新增"><a href="#ES6新增" class="headerlink" title="ES6新增"></a>ES6新增</h3><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 为全局作用域 会进行变量提升 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//异步</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//打印10个10</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">//异步</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//打印0~9</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。（地址不可变）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// n = 9 //报错</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj = &#123;&#125;<span class="comment">//报错</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;world&#x27;</span><span class="comment">//不报错</span></span><br></pre></td></tr></table></figure><h4 id="字符串新增"><a href="#字符串新增" class="headerlink" title="字符串新增"></a>字符串新增</h4><h5 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&#x27;World!&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;str1&#125;</span> <span class="subst">$&#123;str2&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h5 id="includes-是否包含"><a href="#includes-是否包含" class="headerlink" title="includes() 是否包含"></a>includes() 是否包含</h5><h5 id="startsWith-是否开头"><a href="#startsWith-是否开头" class="headerlink" title="startsWith() 是否开头"></a>startsWith() 是否开头</h5><h5 id="endsWith-是否结尾"><a href="#endsWith-是否结尾" class="headerlink" title="endsWith() 是否结尾"></a>endsWith() 是否结尾</h5><h5 id="repeat-平铺（重复）"><a href="#repeat-平铺（重复）" class="headerlink" title="repeat() 平铺（重复）"></a>repeat() 平铺（重复）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line"><span class="comment">// 第一个参数是检索的内容，第二个参数是指定的下标</span></span><br><span class="line"><span class="comment">// 是否开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;bc&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;bc&#x27;</span>, <span class="number">2</span>))<span class="comment">//false</span></span><br><span class="line"><span class="comment">// 是否以开头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;a&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 是否以结尾</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;f&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">// repeat 平铺（重复）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">repeat</span>(<span class="number">3</span>))<span class="comment">//abcdefabcdefabcdef</span></span><br></pre></td></tr></table></figure><h4 id="数组新增"><a href="#数组新增" class="headerlink" title="数组新增"></a>数组新增</h4><h5 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h5><p>将对应的内容填入Array返回数组</p><h5 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h5><p>将伪数组转为数组</p><h5 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find()"></a>Array.find()</h5><p>查找对应的内容</p><h5 id="Array-findIndex"><a href="#Array-findIndex" class="headerlink" title="Array.findIndex()"></a>Array.findIndex()</h5><p>查找对应的下标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="comment">//  Array.of</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.from</span></span><br><span class="line"><span class="comment">// 将三个表单这个伪数组转为数组，</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="property">forms</span>).<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="property">action</span>.<span class="title function_">includes</span>(<span class="string">&#x27;baidu&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);<span class="comment">//[form, form]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.find</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> result1 = arr3.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.findIndex</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> result2 = arr3.<span class="title function_">findIndex</span>(<span class="keyword">function</span> (<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h5 id="find-及findIndex-自定义实现"><a href="#find-及findIndex-自定义实现" class="headerlink" title="find()及findIndex()自定义实现"></a>find()及findIndex()自定义实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="comment">//MyFind()</span></span><br><span class="line"><span class="keyword">let</span> str = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyFind</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">typeof</span>(callback) !=<span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数传递错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; str.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">callback</span>(str[i] , i , str))&#123;</span><br><span class="line">            <span class="keyword">return</span> str[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title class_">MyFind</span>(<span class="keyword">function</span>(<span class="params">value ,index ,arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*示例*/</span></span><br><span class="line"><span class="comment">//MyFindIndex()</span></span><br><span class="line"><span class="keyword">let</span> str = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyFindIndex</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">typeof</span>(callback) !=<span class="string">&quot;function&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数传递错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; str.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">callback</span>(str[i] , i , str))&#123;</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title class_">MyFindIndex</span>(<span class="keyword">function</span>(<span class="params">value ,index ,arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h5 id="Array-fill"><a href="#Array-fill" class="headerlink" title="Array.fill()"></a>Array.fill()</h5><p>覆盖为一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">23</span>,<span class="number">11</span>].<span class="title function_">fill</span>(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//[&#x27;a&#x27;, &#x27;a&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">23</span>,<span class="number">11</span>].<span class="title function_">fill</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>));<span class="comment">//[1, &#x27;a&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><h5 id="Array-flat"><a href="#Array-flat" class="headerlink" title="Array.flat()"></a>Array.flat()</h5><p>将多维数组变为一维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [[<span class="number">1</span>],[<span class="number">2</span>],[[<span class="number">3</span>],[<span class="number">4</span>]]]</span><br><span class="line"><span class="keyword">let</span> arr2 = []</span><br><span class="line"><span class="comment">//arr2 = arr1.flat(Infinity)//传入的是对应的层级，若不知道多少层，则传个最大值</span></span><br><span class="line">arr2 = arr1.<span class="title function_">flat</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>)<span class="comment">//传入的是对应的层级，若不知道多少层，则传个最大值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)<span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><h4 id="数据类型新增"><a href="#数据类型新增" class="headerlink" title="数据类型新增"></a>数据类型新增</h4><h5 id="es3就存在的"><a href="#es3就存在的" class="headerlink" title="es3就存在的"></a>es3就存在的</h5><ul><li>string</li><li>number</li><li>Boolean</li><li>object</li><li>null</li><li>undefined</li></ul><h5 id="es6新增"><a href="#es6新增" class="headerlink" title="es6新增"></a>es6新增</h5><h6 id="bigInt"><a href="#bigInt" class="headerlink" title="bigInt"></a>bigInt</h6><p>大整型（存储不能存储的数据）</p><h6 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h6><p>独一无二，数据唯一，无法重复（通过机器码实现独一无二）</p><blockquote><p>注意声明时不使用new关键词</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigInt = <span class="title class_">BigInt</span>(<span class="string">&#x27;1008610086100861008610086100861008610086100861008610086100861008610086100861008610086&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigInt);<span class="comment">//1008610086100861008610086100861008610086100861008610086100861008610086100861008610086n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一般被当成对象的属性用于设计的而不是用于操作的</span></span><br><span class="line"><span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>() == <span class="title class_">Symbol</span>())<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol.<span class="property">description</span>)<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h4 id="函数新增"><a href="#函数新增" class="headerlink" title="函数新增"></a>函数新增</h4><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>可指定参数的默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  y = y || <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6 之后，可以直接为函数的参数指定默认值。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y=<span class="string">&#x27;World&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><h6 id="标准写法（箭头函数是一个匿名函数）"><a href="#标准写法（箭头函数是一个匿名函数）" class="headerlink" title="标准写法（箭头函数是一个匿名函数）"></a>标准写法（箭头函数是一个匿名函数）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span></span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若参数只有一个，则可以省略括号()</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>,e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若对应代码只有一行,则可以省略括号&#123;&#125;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了1&#x27;</span>,e)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若只有一行，省略的&#123;&#125;，且需要返回值，可以省略 return</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>());<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h6 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h6><ul><li>没有this (this会向外寻找)</li><li>没有arguments</li><li>箭头函数没有原型 （prototype）（不能被new）</li></ul><h4 id="object对象简写"><a href="#object对象简写" class="headerlink" title="object对象简写"></a>object对象简写</h4><ul><li><h5 id="属性简写-（属性值为变量-属性值和属性名名字一致的情况下）"><a href="#属性简写-（属性值为变量-属性值和属性名名字一致的情况下）" class="headerlink" title="属性简写 （属性值为变量 属性值和属性名名字一致的情况下）"></a>属性简写 （属性值为变量 属性值和属性名名字一致的情况下）</h5></li><li><h5 id="函数简写-（删除对应的-function）"><a href="#函数简写-（删除对应的-function）" class="headerlink" title="函数简写 （删除对应的:function）"></a>函数简写 （删除对应的:function）</h5></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">//对象属性原本写法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:name,</span><br><span class="line">    <span class="attr">age</span>:age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写 属性值一定是变量 属性名和属性值一致</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数原本写法</span></span><br><span class="line"> <span class="keyword">let</span> fun = &#123;</span><br><span class="line">     <span class="attr">sayHello</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 简写</span></span><br><span class="line"> fun =&#123;</span><br><span class="line">     <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>解构的概述就是将对应的对象或者数组解除对应的构造暴露其中的内容。</p><h5 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h5><p>根据属性名，快速提取对象中的属性，没有顺序要求，属性名正确即可</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)<span class="comment">//jack</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)<span class="comment">//18</span></span><br></pre></td></tr></table></figure><h5 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h5><p>根据对应的顺序</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的解构是对应的顺序的</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>打开对应的对象或者数组将里面内容暴露出来</p><ul><li>可以规定对应的参数不受限制 自动将对应的内容封装为一个数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收不限制的参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">//自动将对应的数据组装成一个数组</span></span><br><span class="line">    <span class="comment">//args是一个数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">    <span class="comment">//遍历args数组进行计算</span></span><br><span class="line">    <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,current</span>)=&gt;</span>prev+current)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line"><span class="comment">//数组分割符 , es5的</span></span><br><span class="line"><span class="keyword">var</span> arr = [,,,,,]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><ul><li>打开对应的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用...打开对应的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">var</span> newArr = [...arr]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr,newArr,newArr == arr)</span><br><span class="line"><span class="comment">//俩个数组组成一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = arr1.<span class="title function_">concat</span>(arr2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br><span class="line"><span class="keyword">var</span> newArr = [...arr1,...arr2] <span class="comment">//对应的方法传参里面自动添加,</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure><ul><li>打开对应的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用...来打开对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = &#123;...obj&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj,newObj,newObj == obj)</span><br></pre></td></tr></table></figure><h4 id="generator函数"><a href="#generator函数" class="headerlink" title="generator函数"></a>generator函数</h4><p>他是一个解决异步问题的一个函数 他可以将异步代码同步执行</p><p>yield next done</p><h5 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> 代码片段</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//分成一个段 断点</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">fn</span>() <span class="comment">//返回一个generator</span></span><br><span class="line"><span class="keyword">var</span> iter = g.<span class="keyword">return</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">//结束</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter) <span class="comment">//done 是否完成 value返回的值</span></span><br><span class="line"><span class="comment">// g.throw() //抛出异常</span></span><br><span class="line"><span class="comment">// //next下一个</span></span><br><span class="line"><span class="comment">// g.next()</span></span><br><span class="line"><span class="comment">// g.next()</span></span><br><span class="line"><span class="comment">// g.next()</span></span><br><span class="line"><span class="comment">// g.next()</span></span><br><span class="line"><span class="comment">// g.next()</span></span><br></pre></td></tr></table></figure><h4 id="promise-（es7新增）"><a href="#promise-（es7新增）" class="headerlink" title="promise （es7新增）"></a>promise （es7新增）</h4><p>他是一个解决异步问题的一个类 他可以将异步代码同步执行</p><p>then、catch方法来进行相关操作</p><p>三种状态：等待 成功 错误</p><h4 id="ES6的模块化"><a href="#ES6的模块化" class="headerlink" title="ES6的模块化"></a>ES6的模块化</h4><p>模块化技术指代的是将对应的功能代码拆分为一个个的模块，完成对应的复用。</p><h5 id="require-js的模块化（一个内容要导入必须先导出）"><a href="#require-js的模块化（一个内容要导入必须先导出）" class="headerlink" title="require.js的模块化（一个内容要导入必须先导出）"></a>require.js的模块化（一个内容要导入必须先导出）</h5><ul><li><h6 id="export-导出"><a href="#export-导出" class="headerlink" title="export 导出"></a>export 导出</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基础导出 一个文件只有一个 默认导出 第一种</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出变量的形式 第二种</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sayHi</span> = (<span class="params"></span>)=&gt;&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure></li><li><h6 id="import-导入"><a href="#import-导入" class="headerlink" title="import 导入"></a>import 导入</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 支持es6的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import 名字 from 路径地址 默认导出的 导入的名字随便写</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// import a from &#x27;./export.js&#x27; //第一种导入</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// a.sayHi()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(a.name)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 导出多个的导入 第二种导入</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;sayHi,name&#125; <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">sayHi</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="重点-：AMD和CMD的区别"><a href="#重点-：AMD和CMD的区别" class="headerlink" title="重点 ：AMD和CMD的区别"></a>重点 ：AMD和CMD的区别</h5><ol><li><p>CMD和AMD都是为了JavaScript模块化开发的规范</p></li><li><p>CMD是sea.js推广过程中对模块定义的规范化产出；AMD是require.js推广过程中对模块定义的规范化产出</p></li><li><p>AMD是异步模块定义的意思，他是一个在浏览器端模块开发规范，由于不是JS原生支持，使用AMD规范进行页面开发时，需要对应的函数库</p></li><li><p>require.js解决的问题，多个JS文件可以有依赖关系，依赖关系&amp;spm&#x3D;1001.2101.3001.7020)，被依赖的文件需要早于依赖它的文件加载到浏览器，JS加载的时候浏览器停止页面渲染，加载文件越多，页面失去响应时间越长</p></li><li><p>CMD通用模块定义，是国内发展的，有浏览器实现Sea.js，Sea.js要解决的问题和require.js一样，只不过模块定义的方式和模块加载时机有所不同</p></li><li><p>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></p></li></ol><h3 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h3><p>​ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.编写⼀个动物类，该类包含name的属性，和say的⽅法。 </span></span><br><span class="line"><span class="comment">通过say⽅法可以打印动物说话了。编写⼀个Dog类继承动物类.</span></span><br><span class="line"><span class="comment">要求:</span></span><br><span class="line"><span class="comment">该类中包含颜⾊的属性，该类重写say⽅法，要求打印⽗类的say⽅法⾥的内容，</span></span><br><span class="line"><span class="comment">并且打印 动物颜⾊+动物名字+“叫了”。（备注狗会一直叫）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;,说话了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animals</span>  &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,color</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>+<span class="string">&#x27;的&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;,叫了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;哈士奇&#x27;</span>,<span class="string">&#x27;黑白色&#x27;</span>)<span class="comment">//黑白色的哈士奇,叫了！</span></span><br><span class="line">dog.<span class="title function_">say</span>()</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>数据结构Set类似于数组，但是成员的值都是唯一的，没有重复的值。    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]);     </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 5    </span></span><br></pre></td></tr></table></figure><p>Set的属性和方法:    </p><ul><li>size : 数量 </li><li>key()：获取所有的key</li><li>values()：获取所有的values</li><li>add(value)：添加某个值，返回Set结构本身    </li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功    </li><li>has(value)：返回一个布尔值，表示该值是否为Set的成员    </li><li>clear()：清除所有成员，没有返回值</li></ul><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>WeakSet和Set一样都不存储重复的元素, 用法基本类似，但有一些不同点, WeakSet的成员只能是对象，而不能是其他类型的值。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map 是一个“超对象”，其 key 除了可以是 String 类型之外，还可以为其他类型（如：对象）  let map &#x3D; new </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],[<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],[<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>]]);</span><br></pre></td></tr></table></figure><p>Map的属性方法和 Set 差不多:</p><ul><li>size：返回成员总数</li><li>set(key, value)：设置一个键值对</li><li>get(key)：读取一个键</li><li>has(key)：返回一个布尔值，表示某个键是否在Map数据结构中</li><li>delete(key)：删除某个键</li><li>clear()：清除所有成员</li><li>keys()：返回键名的遍历器</li><li>values()：返回键值的遍历器</li><li>entries()：返回所有成员的遍历器</li></ul><h3 id="Map和Set的异同"><a href="#Map和Set的异同" class="headerlink" title="Map和Set的异同"></a>Map和Set的异同</h3><h4 id="同"><a href="#同" class="headerlink" title="同"></a><strong>同</strong></h4><ul><li>map和set一样是关联式容器,它们的底层容器都是<strong>红黑树</strong></li><li>两种方法具有极快的查找速度</li><li>Map 和 Set 都不允许键重复</li></ul><h4 id="异"><a href="#异" class="headerlink" title="异"></a><strong>异</strong></h4><ul><li>初始化需要值不一样，Map需要的是一个二维数组，而Set 需要的是一维 Array 数组。</li><li>Map 是键值对的存在，键和值是分开的</li><li>Set 没有 value 只有 key，value 就是 key</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> ES5 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动(上)</title>
      <link href="/2023/06/06/TechnicalArticles/js/15.JS%E8%BF%90%E5%8A%A8(%E4%B8%8A)/"/>
      <url>/2023/06/06/TechnicalArticles/js/15.JS%E8%BF%90%E5%8A%A8(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<h1 id="运动-上"><a href="#运动-上" class="headerlink" title="运动(上)"></a>运动(上)</h1><p>笔记不重要，思想最重要！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动(下)</title>
      <link href="/2023/06/06/TechnicalArticles/js/16.JS%E8%BF%90%E5%8A%A8(%E4%B8%8B)/"/>
      <url>/2023/06/06/TechnicalArticles/js/16.JS%E8%BF%90%E5%8A%A8(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<h1 id="运动-下"><a href="#运动-下" class="headerlink" title="运动(下)"></a>运动(下)</h1><h3 id="运动的要素"><a href="#运动的要素" class="headerlink" title="运动的要素"></a>运动的要素</h3><ul><li>当前值</li><li>目标值</li><li>迭代量</li></ul><h3 id="运动分类"><a href="#运动分类" class="headerlink" title="运动分类"></a>运动分类</h3><ul><li>匀速运动(迭代量不变)·</li><li>缓冲运动(迭代呈越来越小)</li><li>链式运动(通过回调函数来执行下一个动画)</li></ul><h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p>控制对应的图片轮播，主要的方式有:</p><h4 id="位置变化轮播"><a href="#位置变化轮播" class="headerlink" title="位置变化轮播"></a>位置变化轮播</h4><h4 id="透明度轮播"><a href="#透明度轮播" class="headerlink" title="透明度轮播"></a>透明度轮播</h4><h4 id="图片切换轮播"><a href="#图片切换轮播" class="headerlink" title="图片切换轮播"></a>图片切换轮播</h4><h4 id="无缝轮播"><a href="#无缝轮播" class="headerlink" title="无缝轮播"></a>无缝轮播</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 运动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型和继承</title>
      <link href="/2023/06/06/TechnicalArticles/js/17.%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
      <url>/2023/06/06/TechnicalArticles/js/17.%E5%8E%9F%E5%9E%8B%E5%92%8C%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="day18-原型和继承"><a href="#day18-原型和继承" class="headerlink" title="day18 原型和继承"></a>day18 原型和继承</h1><h3 id="函数的prototype"><a href="#函数的prototype" class="headerlink" title="函数的prototype"></a>函数的prototype</h3><ul><li><p>每一个函数内都存在一个prototype的对象空间 构造函数也是函数，所以也存在</p></li><li><p>prototype这个空间会在预编译的时候进行开辟（只开辟一次）</p></li><li><p>prototype里面的内容可以直接通过对应的 <strong>实例对象.方法名</strong> 来访问</p></li></ul><blockquote><p>利用prototype可以解决构造函数会开辟多个内存空间的问题</p></blockquote><h3 id="class的相关机制"><a href="#class的相关机制" class="headerlink" title="class的相关机制"></a>class的相关机制</h3><p>class里，constructor外部声明的函数会默认直接加入到原型prototype中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Animal</span>().<span class="property">say</span> === <span class="keyword">new</span> <span class="title class_">Animal</span>().<span class="property">say</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="对象的-proto"><a href="#对象的-proto" class="headerlink" title="对象的__proto__"></a>对象的<code>__proto__</code></h3><p><code>__ptoto__</code>是对象的一个对象空间，他指向对应的构造函数的prototype</p><p><strong>对象的<code>__proto__</code>保存着该对象的构造函数的prototype</strong></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>在<code>_proto_</code>寻找属性的过程形成的链子 被称为原型链</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fucntino <span class="title class_">Person</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span>)<span class="comment">//person构造函数的prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span>.<span class="property">__proto__</span>)<span class="comment">//Person构造函数的prototype(也是个对象)</span></span><br></pre></td></tr></table></figure><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">test</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Animal&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wooh!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line">dog.<span class="property">age</span> = <span class="number">9</span></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>()</span><br><span class="line">animal.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">obj.<span class="property">weight</span> = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>)<span class="comment">//Animal &#123;constructor: ƒ, say: ƒ&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//Animal &#123;constructor: ƒ, say: ƒ&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>.<span class="property">__proto__</span>)<span class="comment">//Animal的prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>)<span class="comment">//Object的prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>)<span class="comment">//null</span></span><br></pre></td></tr></table></figure><h4 id="模拟实现instanceOf-原型链查找构造函数"><a href="#模拟实现instanceOf-原型链查找构造函数" class="headerlink" title="模拟实现instanceOf 原型链查找构造函数"></a>模拟实现instanceOf 原型链查找构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyInstanceOf</span>(<span class="params">obj,con</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(obj.<span class="property">__proto__</span>)&#123;</span><br><span class="line">        obj = obj.<span class="property">__proto__</span></span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">constructor</span> == con)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyInstanceOf</span>(dog,<span class="title class_">Animal</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="模拟实现一个new"><a href="#模拟实现一个new" class="headerlink" title="模拟实现一个new"></a>模拟实现一个new</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;<span class="comment">//新建一个空对象</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = fn.<span class="property"><span class="keyword">prototype</span></span><span class="comment">//将构造函数的原型放到这个空对象的__proto__上</span></span><br><span class="line">    fn.<span class="title function_">call</span>(obj)<span class="comment">//执行构造函数，将this指向这个新对象</span></span><br><span class="line">    <span class="keyword">return</span> obj<span class="comment">//最后返回这个构造完成的对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myNew</span>(<span class="title class_">Person</span>));</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h4><p>extends</p><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><ul><li><p>原型继承</p><p>new一个父类对象，放在子类的原型上，此后new一个子类对象，都可以继承到父类的属性和方法</p><p>缺点：继承的属性，无法赋初始值</p></li><li><p>对象冒充继承</p><p>将父类的构造函数当做普通函数执行，并且将this指向改为子类</p><p>缺点：无法继承原型方法</p></li><li><p>组合继承</p><p>结合原型继承和对象冒充继承</p><p>缺点：原型上会有重复的属性</p></li><li><p>寄生组合继承</p><p>利用寄生原型（将父类原型对象加入到子类的原型上）+对象冒充</p><p>原型上不再会有重复的属性,但是不会继承静态的属性和方法</p></li></ul><h5 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h5><p>new一个父类对象，放在子类的原型上，此后new一个子类对象，都可以继承到父类的属性和方法</p><ul><li>缺点：继承的属性，无法赋初始值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">score</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//new一个Person对象，放在Student的原型上，此后new一个student对象，都可以继承到Person的属性和方法</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>))<span class="comment">//Student</span></span><br><span class="line"><span class="comment">//继承的属性，无法赋初始值,因为是个新的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>).<span class="property">name</span>)<span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>).<span class="property">age</span>)<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>).<span class="title function_">sayHello</span>()<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h5 id="对象冒充继承"><a href="#对象冒充继承" class="headerlink" title="对象冒充继承"></a>对象冒充继承</h5><p>将父类的构造函数当做普通函数执行，并且将this指向改为子类</p><ul><li>缺点：无法继承方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象冒充继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">score,name,age</span>) &#123;</span><br><span class="line">    <span class="comment">// 将Person的构造函数当做普通函数执行，并且将this指向改为Student</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name,age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="number">18</span>))<span class="comment">//Student &#123;name: &#x27;zs&#x27;, age: 18, score: 99&#125;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>).<span class="title function_">sayHello</span>()<span class="comment">//报错，无法继承到Person的原型方法</span></span><br></pre></td></tr></table></figure><h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><p>结合原型继承和对象冒充继承</p><ul><li>缺点：原型上会有重复的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生组合继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结合原型继承和对象冒充继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">score, name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 将Person的构造函数当做普通函数执行，并且将this指向改为子类</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new 一个Person对象，放在Student的原型上，此后new一个student对象，都可以继承到Person的属性和方法</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="number">18</span>))<span class="comment">//Student &#123;name: &#x27;zs&#x27;, age: 18, score: 99&#125;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>).<span class="title function_">sayHello</span>()<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h5 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h5><p>利用寄生原型（将父类原型对象加入到子类的原型上）+对象冒充</p><ul><li>原型上不再会有重复的属性</li><li>但是不会继承静态的属性和方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寄生组合继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结合原型继承和对象冒充继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">score, name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 将Person的构造函数当做普通函数执行，并且将this指向改为子类</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将父类的原型对象加入到子类的原型对象</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="number">18</span>))<span class="comment">//Student &#123;name: &#x27;zs&#x27;, age: 18, score: 99&#125;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99</span>).<span class="title function_">sayHello</span>()<span class="comment">//hello</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 原型 </tag>
            
            <tag> 原型链 </tag>
            
            <tag> 继承 </tag>
            
            <tag> prototype </tag>
            
            <tag> new </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包和Promise</title>
      <link href="/2023/06/06/TechnicalArticles/js/18.%E9%97%AD%E5%8C%85%E5%92%8CPromise/"/>
      <url>/2023/06/06/TechnicalArticles/js/18.%E9%97%AD%E5%8C%85%E5%92%8CPromise/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包和Promise"><a href="#闭包和Promise" class="headerlink" title="闭包和Promise"></a>闭包和Promise</h1><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>函数嵌套函数，内部函数拥有外部函数的引用</p><p>优点：</p><ul><li>避免的了全局污染</li><li>扩大了对应的变量的作用域</li><li>不需要创建新的对象，使用过程中效率会更高</li></ul><p>缺点</p><ul><li>因为会一直保持引用，会导致内存一直被占用</li><li>在ie浏览器的情况下会导致内存泄漏</li></ul><h3 id="函数的预编译"><a href="#函数的预编译" class="headerlink" title="函数的预编译"></a>函数的预编译</h3><h4 id="局部作用域的函数预编译"><a href="#局部作用域的函数预编译" class="headerlink" title="局部作用域的函数预编译"></a>局部作用域的函数预编译</h4><ol><li>创建AO对象（Activation Object）（开辟一个内存空间）</li><li>给函数里面的形参、遍历进行赋值操作（undefined）</li><li>形参和实参同步</li><li>给对应的函数进行赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    a=<span class="number">10</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步，创建AO对象</span></span><br><span class="line"><span class="variable constant_">AO</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步，将形参a的值设置为undefined</span></span><br><span class="line"><span class="variable constant_">AO</span>&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步，将实参1赋值给a</span></span><br><span class="line"><span class="variable constant_">AO</span>&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第四步，函数声明提升</span></span><br><span class="line"><span class="variable constant_">AO</span>&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;S</span><br></pre></td></tr></table></figure><h4 id="全局作用域的函数预编译"><a href="#全局作用域的函数预编译" class="headerlink" title="全局作用域的函数预编译"></a>全局作用域的函数预编译</h4><ol><li>创建AO对象（global Object）（开辟一个内存空间）</li><li>给函数里面的形参、遍历进行赋值操作（undefined）</li><li>形参和实参同步</li><li>给对应的函数进行赋值</li></ol><h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h3><p>规定时间内重复触发只执行一次（最后一次）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">callback ,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">callback</span>()</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="title function_">debounce</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">500</span>))</span><br></pre></td></tr></table></figure><h3 id="节流-throttling"><a href="#节流-throttling" class="headerlink" title="节流(throttling)"></a>节流(throttling)</h3><p>规定一定时间段执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttling</span>(<span class="params">callback ,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span><span class="comment">//节流阀</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 判断是否有操作进行,如果没有，就执行</span></span><br><span class="line">        <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">callback</span>()<span class="comment">//执行操作</span></span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                timer = <span class="literal">null</span><span class="comment">//释放节流阀</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">btn.<span class="property">onclick</span>=<span class="title function_">throttling</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="函数柯里化-currying"><a href="#函数柯里化-currying" class="headerlink" title="函数柯里化(currying)"></a>函数柯里化(currying)</h3><p>将一个多参数的函数 分成多个函数 （彼此之间可以任意组成）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单柯里化</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> a + b + c</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//简单函数柯里化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b + c</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>))<span class="comment">//6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数柯里化</span></span><br><span class="line"><span class="comment">// 求和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="comment">//接收传入的参数 arguments (不包含第一个fn)</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//接收</span></span><br><span class="line">        <span class="keyword">let</span> allArgs = args.<span class="title function_">concat</span>([...<span class="variable language_">arguments</span>])</span><br><span class="line">        <span class="keyword">if</span>(allArgs.<span class="property">length</span> &lt; fn.<span class="property">length</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> currying.<span class="title function_">apply</span>(<span class="variable language_">this</span>,[fn].<span class="title function_">concat</span>(allArgs))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,allArgs)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cuyfn = <span class="title function_">currying</span>(sum)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cuyfn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cuyfn</span>(<span class="number">1</span>)(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cuyfn</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p><strong>核心思路</strong></p><p>参数没到返回函数，参数到了返回结果</p><hr><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。</p><h4 id="为什么需要这个？"><a href="#为什么需要这个？" class="headerlink" title="为什么需要这个？"></a>为什么需要这个？</h4><p>解决异步问题</p><p>将异步代码同步执行</p><p>解决回调地狱</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><p>对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，</p><p>有三种状态：</p><ul><li><p>pending（进行中）</p></li><li><p>fulfilled(resolved)（已成功）</p></li><li><p>rejected（已失败）</p></li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p></li><li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p></li></ol><p><img src="/../../images/promise.png" alt="promise"></p><h4 id="promise的声明"><a href="#promise的声明" class="headerlink" title="promise的声明"></a>promise的声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入函数来进行构建 传入的函数内有两个参数传递</span></span><br><span class="line"><span class="comment">//new Promise是一个同步执行的代码 它的里面可以包含异步代码</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolved,rejected</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)<span class="comment">//同步代码</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="promise相关原型方法"><a href="#promise相关原型方法" class="headerlink" title="promise相关原型方法"></a>promise相关原型方法</h4><h5 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h5><ul><li>then用于处理对应的promise状态变化的方法</li><li>有两个参数，一个是成功的处理函数，一个是拒绝的处理函数</li><li>成功的处理函数里面可以接受对应的resolve函数携带的参数</li><li>拒绝的处理函数里面可以接受对应的reject函数携带的参数</li><li>拒绝的处理函数里面还可以捕获对应的promise中抛出的错误</li><li>在then中return的数据会被下一级的then方法接收</li><li>then会发生值穿透（上层的then方法没有对应的函数作为参数时）</li></ul><h5 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h5><ul><li>捕获promise错误，以及reject方法调用的结果（跟then方法中的第二个参数相同）</li></ul><h5 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h5><ul><li>状态发生变化就会调用的函数（不管成功还是失败）</li></ul><h4 id="Promise相关静态方法"><a href="#Promise相关静态方法" class="headerlink" title="Promise相关静态方法"></a>Promise相关静态方法</h4><p>所有的静态方法返回的都是一个新的promise对象</p><h5 id="resolve"><a href="#resolve" class="headerlink" title="resolve()"></a>resolve()</h5><p>返回一个状态为成功的promise</p><h5 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h5><p>返回一个状态为拒绝的promise</p><h5 id="race"><a href="#race" class="headerlink" title="race()"></a>race()</h5><p>竞速方法，比较执行速度，谁先执行完，不区分状态，返回速度最快的promise</p><h5 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h5><p>同步并行执行多个promise，返回一个promise，包含所有结果（若遇到reject，则只有一个reject结果）</p><h5 id="allSettled"><a href="#allSettled" class="headerlink" title="allSettled()"></a>allSettled()</h5><p>同步并行执行多个promise，返回一个promise，（只要执行完成，则是resolve）</p><h2 id="async及await"><a href="#async及await" class="headerlink" title="async及await"></a>async及await</h2><p>async和awiat是es7新增的修饰关键词</p><p>async属于语法糖（await一定要在async里面使用 且<strong>await修饰的是promise</strong>）</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><ul><li>用于修饰函数,被其修饰的函数会返回一个promise对象</li><li>在修饰的函数内返回值相当于调用了resolve方法， 返回值会被传递给then</li><li>在修饰的函数内报错相当于调用了reject方法，错误会被传递给catch</li><li>默认会执行then方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> promise = <span class="title function_">sayHello</span>()</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)<span class="comment">//hello</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="awiat"><a href="#awiat" class="headerlink" title="awiat"></a>awiat</h3><ul><li>用于修饰promise，且只能是在async修饰的函数内使用，它会让当前的<strong>js引擎线程</strong>(执行上下文等待)，当前修饰的promise状态不为pending的时候就会释放</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolved, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="title function_">resolved</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>()<span class="comment">//1 2</span></span><br></pre></td></tr></table></figure><h3 id="使用async和awiat来解决回调地狱"><a href="#使用async和awiat来解决回调地狱" class="headerlink" title="使用async和awiat来解决回调地狱"></a>使用async和awiat来解决回调地狱</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolved, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="title function_">resolved</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolved, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">            <span class="title function_">resolved</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolved, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">            <span class="title function_">resolved</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>()<span class="comment">//1 2 3 4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
            <tag> promise </tag>
            
            <tag> 函数柯里化 </tag>
            
            <tag> 函数预编译 </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件轮询</title>
      <link href="/2023/06/06/TechnicalArticles/js/19.EventLoop%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2/"/>
      <url>/2023/06/06/TechnicalArticles/js/19.EventLoop%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="EventLoop-事件轮询"><a href="#EventLoop-事件轮询" class="headerlink" title="EventLoop 事件轮询"></a>EventLoop 事件轮询</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​EventLoop是js引擎的一个运行机制，主要描述的是，当程序执行到异步任务时，会将异步任务划分为宏任务和微任务并且放入对应的宏任务队列和微任务队列，然后js引擎不断交替执行宏任务及其包含的微任务，以上行为被称之为事件轮询</p><h3 id="事件队列"><a href="#事件队列" class="headerlink" title="事件队列"></a>事件队列</h3><p>队列是先进先出的一个数据结构，事件队列就是其异步任务的一个队列（先进先执行）</p><h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h3><p>队列是先进后出的一个数据结构，主要用于执行对应的js代码</p><h3 id="事件队列的分类"><a href="#事件队列的分类" class="headerlink" title="事件队列的分类"></a>事件队列的分类</h3><h4 id="宏任务（线程直接分配的）"><a href="#宏任务（线程直接分配的）" class="headerlink" title="宏任务（线程直接分配的）"></a>宏任务（线程直接分配的）</h4><p>script标签、定时器(setInterval,setTimeout)、I&#x2F;O、UI rendering等</p><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><p>promise.then()、promise.catch()、promise.finally()</p><p><strong>宏任务进宏任务队列，微任务进微任务队列</strong></p><p><strong>EventLoop主要是控制宏任务队列的任务执行及微任务队列的任务执行</strong></p><p><img src="/../../images/image-20230304180507447.png" alt="image-20230304180507447"></p><p><strong>先宏后微</strong></p><p>先走一个个的宏任务，再走其包含的微任务</p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//宏任务</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeOut&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>) </span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//微任务</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)<span class="comment">//宏任务</span></span><br><span class="line"><span class="comment">//script start</span></span><br><span class="line"><span class="comment">//promise1</span></span><br><span class="line"><span class="comment">//script end</span></span><br><span class="line"><span class="comment">//promise2</span></span><br><span class="line"><span class="comment">//settimeOut</span></span><br></pre></td></tr></table></figure><p>流程如下：<br>1、打印script start，</p><p>2、遇到setTimeout放到宏任务队列里</p><p>3、打印promise1</p><p>4、将.then回调放入微任务队列里</p><p>5、打印script end</p><p>6、执行栈已清空，执行微任务队列打印promise2（<strong>promise里的是同步代码，.then里的才是异步的</strong>）</p><p>7、微任务队列已清空，执行宏任务队列setTimeOut</p><p>8、所有任务队列清空</p><p>（如果还有任务的话则继续轮询 宏任务 &#x3D;&gt; 微任务 &#x3D;&gt; 宏任务 &#x3D;&gt; 微任务…）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> EventLoop </tag>
            
            <tag> 事件轮询 </tag>
            
            <tag> 宏任务 </tag>
            
            <tag> 微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2023/06/06/TechnicalArticles/js/20.Ajax/"/>
      <url>/2023/06/06/TechnicalArticles/js/20.Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​Ajax即<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML（异步JavaScript和XML）在 2005年被Jesse James Garrett提出的新术语，用来描述一种使用<a href="https://baike.baidu.com/item/%E7%8E%B0%E6%9C%89%E6%8A%80%E6%9C%AF/5183771?fromModule=lemma_inlink">现有技术</a>集合的‘新’方法，包括: <a href="https://baike.baidu.com/item/HTML/97049?fromModule=lemma_inlink">HTML</a> 或 <a href="https://baike.baidu.com/item/XHTML/316621?fromModule=lemma_inlink">XHTML</a>, CSS, <a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>, <a href="https://baike.baidu.com/item/DOM/50288?fromModule=lemma_inlink">DOM</a>, XML, XSLT, 以及最重要的<a href="https://baike.baidu.com/item/XMLHttpRequest/6788735?fromModule=lemma_inlink">XMLHttpRequest</a>。使用Ajax技术网页应用能够快速地将<a href="https://baike.baidu.com/item/%E5%A2%9E%E9%87%8F%E6%9B%B4%E6%96%B0/8188584?fromModule=lemma_inlink">增量更新</a>呈现在用户界面上，而不需要重载(刷新)整个页面，这使得程序能够更快地回应用户的操作。</p><h3 id="数据请求流程"><a href="#数据请求流程" class="headerlink" title="数据请求流程"></a>数据请求流程</h3><p><img src="/../../images/image-20230307095955872.png" alt="image-20230307095955872"></p><h3 id="http状态码status"><a href="#http状态码status" class="headerlink" title="http状态码status"></a>http状态码status</h3><p>主要取值为100~599 分别用对应的开头来表示对应的内容</p><table><thead><tr><th align="center">开头状态码</th><th align="left">含义</th><th align="left">常用状态码</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">服务器接收成功，需要下一步</td><td align="left">100</td></tr><tr><td align="center">2</td><td align="left">表示成功</td><td align="left">200</td></tr><tr><td align="center">3</td><td align="left">表示重定向</td><td align="left">304</td></tr><tr><td align="center">4</td><td align="left">客户端错误</td><td align="left">400、401、402、403、404</td></tr><tr><td align="center">5</td><td align="left">服务端错误</td><td align="left">500、501</td></tr></tbody></table><h3 id="Ajax的基础代码实现"><a href="#Ajax的基础代码实现" class="headerlink" title="Ajax的基础代码实现"></a>Ajax的基础代码实现</h3><p>核心对象：XMLHttpRequest(xhr)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化请求对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">//建立连接 (get post)</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://jsonplaceholder.typicode.com/todos&#x27;</span>)</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">//监听请求的变化 readyState状态值(xhr独有)</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;readystatechange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在监听的处理函数内容接收响应数据</span></span><br><span class="line">    <span class="comment">//判断是否有数据返回 </span></span><br><span class="line">    <span class="comment">//readyState(0-4) 0:请求未发送; 1:请求准备发送; 2:请求发送成功; 3:请求成功,响应中 4:请求成功,响应完成;</span></span><br><span class="line">    <span class="comment">//http状态码 xhr.status(100-599)</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseXML</span>)<span class="comment">//接收xml</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)<span class="comment">//接收文本 字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="xhr-XMLHttpRequest-的相关方法及属性"><a href="#xhr-XMLHttpRequest-的相关方法及属性" class="headerlink" title="xhr(XMLHttpRequest)的相关方法及属性"></a>xhr(XMLHttpRequest)的相关方法及属性</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><p>readyState xhr的状态值</p><p>(0:请求未发送; 1:请求准备发送; 2:请求发送成功; 3:请求成功,响应中 4:请求成功,响应完成)</p></li><li><p>response 获取响应</p></li><li><p>responseText 获取响应文本</p></li><li><p>responseType 获取响应类型</p></li><li><p>responseURL 获取响应地址</p></li><li><p>responseXML 获取响应的xml</p></li><li><p>status 获取http的状态码(后台返回的)</p></li><li><p>statusText 获取http的状态文本(后台返回的)</p></li><li><p>timeout 超时时间(设置的)</p></li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>upload 返回一个上传对象（XMLHttpRequestUpload）</li><li>open 打开一个连接，(传入对应的请求方式和请求地址）</li><li>send 发送一个请求，（内部传入的是请求体内容）</li><li>getAllResponseHeader  获取所有的响应头（返回的是字符串）</li><li>getResponseHeader 获取指定的响应头（返回的是字符串）</li><li>overrideMimeType 该方法是指定一个MIME类型用于替代服务器指定的类型，使服务端响应信息中传输的数据按照该指定MIME类型处理。例如强制使流方式处理为”text&#x2F;xm”类型处理时会被使用到，即使服务器在响应头中并没有这样指定</li><li>getRequestHeader 获取请求头 </li><li>setRequestHeader 设置请求头 (传入对应的请求头名字和值) 需在发送前设置</li></ul><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul><li>readystatechange readyState值发生变化时调用</li><li>timeout 超时之后调动</li></ul><h4 id="后台接口返回具备的三个内容（响应）"><a href="#后台接口返回具备的三个内容（响应）" class="headerlink" title="后台接口返回具备的三个内容（响应）"></a>后台接口返回具备的三个内容（响应）</h4><ul><li>状态码 (status)</li><li>状态文本 (相关信息statusText)</li><li>数据 (data)</li></ul><h3 id="请求和响应的组成"><a href="#请求和响应的组成" class="headerlink" title="请求和响应的组成"></a>请求和响应的组成</h3><h4 id="请求相关"><a href="#请求相关" class="headerlink" title="请求相关"></a>请求相关</h4><p>请求头 requestHeader（请求头先于请求体被服务器接收 ，服务器验证后再接收请求体）</p><ul><li>Content-Type 请求的内容的类型</li><li>Cookie</li><li>Connection http1.1新增 （Keep-alive）缓存当前连接,也就是长连接</li><li>User-Agent 浏览器相关版本信息</li><li>Referer 对应的请求的详细地址</li></ul><p>请求体  requestBody</p><ul><li>post 将请求的数据填充到请求体（不可见的）</li><li>请求体数量大 分段发送（后台获取的时候拼接获取）</li></ul><h4 id="响应相关"><a href="#响应相关" class="headerlink" title="响应相关"></a>响应相关</h4><p>响应头 responseHeader</p><ul><li>Cache-Control 缓存控制器(强制缓存 http1.1新增)</li><li>expire 缓存控制（1.0）</li><li>Content-Type 响应的内容类型</li><li>Accpet-Control-Allow-Origin 设置跨域的响应头</li><li>last-modified  文件最后修改的时间（协商缓存）</li><li>etag 文件标识名（协商缓存）</li></ul><p>响应体 responseBody</p><h3 id="强制缓存和协商缓存"><a href="#强制缓存和协商缓存" class="headerlink" title="强制缓存和协商缓存"></a>强制缓存和协商缓存</h3><h4 id="http的缓存"><a href="#http的缓存" class="headerlink" title="http的缓存"></a>http的缓存</h4><p>为了节省对应的资源，减少对应的请求。将内容缓存到本地，就不再需要再次请求服务器了，同时也加快了加载速度</p><h4 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h4><ul><li>使用cache-control中的max-age来控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cache-<span class="attr">control</span>:no-cache <span class="comment">//开启强制缓存</span></span><br><span class="line">cache-<span class="attr">control</span>:max-<span class="title function_">age</span>(<span class="number">9000</span>) <span class="comment">//规定时间内使用强制缓存</span></span><br><span class="line">cache-<span class="attr">control</span>:public <span class="comment">//一定缓存（第三方代理缓存）</span></span><br><span class="line">cache-<span class="attr">control</span>:private <span class="comment">//看客户端的处理</span></span><br></pre></td></tr></table></figure><ul><li>Expires: Thu, 25 May 2020 12:30:00 GMT;</li></ul><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><p>​当客户端第二次请求这个资源的时候，会对Expires和cache-control中的max-age字段进行校验，若校验通过，则直接会从缓存中获取数据，并且状态码是200</p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="/../../images/00083af5858e47e4b70c567da342ffd2.png" alt="img"></h5><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><ul><li>last-modified 最后的修改时间</li><li>etag 文件表示名</li></ul><h5 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h5><p>​当客户端第一次访问服务器时，服务器会响应E-Tag和Last-Modified字段，当客户端第二次请求同一个数据的时候，会带上这两个字段。服务器会进行E-Tag和Last-Modified的校验，若校验通过，则会直接返回状态码 304 ，且不携带响应体的报文段，告知客户端，这个资源的缓存有效，可以直接使用。</p><p><img src="/../../images/16fde59ebf5f4970832026830c592c47.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>默认情况下，浏览器会优先考虑强制缓存，其次再是协商缓存</li><li>如果使用强制缓存，那么协商缓存就不会被使用，则不会有请求的发送</li><li>强制缓存成功的状态码是200,协商缓存成功的状态码为304</li><li>强制缓存使用对应的响应头的cache-control中的max-age和Expires来控制，协商缓存使用响应头的E-Tag和Last-Modified来控制</li><li>强制缓存没有请求，协商缓存必须请求</li><li>在不用框架的情况下，协商缓存是需要同后端协作完成的</li></ul><h3 id="get请求和post请求"><a href="#get请求和post请求" class="headerlink" title="get请求和post请求"></a>get请求和post请求</h3><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><ul><li>get请求一般用于获取数据（安全性低效率高速度快)</li><li>默认的请求方式为get请求（没有设置对应的请求那么就是get请求)</li><li>传输的参数利用?进行拼接，拼接到对应的url</li><li>get请求会默认缓存对应的参数</li><li>传输的参数会在请求头中url</li><li>get请求传输的数据大小有限制(2kb)</li><li>get的请求参数中不可以带有非ASCII码字符</li></ul><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><ul><li>post请求的数据(封装为一个表单对象）</li><li>在请求体中post请求相对get要安全</li><li>post请求的数据量大于get(数据没有大小限制)</li><li>post请求的数据不会被缓存</li><li>post请求必须手动设置缓存</li></ul><h4 id="get请求封装"><a href="#get请求封装" class="headerlink" title="get请求封装"></a>get请求封装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">params = &#123;&#125;, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!params.<span class="property">url</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;必须传入url地址!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> baseUrl = params.<span class="property">url</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="string">&#x27;url&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> s = baseUrl.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span></span><br><span class="line">            baseUrl += <span class="string">`<span class="subst">$&#123;s + key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, baseUrl)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">params = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!params.<span class="property">url</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;必须传入url地址!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> baseUrl = params.<span class="property">url</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="string">&#x27;url&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> s = baseUrl.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span></span><br><span class="line">            baseUrl += <span class="string">`<span class="subst">$&#123;s + key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, baseUrl)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    <span class="comment">// 返回一个新的promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, rejcet</span>) =&gt;</span> &#123;</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="post请求封装"><a href="#post请求封装" class="headerlink" title="post请求封装"></a>post请求封装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">params = &#123;&#125;, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!params.<span class="property">url</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;必须传入url地址!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> baseUrl = params.<span class="property">url</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="keyword">let</span> paramString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="string">&#x27;url&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> s = paramString?<span class="string">&#x27;&amp;&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">            paramString += <span class="string">`<span class="subst">$&#123;s + key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, baseUrl)</span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>post请求数据发送使用send函数携带 (post请求携带到对应的请求体中)</li><li>在发送之前要指定对应的请求头 content-type ：application&#x2F;x-www-form-urlencoded （指定数<br>据类型为表单）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">params = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!params.<span class="property">url</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;必须传入url地址!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> baseUrl = params.<span class="property">url</span></span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="keyword">let</span> paramString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="string">&#x27;url&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> s = paramString ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">            paramString += <span class="string">`<span class="subst">$&#123;s + key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, baseUrl)</span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>(paramString)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get和post联和封装"><a href="#get和post联和封装" class="headerlink" title="get和post联和封装"></a>get和post联和封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Ajax</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">url, time</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">baseUrl</span> = url</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timeout</span> = time</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createRequest</span>(<span class="params">option</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> defaultOption = &#123;</span><br><span class="line">            <span class="attr">baseUrl</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">3000</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> option) &#123;</span><br><span class="line">            defaultOption[key] = option[key]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Ajax</span>(defaultOption.<span class="property">baseUrl</span>, defaultOption.<span class="property">timeout</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备对应的request方法&#123;url,conentType,method,data&#125;</span></span><br><span class="line">    <span class="title function_">request</span>(<span class="params">requestConfig</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (requestConfig.<span class="property">url</span> == <span class="literal">undefined</span> ||</span><br><span class="line">            (requestConfig.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() != <span class="string">&#x27;get&#x27;</span> &amp;&amp;</span><br><span class="line">                requestConfig.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() != <span class="string">&#x27;post&#x27;</span>) ||</span><br><span class="line">            !requestConfig.<span class="property">data</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数错误！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 默认以表单提交</span></span><br><span class="line">        requestConfig.<span class="property">conentType</span> = requestConfig.<span class="property">conentType</span> ? requestConfig.<span class="property">conentType</span> : <span class="string">&#x27;application/x-www/urlencoded&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一个xhr对象</span></span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        <span class="comment">// 设置对应的timeout</span></span><br><span class="line">        xhr.<span class="property">timeout</span> = <span class="variable language_">this</span>.<span class="property">timeout</span></span><br><span class="line">        <span class="comment">// get数据的拼接 拼接到url</span></span><br><span class="line">        <span class="keyword">let</span> url = <span class="variable language_">this</span>.<span class="property">baseUrl</span> + requestConfig.<span class="property">url</span></span><br><span class="line">        <span class="keyword">if</span> (requestConfig.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> requestConfig.<span class="property">data</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (url.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">                    url += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;requestConfig.data[key]&#125;</span>`</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    url += <span class="string">`?<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;requestConfig.data[key]&#125;</span>`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开连接</span></span><br><span class="line">        xhr.<span class="title function_">open</span>(requestConfig.<span class="property">method</span>, url)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置请求头</span></span><br><span class="line">        <span class="keyword">if</span> (requestConfig.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, requestConfig.<span class="property">conentType</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// post数据的拼接 拼接到url</span></span><br><span class="line">        <span class="keyword">if</span> (requestConfig.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> pramsString = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> requestConfig.<span class="property">data</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pramsString) &#123;</span><br><span class="line">                    pramsString += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;requestConfig.data[key]&#125;</span>`</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pramsString += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;requestConfig.data[key]&#125;</span>`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(requestConfig);</span><br><span class="line">        <span class="comment">// console.log(pramsString)</span></span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        xhr.<span class="title function_">send</span>(pramsString)</span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, rejcet</span>) =&gt;</span> &#123;</span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2&#125;$/</span>.<span class="title function_">test</span>(xhr.<span class="property">status</span>)) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> http </tag>
            
            <tag> ajax </tag>
            
            <tag> get </tag>
            
            <tag> post </tag>
            
            <tag> 协商缓存 </tag>
            
            <tag> 强制缓存 </tag>
            
            <tag> 响应状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONP</title>
      <link href="/2023/06/06/TechnicalArticles/js/21.JSONP%E5%8F%8A%E7%BB%83%E4%B9%A0%E8%AE%B2%E8%A7%A3/"/>
      <url>/2023/06/06/TechnicalArticles/js/21.JSONP%E5%8F%8A%E7%BB%83%E4%B9%A0%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="JSONP及练习讲解"><a href="#JSONP及练习讲解" class="headerlink" title="JSONP及练习讲解"></a>JSONP及练习讲解</h1><h3 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a>浏览器的同源策略</h3><p>同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。</p><h4 id="同源策略包含的内容"><a href="#同源策略包含的内容" class="headerlink" title="同源策略包含的内容"></a>同源策略包含的内容</h4><ul><li>域名一致</li><li>协议一致</li><li>端口一致</li></ul><h4 id="由于同源策略产生的跨域问题"><a href="#由于同源策略产生的跨域问题" class="headerlink" title="由于同源策略产生的跨域问题"></a>由于同源策略产生的跨域问题</h4><p><img src="/../../images/image-20230308095602076.png" alt="image-20230308095602076"></p><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><h5 id="服务器在响应的时候添加对应的响应头：Access-Control-Allow-Origin"><a href="#服务器在响应的时候添加对应的响应头：Access-Control-Allow-Origin" class="headerlink" title="服务器在响应的时候添加对应的响应头：Access-Control-Allow-Origin"></a>服务器在响应的时候添加对应的响应头：Access-Control-Allow-Origin</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后端大致代码</span></span><br><span class="line">response.setResponseHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,*)</span><br><span class="line">response.setResponseHeader(<span class="string">&#x27;Access-Control-Allow-Origin-Method&#x27;</span>,*)</span><br></pre></td></tr></table></figure><h5 id="客户端和服务端配合：JSONP"><a href="#客户端和服务端配合：JSONP" class="headerlink" title="客户端和服务端配合：JSONP"></a>客户端和服务端配合：JSONP</h5><ul><li>服务端提供的接口为jsonp接口</li><li>客户端通过script标签不受跨域影响的特效来接受对应的数据（通过回调函数）</li></ul><h5 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h5><ul><li>devserver代理（vue提供的 用于测试）</li><li>服务器代理（Nginx等）</li></ul><p><strong>跨域问题是因为对应的TCP&#x2F;UDP导致的，如果要解决，可以放弃TCP&#x2F;UDP，使用webSocket（即时通信）</strong></p><h3 id="JSONP讲解"><a href="#JSONP讲解" class="headerlink" title="JSONP讲解"></a>JSONP讲解</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>JSONP是一种解决跨域的一种的方案，它实际上也是一个get请求，它是利用对应的script标签不受跨域影响的限制来解决对应的跨域问题。(带对应的href src等的标签都不受跨域的影响script link farmes等)</p><h4 id="JSONP解决跨域必须具备的点"><a href="#JSONP解决跨域必须具备的点" class="headerlink" title="JSONP解决跨域必须具备的点"></a>JSONP解决跨域必须具备的点</h4><ul><li>后端的接口必须为JSONP接口</li><li>前台使用script src链入的方式 通过传入对应的回调函数来接受对应的结果</li></ul><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p>准备一个JSONP接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=miqi&amp;cb=fn&#x27;</span></span><br></pre></td></tr></table></figure><p>准备script标签链入JSONP地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">准备script标签链入<span class="title class_">JSON</span>P地址</span><br><span class="line">wd 表示对应的关键词</span><br><span class="line">cb 表示回调函数 （服务器来执行）</span><br><span class="line">--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 全局变量属于window对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">result</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=前端开发&amp;cb=callback&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="更完整的示例"><a href="#更完整的示例" class="headerlink" title="更完整的示例"></a>更完整的示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ul&#x27;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> wd = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(wd);</span><br><span class="line">    <span class="comment">// 发送jsonp请求</span></span><br><span class="line">    <span class="title function_">jspnp</span>(wd)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全局变量属于window对象</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">callback</span> = <span class="keyword">function</span> (<span class="params">&#123;s&#125;</span>) &#123;</span><br><span class="line">    ul.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s.<span class="title function_">forEach</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        ul.<span class="property">innerHTML</span>+=<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li&gt;<span class="subst">$&#123;data&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文本改变后的事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jspnp</span>(<span class="params">wd</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.<span class="property">src</span> = <span class="string">`https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=<span class="subst">$&#123;wd&#125;</span>&amp;cb=callback`</span></span><br><span class="line">    <span class="comment">// 先添加</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(script)</span><br><span class="line">    <span class="comment">// 再删除</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> JSONP </tag>
            
            <tag> 跨域 </tag>
            
            <tag> 同源策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/06/06/TechnicalArticles/js/22.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/06/06/TechnicalArticles/js/22.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h3><ul><li>单一责任原则</li><li>开闭原则</li><li>里式置换原则</li><li>依赖倒转原则</li><li>接口隔离原则</li><li>迪米特法则</li><li>合成复用原则</li></ul><h3 id="三大模式"><a href="#三大模式" class="headerlink" title="三大模式"></a>三大模式</h3><ul><li>创建型模式（工厂模式、单例模式）</li><li>结构型模式（代理模式、装饰器模式、组合模式）</li><li>行为型模式（观察者模式）</li></ul><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>以工厂的形式来生产对象 （不关注对象的细节）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factory</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="comment">//属性赋值</span></span><br><span class="line">    obj.<span class="property">name</span> = name</span><br><span class="line">    <span class="comment">//返回对象</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">factory</span>(<span class="string">&#x27;zs&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>保证产生的对象只有一个（不会被污染）</p><h5 id="利用闭包实现"><a href="#利用闭包实现" class="headerlink" title="利用闭包实现"></a><strong>利用闭包实现</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">singleton</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> singleton = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//先判断对应的对象是否为null</span></span><br><span class="line">        <span class="comment">//如果为null，产生新对象</span></span><br><span class="line">        <span class="keyword">if</span>(!singleton)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> single1 = <span class="title function_">singleton</span>()</span><br><span class="line"><span class="keyword">let</span> single2 = <span class="title function_">singleton</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(single1 === single1)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="利用原型实现"><a href="#利用原型实现" class="headerlink" title="利用原型实现"></a><strong>利用原型实现</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">singletonPrototype</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//判断是否存在这个对象</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">single</span>)&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">single</span> = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">single</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> single3 = <span class="title function_">singletonPrototype</span>()</span><br><span class="line"><span class="keyword">let</span> single4 = <span class="title function_">singletonPrototype</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(single3 === single4)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="利用静态属性实现"><a href="#利用静态属性实现" class="headerlink" title="利用静态属性实现"></a>利用静态属性实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">singletonStatic</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//判断Object上是否存在single这个静态对象，若不存在，则new一个</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Object</span>.<span class="property">single</span>)&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="property">single</span> = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property">single</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> single5 = <span class="title function_">singletonStatic</span>()</span><br><span class="line"><span class="keyword">let</span> single6 = <span class="title function_">singletonStatic</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(single5 === single6)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="利用全局对象实现"><a href="#利用全局对象实现" class="headerlink" title="利用全局对象实现"></a>利用全局对象实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">singletonGlobal</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!globalThis.<span class="property">single</span>)&#123;</span><br><span class="line">        globalThis.<span class="property">single</span> = <span class="keyword">new</span> <span class="title class_">Object</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> globalThis.<span class="property">single</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> single7 = <span class="title function_">singletonStatic</span>()</span><br><span class="line"><span class="keyword">let</span> single8 = <span class="title function_">singletonStatic</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(single7 === single8)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h3><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>将多个小结构组合成一个大结构</p><h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><p>将原本的对象进行包装，加强（没有更改对象）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stronger</span>(<span class="params">person</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">person</span> = person</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">person</span>.<span class="title function_">run</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fly&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title function_">stronger</span>(<span class="keyword">new</span> <span class="title class_">Person</span>())</span><br><span class="line">person.<span class="title function_">run</span>()<span class="comment">//run fly</span></span><br></pre></td></tr></table></figure><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>​为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><ul><li>代理对象对原本的对象进行了功能增强</li><li>代理对象影响的是实际的对象</li></ul><p>ES7新增了对应的Proxy类来进行代理的实现</p><h5 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h5><p>实例化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被代理对象</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, &#125;</span><br><span class="line"><span class="comment">//传入对应的被代理对象 及 处理对象</span></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="comment">//获取相关的属性： 属性名 代理对象 被代理对象</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">targetObj, attributeName, proxyObj</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = targetObj[attributeName]</span><br><span class="line">        <span class="keyword">if</span> (attributeName == <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">            result += <span class="string">&#x27;岁&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attributeName == <span class="string">&#x27;name&#x27;</span>) &#123;</span><br><span class="line">            result = <span class="string">&#x27;我的名字叫&#x27;</span> + result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置相关的属性： 属性名 属性值 代理对象 被代理对象</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">targetObj, attributeName, attributeValue, proxyObj</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (attributeName == <span class="string">&#x27;age&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> attributeValue != <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;传入的不是年龄值！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            targetObj[attributeName] = attributeValue</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据改变成功！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">age</span>);</span><br><span class="line">proxy.<span class="property">age</span> = <span class="number">19</span></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h6 id="Proxy的handler"><a href="#Proxy的handler" class="headerlink" title="Proxy的handler"></a>Proxy的handler</h6><p><img src="/../../images/proxy%E7%9A%84handler%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7.png" alt="proxy的handler相关属性"></p><hr><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>​观察者模式是一种对象行为模式。它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><h5 id="实现一个发布订阅者模式"><a href="#实现一个发布订阅者模式" class="headerlink" title="实现一个发布订阅者模式"></a>实现一个发布订阅者模式</h5><p>模仿addEventListener来实现</p><ul><li>事件监听 on</li><li>事件执行 emit</li><li>事件取消 off</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//存储事件的容器和函数的容器</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//传入一个事件名和对应的处理函数</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">eventName, handler</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果该事件已有处理函数，则继续新增函数</span></span><br><span class="line">        <span class="keyword">if</span> (eventName <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">events</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">add</span>(handler)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName+<span class="string">&#x27;事件添加成功！&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果该事件没有处理函数，则new 一个set集合存放函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[eventName] = <span class="keyword">new</span> <span class="title class_">Set</span>([handler])</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName+<span class="string">&#x27;事件添加成功！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 传入对应的事件</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">eventName,...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[eventName]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//不存在对应的事件，则退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在 遍历对应的集合 调用对应的函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 调用对应的函数，并传递参数</span></span><br><span class="line">            handler.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除事件监听</span></span><br><span class="line">    <span class="title function_">off</span>(<span class="params">eventName, handler</span>) &#123;</span><br><span class="line">        <span class="comment">// 查询是否具备对应的事件</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[eventName]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//不具备不作为</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">delete</span>(handler)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(eventName+<span class="string">&#x27;事件删除成功！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// new一个观察者</span></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">Observer</span>()</span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">observer.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, handler)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(observer.<span class="property">events</span>);</span><br><span class="line"><span class="comment">// 绑定的事件的处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了 &#x27;</span>+arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 事件触发</span></span><br><span class="line">observer.<span class="title function_">emit</span>(<span class="string">&#x27;click&#x27;</span>,<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例 </tag>
            
            <tag> 工厂 </tag>
            
            <tag> 观察者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object的相关属性及方法</title>
      <link href="/2023/06/06/TechnicalArticles/js/23.Object%E7%9A%84%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
      <url>/2023/06/06/TechnicalArticles/js/23.Object%E7%9A%84%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Object的相关属性及方法"><a href="#Object的相关属性及方法" class="headerlink" title="Object的相关属性及方法"></a>Object的相关属性及方法</h1><p><img src="/../../images/Object.png" alt="Object"></p><hr><h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><ul><li><code>__proto__</code>：表示对象的原型指向当前构造函数的prototype</li><li>constructor：表示对象的构造函数，在new的时候回自动调用</li></ul><h3 id="原型方法"><a href="#原型方法" class="headerlink" title="原型方法"></a>原型方法</h3><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h4><p>判断对象是否具备对应的属性(不会读取原型)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)<span class="comment">//jack 本身的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)<span class="comment">//18 原型上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>))<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title="isPrototypeOf"></a>isPrototypeOf</h4><p>判断对象是否存在于原型链上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(child)) <span class="comment">//true Person的原型是否在child的原型链上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">isPrototypeOf</span>(<span class="title class_">Child</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="propertyIsEnumerable-NaN"><a href="#propertyIsEnumerable-NaN" class="headerlink" title="propertyIsEnumerable"></a>propertyIsEnumerable</h4><p>判断属性是否可以被枚举 (是否可以被for in遍历)</p><p>class中，constructor构造函数之外的函数不能被枚举</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>将对象转为字符串</p><h4 id="toLocalString"><a href="#toLocalString" class="headerlink" title="toLocalString"></a>toLocalString</h4><p>将对象转为本地字符串</p><h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h4><p>得到本身的值</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><h4 id="Object-assign-☆"><a href="#Object-assign-☆" class="headerlink" title="Object.assign ☆"></a>Object.assign ☆</h4><p>将传入的对象的内容填入第一个传入的对象内 返回的是第一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = &#123; <span class="attr">name</span>:<span class="string">&quot;Rose&quot;</span>,<span class="attr">likes</span>:[<span class="string">&#x27;apple&#x27;</span>] &#125;</span><br><span class="line"><span class="keyword">let</span> object = <span class="title class_">Object</span>.<span class="title function_">assign</span>(first, &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;, &#123; <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object);<span class="comment">//&#123;name: &#x27;jack&#x27;, likes: Array(1), age: 18, sex: &#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object === first)<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 完成了对象的浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> copyObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,first)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj)<span class="comment">//&#123;name: &#x27;jack&#x27;, likes: Array(1), age: 18, sex: &#x27;男&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj == first)<span class="comment">//false</span></span><br><span class="line"><span class="comment">//第二次拷贝地址，copyObj的likes对应的地址 和 first的likes的对应地址是一样的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj.<span class="property">likes</span> == first.<span class="property">likes</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="Object-create-☆"><a href="#Object-create-☆" class="headerlink" title="Object.create ☆"></a>Object.create ☆</h4><p>创建一个对象，根据传入的内容来创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> second = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将对应的传入的对象放入创建的对象的原型上</span></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(second)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj)<span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">name</span>)<span class="comment">//jack</span></span><br></pre></td></tr></table></figure><p>简易的实现Object.create</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Mycreate</span>(<span class="params">obj</span>)&#123;</span><br><span class="line"><span class="comment">//创建一个新的对象</span></span><br><span class="line">    <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">    newObj.<span class="property">__proto__</span> = obj</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object-keys-☆"><a href="#Object-keys-☆" class="headerlink" title="Object.keys ☆"></a>Object.keys ☆</h4><p>返回所有key的数组</p><h4 id="Object-values-☆"><a href="#Object-values-☆" class="headerlink" title="Object.values ☆"></a>Object.values ☆</h4><p>返回所有值的数组</p><h4 id="Object-entries-☆"><a href="#Object-entries-☆" class="headerlink" title="Object.entries ☆"></a>Object.entries ☆</h4><p>返回键值对的数组</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">17</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回的都是数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))<span class="comment">//[&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj))<span class="comment">//[&#x27;hello&#x27;, 17]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj))<span class="comment">//[Array(2), Array(2)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">eat</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="comment">// Object.keys不包含不可枚举属性 也 不包含原型上的属性</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(person));<span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for in 不包含不可枚举属性，但是包含原型上的属性</span></span><br><span class="line"><span class="keyword">for</span> (value <span class="keyword">in</span> person) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;<span class="comment">//age</span></span><br></pre></td></tr></table></figure><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h4><p>判断两个对象是否一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> last = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(first,last))<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h4><p>获取原型</p><h4 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf"></a>Object.setPrototypeOf</h4><p>设置原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">19</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person))<span class="comment">//&#123;age: 19, constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(person,obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">isPrototypeOf</span>(person));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);<span class="comment">//Person &#123;&#125;[[Prototype]]: Objectname: &quot;jack&quot;[[Prototype]]: Object</span></span><br></pre></td></tr></table></figure><h4 id="修改对象的属性的权限的相关方法-☆"><a href="#修改对象的属性的权限的相关方法-☆" class="headerlink" title="修改对象的属性的权限的相关方法 ☆"></a>修改对象的属性的权限的相关方法 ☆</h4><h5 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h5><p>不可扩展 不能进行内容添加</p><h5 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h5><p>密封 只能查询和修改 其他操作不允许</p><h5 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h5><p>冻结 只能查询</p><p><strong>冻结必定密封和不可扩展 密封必定不可扩展</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;____________禁止扩展_____________&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 禁止对象的扩展(可以删改查，不可增)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj));<span class="comment">//&#123;name:&#x27;jack&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 检测对象是否可以扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj));<span class="comment">//false</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span><span class="comment">//添加：无效</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span><span class="comment">//改：有效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj);<span class="comment">//查询：有效</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span><span class="comment">//删除：有效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;____________密封_____________&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;jerry&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 使用对象密封(只能改查，不可增删)</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(obj1)</span><br><span class="line"><span class="comment">// 密封必定导致对象不可扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(obj1));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj1));<span class="comment">//false</span></span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">18</span><span class="comment">//添加：无效</span></span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span><span class="comment">//改：有效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj1);<span class="comment">//查询：有效</span></span><br><span class="line"><span class="keyword">delete</span> obj1.<span class="property">name</span><span class="comment">//删除：无效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)<span class="comment">//&#123;name: &#x27;tom&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;____________冻结_____________&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;peter&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 使用对象冻结(只能查，不可增删改)</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj2)</span><br><span class="line"><span class="comment">// 冻结必定导致对象密封</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj2));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(obj2));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj2));<span class="comment">//false</span></span><br><span class="line">obj2.<span class="property">age</span> = <span class="number">18</span><span class="comment">//添加：无效</span></span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span><span class="comment">//改：无效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj2);<span class="comment">//查询：有效</span></span><br><span class="line"><span class="keyword">delete</span> obj2.<span class="property">name</span><span class="comment">//删除：无效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)<span class="comment">//&#123;name: &#x27;peter&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="获取属性的相关方法"><a href="#获取属性的相关方法" class="headerlink" title="获取属性的相关方法"></a>获取属性的相关方法</h4><h5 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h5><p>获取所有属性名 不会获取原型上的属性 不会获取symbol为key的属性</p><h5 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols"></a>Object.getOwnPropertySymbols</h5><p>获取所有symbol修饰的属性，不会获取原型上的</p><h5 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h5><p>获取某个属性的详情对象（属性描述符）</p><h5 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h5><p>获取所有的属性的详情对象（属性描述符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123; <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;jack&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>(<span class="string">&#x27;原型上的&#x27;</span>)] = <span class="number">18</span></span><br><span class="line">person[<span class="title class_">Symbol</span>(<span class="string">&#x27;对象上的&#x27;</span>)] = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">person.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"><span class="comment">// 获取所有属性名 不会获取原型上的属性 不会获取symbol为key的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(person));<span class="comment">//[&#x27;name&#x27;, &#x27;sex&#x27;]</span></span><br><span class="line"><span class="comment">// 获取所有symbol修饰的属性，不会获取原型上的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(person));<span class="comment">//[Symbol(对象上的)]</span></span><br><span class="line"><span class="comment">// 获取某个属性的详情对象（返回的是对象）（不包含原型上的属性，但是包含symbol上修饰的属性）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person,<span class="string">&#x27;name&#x27;</span>));<span class="comment">//&#123;value: &#x27;jack&#x27;, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="comment">// 获取所有的属性的详情对象（返回的是对象）（不包含原型上的属性，但是包含symbol上修饰的属性）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(person));<span class="comment">//&#123;name: &#123;…&#125;, sex: &#123;…&#125;, Symbol(对象上的): &#123;…&#125;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="属性对象-☆"><a href="#属性对象-☆" class="headerlink" title="属性对象 ☆"></a><strong>属性对象</strong> ☆</h4><h5 id="属性属性"><a href="#属性属性" class="headerlink" title="属性属性"></a>属性属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configurable 是否可以删除</span><br><span class="line">enumerable 是否可以枚举</span><br><span class="line">vlaue 值</span><br><span class="line">writable 是否可修改</span><br></pre></td></tr></table></figure><p><img src="/../../images/image-20230310165729950.png" alt="image-20230310165729950"></p><h5 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configurable 是否可以删除</span><br><span class="line">enumerable 是否可以枚举</span><br><span class="line">get getter 访问时调用</span><br><span class="line">set setter 设置时调用</span><br></pre></td></tr></table></figure><hr><h4 id="Object-defineProperty-☆"><a href="#Object-defineProperty-☆" class="headerlink" title="Object.defineProperty ☆"></a>Object.defineProperty ☆</h4><p>用于定义对象的属性（vue2的双向数据绑定的底层实现原理）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//传对象 传属性 传属性对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;rose&#x27;</span><span class="comment">//不可写 writable:false</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(key)&#125;<span class="comment">//name不打印，不可枚举 enumerable:false,</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span> <span class="comment">//不可删除 configurable: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//&#123;name:tom&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _obj=&#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;访问了getter&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> _obj.<span class="property">age</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;访问了setter&#x27;</span>);</span><br><span class="line">        _obj.<span class="property">age</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//访问了setter</span></span><br></pre></td></tr></table></figure><h4 id="Object-defineProperties-☆"><a href="#Object-defineProperties-☆" class="headerlink" title="Object.defineProperties ☆"></a>Object.defineProperties ☆</h4><p>用于定义对象的多个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> _obj = &#123;&#125;</span><br><span class="line"><span class="comment">//传入对象 及对应的属性详情对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj,&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> _obj.<span class="property">age</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            _obj.<span class="property">age</span> = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line">consle.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="查看属性对象的相关方法"><a href="#查看属性对象的相关方法" class="headerlink" title="查看属性对象的相关方法"></a>查看属性对象的相关方法</h4><ul><li>for in 遍历自身以及原型上可枚举的属性，不可以遍历symbol修饰的</li><li>Object.keys 只能遍历自身可枚举的属性，不可遍历原型上以及symbol修饰的</li><li>Object.getOwnPropertyNames 可以遍历不可枚举的，但是不可以遍历原型上的及symbol修饰的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
            <tag> Object </tag>
            
            <tag> 对象的属性修饰符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue原理相关</title>
      <link href="/2023/06/06/TechnicalArticles/js/24.vue%E5%8E%9F%E7%90%86%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/06/06/TechnicalArticles/js/24.vue%E5%8E%9F%E7%90%86%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue相关"><a href="#Vue相关" class="headerlink" title="Vue相关"></a>Vue相关</h1><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h3 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h3><p>是Model-View-ViewModel的简写，本质是个MVC的改进版</p><ul><li>M：模型Model  —&gt;也就是data中的数据</li><li>V：视图View  —&gt;也就是模板代码</li><li>VM：视图模型ViewModel  —&gt;也就是Vue实例（vm）</li></ul><p><img src="https://img-blog.csdnimg.cn/3b2deed9e76142798a44ee3bbc33f39b.png" alt="img"></p><h3 id="单向绑定"><a href="#单向绑定" class="headerlink" title="单向绑定"></a>单向绑定</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>vm将对应的m的数据 渲染到v上</p><h4 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h4><p>vm将m的数据进行劫持，vm再控制v的渲染</p><p>Vue2的数据劫持（es5语法）</p><p>利用Object.defineProperty对对象的属性进行数据劫持</p><p>但是对于数组不能进行属性劫持故需要重写数组的方法</p><p>重写数组的七个原型方法：</p><p>push,  pop,  shift,  unshift,  splice,  sort,  reverse（这七个方法会改变原数组）</p><p>Vue3的数据劫持（es6语法）</p><p>Proxy（万物皆对象，都可劫持）</p><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>vm将对应m的数据渲染到v，v的页面的数据发送变化m也需要发生变化</p><h4 id="主要的操作"><a href="#主要的操作" class="headerlink" title="主要的操作"></a>主要的操作</h4><p>单向绑定</p><p>观察者模式</p><h3 id="vm控制v的渲染"><a href="#vm控制v的渲染" class="headerlink" title="vm控制v的渲染"></a>vm控制v的渲染</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>需要避免大量操作dom（会导致多次的回流和重绘，影响性能，用户体验）</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="虚拟dom（抽取于实体dom而生成的虚拟对象）"><a href="#虚拟dom（抽取于实体dom而生成的虚拟对象）" class="headerlink" title="虚拟dom（抽取于实体dom而生成的虚拟对象）"></a>虚拟dom（抽取于实体dom而生成的虚拟对象）</h5><p>​通过js创建一个Object对象来模拟真实DOM结构，这个对象包含标签名 (tag)、属性 (attrs) 和子元素对象 (children) 三个属性，通过vue中的render()函数把虚拟dom编译成真实dom，在通过appendChild()添加到页面中。</p><p><strong>为什么要用虚拟DOM来描述真实的DOM呢？</strong></p><p>​创建真实DOM成本比较高，如果用 js对象来描述一个dom节点，成本比较低，另外我们在频繁操作dom是一种比较大的开销。所以建议用虚拟dom来描述真实dom。</p><h5 id="diff算法-（用于比对与虚拟dom的差异）"><a href="#diff算法-（用于比对与虚拟dom的差异）" class="headerlink" title="diff算法 （用于比对与虚拟dom的差异）"></a>diff算法 （用于比对与虚拟dom的差异）</h5><p>diff算法用于比对新旧虚拟dom，利用打补丁包的形式来比对的。</p><h5 id="模板引擎（帮助渲染）"><a href="#模板引擎（帮助渲染）" class="headerlink" title="模板引擎（帮助渲染）"></a>模板引擎（帮助渲染）</h5><hr><h3 id="双向数据绑定的实现"><a href="#双向数据绑定的实现" class="headerlink" title="双向数据绑定的实现"></a>双向数据绑定的实现</h3><h4 id="vue的双向数据绑定"><a href="#vue的双向数据绑定" class="headerlink" title="vue的双向数据绑定"></a>vue的双向数据绑定</h4><ul><li>Object.defineProperty 来进行数据劫持</li><li>递归data中的数据来进行劫持</li><li>当前ObServer监听对应的输入框的内容发生变化</li><li>重新设置对应的data中的数据（this._data）</li><li>数据重新设置再进行对应的模板比对渲染对应的页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;</span><br><span class="line">            el,</span><br><span class="line">            data</span><br><span class="line">        &#125; = options</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">el</span> = el <span class="comment">//挂载点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = data <span class="comment">//数据</span></span><br><span class="line">        <span class="comment">//用于劫持的容器</span></span><br><span class="line">        <span class="variable language_">this</span>.</span><br><span class="line">        _</span><br><span class="line">        data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">        <span class="comment">//获取对应的内容 el里面内容</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">        <span class="comment">//读取里面的 &#123;&#123;&#125;&#125;的内容 进行替换</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">textContent</span> = <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">innerHTML</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">kidnap</span>(<span class="variable language_">this</span>.<span class="property">data</span>, <span class="variable language_">this</span>.<span class="property">_data</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">comparis</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归遍历data中的数据进行劫持 (递归遍历data中的数据进行劫持操作)</span></span><br><span class="line">    <span class="title function_">kidnap</span>(<span class="params">obj, _obj</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="comment">//如果它是一个对象继续往下劫持</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">kidnap</span>(obj[key], _obj[key])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Object.defineProperty来进行劫持</span></span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">                <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                    _</span><br><span class="line">                    obj[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">                    _</span><br><span class="line">                    obj[key] = newValue</span><br><span class="line">                    that.<span class="title function_">comparis</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模板比对解析</span></span><br><span class="line">    <span class="title function_">comparis</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//&#123;&#123;message&#125;&#125; &#123;message.age.age&#125;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">textContent</span>.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([\w.]*)\&#125;\&#125;/ig</span>, <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//&#123;&#123;message&#125;&#125;</span></span><br><span class="line">            <span class="comment">//读取对应的里面key 利用data里面的数据来进行替换</span></span><br><span class="line">            <span class="comment">// console.log(RegExp.$1) //读取分组1里面的内容</span></span><br><span class="line">            <span class="keyword">var</span> arr = v.<span class="title function_">substring</span>(<span class="number">2</span>, v.<span class="property">length</span> - <span class="number">2</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">            <span class="comment">//遍历获取数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">                value = value[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历arr获取数据</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//读取对应的input框的v-model属性进行替换</span></span><br><span class="line">        <span class="comment">//先找input框</span></span><br><span class="line">        <span class="keyword">let</span> inputs = <span class="variable language_">this</span>.<span class="property">content</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">        <span class="comment">//获取所有具备v-model属性的input框架</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(inputs).<span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> v.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-model&#x27;</span>)</span><br><span class="line">        &#125;).<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> key = v.<span class="title function_">getAttribute</span>(<span class="string">&#x27;v-model&#x27;</span>)</span><br><span class="line">            <span class="comment">//利用观察者模式进行监听</span></span><br><span class="line">            <span class="comment">//调用obServer</span></span><br><span class="line">            v.<span class="property">oninput</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                that.<span class="property">data</span>[key] = v.<span class="property">value</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//读取对应的v-model 设置对应的内容</span></span><br><span class="line">            v.<span class="property">value</span> = that.<span class="property">data</span>[key]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="diff算法对比"><a href="#diff算法对比" class="headerlink" title="diff算法对比"></a>diff算法对比</h4><p>先比对自身 通过key来找到自身 （key是唯一的<br>下标不能作为key）<br>先比对key 再比对自身的属性 比对文本 再比对子元素 递归比到低</p><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>类似于文件的创建快捷方式</p><p>第一层拷贝值，其余拷贝地址（所以里面的对象是共用的）</p><h5 id="Object-assign实现"><a href="#Object-assign实现" class="headerlink" title="Object.assign实现"></a>Object.assign实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">user</span>:&#123;<span class="attr">age</span>:<span class="number">18</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> copyObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,obj)</span><br><span class="line"><span class="comment">//两个对象不一样</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == copyObj)<span class="comment">//false</span></span><br><span class="line"><span class="comment">//两个对象的内容的地址是一样的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">user</span> == copyObj.<span class="property">user</span>)<span class="comment">//true</span></span><br><span class="line">obj.<span class="property">user</span>.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line"><span class="comment">//地址共享，所以改值有效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj.<span class="property">user</span>.<span class="property">age</span>)<span class="comment">//20</span></span><br></pre></td></tr></table></figure><h5 id="使用扩展运算符实现数组及对象的浅拷贝"><a href="#使用扩展运算符实现数组及对象的浅拷贝" class="headerlink" title="使用扩展运算符实现数组及对象的浅拷贝"></a>使用扩展运算符实现数组及对象的浅拷贝</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">age</span>:<span class="number">19</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">let</span> copyArr = [...arr]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyArr == arr)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>] == copyArr[<span class="number">0</span>])<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="使用数组的concat方法实现数组的浅拷贝"><a href="#使用数组的concat方法实现数组的浅拷贝" class="headerlink" title="使用数组的concat方法实现数组的浅拷贝"></a>使用数组的concat方法实现数组的浅拷贝</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> concatArr = [].<span class="title function_">concat</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(concatArr == arr)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>] == concatArr[<span class="number">0</span>])<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="使用数组的slice方法"><a href="#使用数组的slice方法" class="headerlink" title="使用数组的slice方法"></a>使用数组的slice方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> sliceArr = arr.<span class="title function_">slice</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr == sliceArr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>] == sliceArr[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h5 id="使用自定义函数"><a href="#使用自定义函数" class="headerlink" title="使用自定义函数"></a>使用自定义函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        newObj[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">user</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="keyword">let</span> copyObj = <span class="title function_">clone</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj == obj) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copyObj.<span class="property">user</span> == obj.<span class="property">user</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="第三方插件lodash-js"><a href="#第三方插件lodash-js" class="headerlink" title="第三方插件lodash.js"></a>第三方插件lodash.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line"><span class="attr">user</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cloneObj = _.<span class="title function_">clone</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneObj == obj1)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cloneObj.<span class="property">user</span> == obj1.<span class="property">user</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>类似于文件复制粘贴</p><p>拷贝的是值，不拷贝地址</p><h5 id="JSON-stringify-JSON-parse"><a href="#JSON-stringify-JSON-parse" class="headerlink" title="JSON.stringify JSON.parse"></a>JSON.stringify JSON.parse</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">let</span> copyObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == copyObj)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">list</span> == copyObj.<span class="property">list</span>)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">user</span> == copyObj.<span class="property">user</span>)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="第三方插件lodash-js-1"><a href="#第三方插件lodash-js-1" class="headerlink" title="第三方插件lodash.js"></a>第三方插件lodash.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用lodash.js _.cloneDeep</span></span><br><span class="line"><span class="keyword">let</span> cloneObj = _.<span class="title function_">cloneDeep</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj == cloneObj) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">list</span> == cloneObj.<span class="property">list</span>) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">user</span> == cloneObj.<span class="property">user</span>) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">user</span>.<span class="property">name</span> == cloneObj.<span class="property">user</span>.<span class="property">name</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="自定义递归书写对应的深拷贝-重点"><a href="#自定义递归书写对应的深拷贝-重点" class="headerlink" title="自定义递归书写对应的深拷贝(重点)"></a>自定义递归书写对应的深拷贝(重点)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj == <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 直接返回新的函数</span></span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不是对象或者为null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj != <span class="string">&#x27;object&#x27;</span> || !obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是对象 function Regexp Object Array Date</span></span><br><span class="line">    <span class="comment">//如果是正则</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是Date</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj.<span class="title function_">getime</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> copyObj = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        copyObj = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        copyObj[key] = <span class="title function_">deepClone</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copyObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">objs</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:&#123;</span><br><span class="line">            <span class="attr">objss</span>:&#123;</span><br><span class="line">                <span class="attr">names</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">            &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title function_">deepClone</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 == obj)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">objs</span> == obj.<span class="property">objs</span>)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">objs</span>.<span class="property">name</span> == obj.<span class="property">objs</span>.<span class="property">name</span>)<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">objs</span>.<span class="property">name</span>.<span class="property">objss</span>.<span class="property">namess</span> == obj.<span class="property">objs</span>.<span class="property">name</span>.<span class="property">objss</span>.<span class="property">namess</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
            <tag> mvvm </tag>
            
            <tag> 双向数据绑定 </tag>
            
            <tag> Object.defineProperty </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的路由及Sass</title>
      <link href="/2023/06/06/TechnicalArticles/js/25.vue%E7%9A%84%E8%B7%AF%E7%94%B1%E5%8F%8Asass/"/>
      <url>/2023/06/06/TechnicalArticles/js/25.vue%E7%9A%84%E8%B7%AF%E7%94%B1%E5%8F%8Asass/</url>
      
        <content type="html"><![CDATA[<h1 id="vue的路由及Sass"><a href="#vue的路由及Sass" class="headerlink" title="vue的路由及Sass"></a>vue的路由及Sass</h1><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>根据对应的url地址来渲染不同的内容</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>页面路由（通过页面的跳转来完成对应的切换）</li><li>hash路由（通过对应的hash值来控制内容的渲染）onhashchange（页面不刷新 只有一个页面）</li><li>history路由（通过对应的地址变化来控制内容的渲染）onpopstate（页面不刷新 只有一个页面）</li></ul><h4 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h4><p>单页应用程序（single page application）</p><p>只有一个页面，通过控制渲染内容来完成对应页面内容的切换</p><p>减少了重绘和回流</p><p>react和vue都是为了减少对应的重绘和回流提高对应的性能，所以它一般都是采用对应的单页页面应用。所以主要采用的路由的模式为hash路由、history路由。默认情况下为hash模式。</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><h6 id="更快响应-Faster-and-responsive"><a href="#更快响应-Faster-and-responsive" class="headerlink" title="更快响应 **(**Faster and responsive)"></a>更快响应 **(**Faster and responsive)</h6><p>​由于单页应用程序不更新整个页面，而是仅更新所需的内容，因此它们可以显着提高网站的速度。 在应用程序的整个生命周期中，大多数资源仅加载一次。 仅数据来回传输。 这是一个很大的优势，根据Google的研究，如果页面加载所需的时间超过200毫秒，则可能会对业务和销售产生重大影响。</p><h6 id="更好的缓存功能-Better-caching-capabilities"><a href="#更好的缓存功能-Better-caching-capabilities" class="headerlink" title="更好的缓存功能 (Better caching capabilities)"></a>更好的缓存功能 <strong>(<strong>Better caching capabilities</strong>)</strong></h6><p>​单页应用程序可以有效地缓存任何本地数据。 SPA仅向服务器发送一个请求，然后存储其接收的所有数据。 然后，它可以使用此数据，甚至可以脱机工作。 如果用户连接性较差，则在允许连接时可以将本地数据与服务器同步。</p><h6 id="简单，线性的用户体验-Simple-linear-user-experience"><a href="#简单，线性的用户体验-Simple-linear-user-experience" class="headerlink" title="简单，线性的用户体验 (Simple, linear user experience)"></a>简单，线性的用户体验 <strong>(<strong>Simple, linear user experience</strong>)</strong></h6><p>​SPA为用户提供简单的线性体验。 这些Web应用程序包含清晰的开头，中间和结尾。 使用SPA时，滚动方便且不间断； 无需点击无尽的链接。 SPA的滚动特性使其非常适合移动用户。</p><h6 id="使用Chrome轻松调试-Easy-debugging-with-Chrome"><a href="#使用Chrome轻松调试-Easy-debugging-with-Chrome" class="headerlink" title="使用Chrome轻松调试 (Easy debugging with Chrome)"></a>使用Chrome轻松调试 <strong>(<strong>Easy debugging with Chrome</strong>)</strong></h6><p>​使用Chrome调试SPA很容易，因为此类应用是在AngularJS Batarang和React开发人员工具等框架上开发的。 这些框架都有自己的Chrome开发人员工具，这些工具比MPA调试起来容易得多。 此外，SPA允许您监视网络操作并调查页面元素和与之相关的数据。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><h6 id="SEO优化效果不佳-Poorer-SEO-optimization"><a href="#SEO优化效果不佳-Poorer-SEO-optimization" class="headerlink" title="SEO优化效果不佳 (Poorer SEO optimization)"></a>SEO优化效果不佳 <strong>(<strong>Poorer SEO optimization</strong>)</strong></h6><p>​有人认为SPA提供的SEO优化效果不佳。 这是因为单页应用程序在JavaScript上运行，并根据客户端的请求下载数据。 该URL并没有真正改变，并且不同的页面没有其唯一的URL地址。 由于搜索机器人无法扫描大多数页面，因此很难为搜索引擎优化这些网站。</p><h6 id="缺乏浏览器历史记录-Lacking-browser-history"><a href="#缺乏浏览器历史记录-Lacking-browser-history" class="headerlink" title="缺乏浏览器历史记录 (Lacking browser history)"></a>缺乏浏览器历史记录 <strong>(<strong>Lacking browser history</strong>)</strong></h6><p>​当访客在各州之间跳转时，SPA不会保存。 这意味着，当用户单击“后退”按钮时，他们将不会后退。 浏览器仅将用户带到上一页，而不带用户到应用程序中的上一个状态。</p><h6 id="更多安全问题-More-Security-issues"><a href="#更多安全问题-More-Security-issues" class="headerlink" title="更多安全问题 (More Security issues)"></a>更多安全问题 <strong>(<strong>More Security issues</strong>)</strong></h6><p>​单页面应用比多页面应用更容易受到跨站点脚本(XSS)攻击。 使用XSS，黑客可以将客户端脚本注入Web应用程序。</p><h5 id="何时使用SPA-When-to-use-an-SPA"><a href="#何时使用SPA-When-to-use-an-SPA" class="headerlink" title="何时使用SPA (When to use an SPA)"></a>何时使用SPA <strong>(<strong>When to use an SPA</strong>)</strong></h5><blockquote><p>​单页Web应用程序非常适合构建具有小数据量的动态平台。 此外，单页应用程序非常适合作为未来移动应用程序开发的基础。 这种开发方法的主要缺点是SEO优化不佳。 但是，此架构非常适合SaaS平台，社交网络和搜索引擎优化无关紧要的封闭社区。 另一方面，如果项目需要有效的SEO，则应使用多页应用程序。</p></blockquote><h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><p>根据对应的访问地址来返回不同的数据，或者渲染不同的内容</p><h4 id="SSR服务器渲染"><a href="#SSR服务器渲染" class="headerlink" title="SSR服务器渲染"></a>SSR服务器渲染</h4><p>服务器渲染，利于seo，速度快。坏处在于代码量大维护起来较为困难，对于服务器压力大。<br><strong>一般的大型电商网站都是采用ssr配合对于的spa来共同作用。(前端采用的是vue的技术栈配合ssr的框架nuxt.js来做服务器渲染，前端采用的是react那么配合的是next.js来做服务器渲染)</strong></p><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>Sass</strong>（英文全称：<strong>S</strong>yntactically <strong>A</strong>wesome <strong>S</strong>tyle<strong>s</strong>heets）Sass 是一个 CSS 预处理器。</p><p>Sass 是 CSS 扩展语言，可以帮助我们减少 CSS 重复的代码，节省开发时间。</p><p>Sass 完全兼容所有版本的 CSS。</p><p>底层由ruby语言开发，运行在Python环境</p><h3 id="Sass的编译环境"><a href="#Sass的编译环境" class="headerlink" title="Sass的编译环境"></a>Sass的编译环境</h3><h4 id="借助node来编译"><a href="#借助node来编译" class="headerlink" title="借助node来编译"></a>借助node来编译</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass,sass-load</span><br></pre></td></tr></table></figure><h4 id="借助第三方插件"><a href="#借助第三方插件" class="headerlink" title="借助第三方插件"></a>借助第三方插件</h4><p>vscode插件</p><h5 id="live-sass-compiler"><a href="#live-sass-compiler" class="headerlink" title="live sass compiler"></a>live sass compiler</h5><h5 id="easy-sass"><a href="#easy-sass" class="headerlink" title="easy sass"></a>easy sass</h5><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="注释支持"><a href="#注释支持" class="headerlink" title="注释支持"></a>注释支持</h4><ul><li>&#x2F;&#x2F;单行注释</li><li>&#x2F;**&#x2F;多行注释，会被编译</li></ul><h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="keyword">@if</span> <span class="variable">$width</span>&gt;<span class="number">100</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="variable">$width</span> + <span class="number">10</span></span><br><span class="line">    &#125;<span class="keyword">@else</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="variable">$width</span> - <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后"><a href="#编译后" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*循环*/</span> </span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">5</span> &#123;</span><br><span class="line">    <span class="comment">/* 变量占位符 */</span></span><br><span class="line">    item_#&#123;<span class="variable">$i</span>&#125;&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$i</span>+px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-1"><a href="#编译后-1" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*循环*/</span></span><br><span class="line"><span class="comment">/* 变量占位符 */</span></span><br><span class="line">item_1 &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 变量占位符 */</span></span><br><span class="line">item_2 &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 变量占位符 */</span></span><br><span class="line">item_3 &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 变量占位符 */</span></span><br><span class="line">item_4 &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 定义数组 */</span></span><br><span class="line"><span class="variable">$i</span>:<span class="number">6</span>;</span><br><span class="line"><span class="comment">/* while循环 */</span></span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span>&#123;</span><br><span class="line">    <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125;&#123;<span class="attribute">width</span>:<span class="number">2px</span> *<span class="variable">$i</span>;&#125;</span><br><span class="line">    <span class="variable">$i</span>:<span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-2"><a href="#编译后-2" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义数组 */</span></span><br><span class="line"><span class="comment">/* while循环 */</span></span><br><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 遍历 */</span></span><br><span class="line"><span class="variable">$arr</span>:<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$item</span> in <span class="variable">$arr</span>&#123;</span><br><span class="line">    <span class="selector-class">.li_</span>#&#123;<span class="variable">$item</span>&#125;&#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="variable">$item</span>+px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-3"><a href="#编译后-3" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 遍历 */</span></span><br><span class="line"><span class="selector-class">.li_1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.li_2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.li_3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.li_4</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#aaa</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-4"><a href="#编译后-4" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#ccc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数 */</span></span><br><span class="line"><span class="comment">//scss的函数是为了拿返回值，必定需要返回值</span></span><br><span class="line"><span class="keyword">@function</span> sum(<span class="variable">$c</span>,<span class="variable">$b</span>)&#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="variable">$c</span> + <span class="variable">$b</span></span><br><span class="line"> &#125;</span><br><span class="line"> #index&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="built_in">sum</span>(<span class="number">10</span>,<span class="number">20</span>)+px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-5"><a href="#编译后-5" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 函数 */</span></span><br><span class="line"><span class="selector-id">#index</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="混入器"><a href="#混入器" class="headerlink" title="混入器"></a>混入器</h4><h5 id="不带参数的"><a href="#不带参数的" class="headerlink" title="不带参数的"></a>不带参数的</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* 混入器(不带参数的) */</span></span><br><span class="line"><span class="keyword">@mixin</span> setSize &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>:darkblue;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-top-color</span>:transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">tr</span>&#123;</span><br><span class="line">    <span class="keyword">@include</span> setSize()</span><br><span class="line">&#125;</span><br><span class="line">td&#123;</span><br><span class="line">    <span class="keyword">@include</span> setSize()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-6"><a href="#编译后-6" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 混入器(不带参数的) */</span></span><br><span class="line"><span class="selector-tag">tr</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: darkblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: darkblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="带参数的"><a href="#带参数的" class="headerlink" title="带参数的"></a>带参数的</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 混入器(带参数的) */</span></span><br><span class="line"><span class="keyword">@mixin</span> <span class="attribute">color</span>(<span class="variable">$bg</span>, <span class="variable">$border</span>, <span class="variable">$font</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$bg</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="variable">$border</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$font</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">thead</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> <span class="attribute">color</span>(<span class="number">#ccc</span>, <span class="number">#aaa</span>, <span class="number">#bbb</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tfoot &#123;</span><br><span class="line">    <span class="keyword">@include</span> <span class="attribute">color</span>(<span class="number">#777</span>, <span class="number">#888</span>, <span class="number">#999</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-7"><a href="#编译后-7" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 混入器(带参数的) */</span></span><br><span class="line"><span class="selector-tag">thead</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#aaa</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bbb</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tfoot</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#777</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#888</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="默认参数的混入器"><a href="#默认参数的混入器" class="headerlink" title="默认参数的混入器"></a>默认参数的混入器</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 混入器(带默认参数的) */</span></span><br><span class="line"><span class="keyword">@mixin</span> size(<span class="variable">$w</span>:<span class="number">500px</span>, <span class="variable">$h</span>:<span class="number">200px</span>, <span class="variable">$font</span>:<span class="number">12px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$h</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> size()</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">    <span class="keyword">@include</span> size(<span class="number">100px</span>,<span class="number">20px</span>,<span class="number">20px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-8"><a href="#编译后-8" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 混入器(带默认参数的) */</span></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>extends实现继承</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*继承*/</span></span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> .inner;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编译后-9"><a href="#编译后-9" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inner</span>,<span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*可省略文件后缀*/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;./index.scss&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span></span><br><span class="line">import <span class="string">&quot;foo.css&quot;</span>;</span><br><span class="line">import &quot;foo&quot; screen ;</span><br><span class="line">import &quot;http ://foo.com/bar<span class="string">&quot;;</span></span><br><span class="line"><span class="string">import ur1(foo);</span></span><br></pre></td></tr></table></figure><h5 id="编译后-10"><a href="#编译后-10" class="headerlink" title="编译后"></a>编译后</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &quot;foo<span class="selector-class">.css</span>&quot;;</span><br><span class="line">import &quot;foo&quot; screen;</span><br><span class="line">import &quot;http ://ffoo.com/bar<span class="string">&quot; ;</span></span><br><span class="line"><span class="string">import ur1(foo);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
            <tag> router </tag>
            
            <tag> scss </tag>
            
            <tag> spa </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery</title>
      <link href="/2023/06/06/TechnicalArticles/js/26.jQuery/"/>
      <url>/2023/06/06/TechnicalArticles/js/26.jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库代码库（框架）于2006年1月由[John Resig](<a href="https://baike.baidu.com/item/John">https://baike.baidu.com/item/John</a> Resig&#x2F;6336344?fromModule&#x3D;lemma_inlink)发布。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理事件处理&#x2F;9582185?fromModule&#x3D;lemma_inlink)、动画设计和Ajax交互。</p><p>​jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的CSS选择器选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari2.0+、Opera 9.0+等。</p><h3 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h3><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="支持所有原生css选择器"><a href="#支持所有原生css选择器" class="headerlink" title="支持所有原生css选择器"></a>支持所有原生css选择器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用jquery方法或者是对应的$方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;#box&#x27;</span>)) <span class="comment">//获取id为box的jquery对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.content&#x27;</span>)) <span class="comment">//获取class为content的jquery对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.content[name=hello]&#x27;</span>)) <span class="comment">//获取class为content里面name属性为hello的jquery对象</span></span><br><span class="line"><span class="comment">//获取所有的li</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>))</span><br><span class="line"><span class="comment">//获取第一个li</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:first-child()&#x27;</span>))</span><br><span class="line"><span class="comment">//获取最后一个li</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:last-child()&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="内置对应选择器"><a href="#内置对应选择器" class="headerlink" title="内置对应选择器"></a>内置对应选择器</h4><ul><li>first 获取第一个</li><li>last 获取最后一个</li><li>eq 获取对应下标位的</li><li>odd 获取奇数下标位</li><li>even 获取偶数下标位</li><li>支持同时传入多个选择器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内置first选择器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:first&#x27;</span>))</span><br><span class="line"><span class="comment">//内置last选择器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:last&#x27;</span>))</span><br><span class="line"><span class="comment">//拿到第3个li 内置eq选择器 传入对应的下标</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:eq(2)&#x27;</span>))</span><br><span class="line"><span class="comment">//支持传入多个选择器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.content:eq(1),li:eq(1)&#x27;</span>))</span><br><span class="line"><span class="comment">//获取奇数下标位 1 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:odd&#x27;</span>))</span><br><span class="line"><span class="comment">//获取偶数下标位 0 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:even&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1</span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>www.baidu.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有的li</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取第一个li</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">first</span>())</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取最后一个li</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">last</span>())</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取对应下标的对象 第一个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 关系筛选</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 父子关系</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取b标签</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">children</span>(<span class="string">&#x27;b&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取a标签</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">children</span>(<span class="string">&#x27;a&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//通过li获取对应的父元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">parent</span>(<span class="string">&#x27;ul&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取所有的父元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">parent</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 兄弟关系</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 上一个兄弟</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:eq(2)&#x27;</span>).<span class="title function_">prev</span>())</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 下一个兄弟</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:eq(2)&#x27;</span>).<span class="title function_">next</span>())</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;li:eq(2)&#x27;</span>).<span class="title function_">siblings</span>())</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><ul><li><p>prop 获取和设置本身就有的属性</p></li><li><p>attr 获取和设置所有的属性</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;提示&quot;</span> <span class="attr">hello</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行属性操作 prop attr 传两个参数是设置 传一个参数就是获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取自带的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;value&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;hello&#x27;</span>));<span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 针对本身存在的属性进行设置，</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;inputs&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 若设置不存的属性，则会添加到对象上</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取和设置所有的属性 底层是用setattribute getattribute实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;hello&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>removeProp 删除本身就有的属性</p></li><li><p>removeAttr 删除属性</p></li></ul><h3 id="class属性的操作"><a href="#class属性的操作" class="headerlink" title="class属性的操作"></a>class属性的操作</h3><ul><li>prop 获取和设置对应本身就有的属性 （a标签本身就存在对应的href属性 img本身就存在src属性 如果不是本身有的将不会显示）</li><li>attr 获取和设置所有的属性 （底层实现setAttribute 和 getAttribute）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行属性操作 prop attr 传俩个参数就是设置 传一个参就是获取 （参数如果满了都是设置 参数没有满就是获取）</span></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="comment">//获取input的value属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;value&#x27;</span>));</span><br><span class="line"><span class="comment">//针对本身没有的是无法获取的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//prop进行对应的设置</span></span><br><span class="line"><span class="comment">//针对本身就存在的可以进行设置</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="comment">//针对于本身不存在的无法进行设置 无法设置到对应的元素上 但是它会设置到本身的对象上</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>)<span class="comment">//element[&#x27;hello&#x27;] = &#x27;hi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;hello&#x27;</span>)); <span class="comment">//hi</span></span><br><span class="line"><span class="comment">//attr 内部采用了setAttribute getAttribute</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment">//获取 helloWorld</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;您好&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="删除的操作"><a href="#删除的操作" class="headerlink" title="删除的操作"></a>删除的操作</h5><ul><li>removeProp （删除对应prop的属性）</li><li>removeAttr （removeAttribute）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//removeProp</span></span><br><span class="line"><span class="comment">// 删除prop添加的属性 本身存在的属性或者是prop添加的属性</span></span><br><span class="line"><span class="comment">// delete element[key]</span></span><br><span class="line"><span class="comment">// $(&#x27;input&#x27;).removeProp(&#x27;value&#x27;) 无法删除 </span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">removeProp</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line"><span class="comment">//removeAttr 内部采用的removeAttribute</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">removeAttr</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="原生js模拟实现addClass"><a href="#原生js模拟实现addClass" class="headerlink" title="原生js模拟实现addClass"></a>原生js模拟实现addClass</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生js实现对应的class添加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addClass</span>(<span class="params">element,className</span>)&#123;</span><br><span class="line">    <span class="comment">//判断element的className是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(!element.<span class="property">className</span>)&#123;</span><br><span class="line">        <span class="comment">//直接设置</span></span><br><span class="line">        element.<span class="property">className</span> = className</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//读取对应的className中的内容 空格分割</span></span><br><span class="line">        classNames = element.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        classNames.<span class="title function_">push</span>(className)</span><br><span class="line">        <span class="comment">//设置给对应的原生</span></span><br><span class="line">        element.<span class="property">className</span>  = classNames.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addClass</span>($(<span class="string">&#x27;div&#x27;</span>)[<span class="number">0</span>],<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><p>使用<strong>css</strong>方法 （传一个参数就是获取 传俩个参数就设置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用css来获取字体颜色 里面使用了getComputedStyle方法 element.currentStyle</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>))</span><br><span class="line"><span class="comment">//设置样式 传入俩个参数 内部采用的是style赋值</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;backgroundColor&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="显示内容的操作"><a href="#显示内容的操作" class="headerlink" title="显示内容的操作"></a>显示内容的操作</h4><ul><li>html （底层实现使用了innerHTML）</li><li>text （底层实现使用了innerText）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html 还是 text方法 传一个参数设置 不传参就是获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">html</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">text</span>())</span><br><span class="line"><span class="comment">//设置相关</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;span&gt;222&lt;/span&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;&lt;span&gt;222&lt;/span&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="input输入框的值获取及设置-value属性设置获取"><a href="#input输入框的值获取及设置-value属性设置获取" class="headerlink" title="input输入框的值获取及设置 value属性设置获取"></a>input输入框的值获取及设置 value属性设置获取</h5><p>val方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取input框的value值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">val</span>());</span><br><span class="line"><span class="comment">//设置value值</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;天气很好 出去走走&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><h5 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h5><ul><li>append 追加到末尾</li><li>before 将传入的元素添加到调用的元素之前</li><li>insertBefore 将调用的元素添加到传入的元素之前</li><li>after 将传入的元素添加到调用的元素之后</li><li>inertAfter 将调用的元素添加到传入的元素之后</li><li>replaceAll 替换所有</li><li>replaceWith 替换某一个（传入选择器）</li><li>remove 移除本身及内容</li><li>empty 移除里面的内容</li><li>clone 克隆一个新的对象 （是否克隆对应的数据及事件  是否深度克隆数据及事件）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取div 给div添加一个a标签</span></span><br><span class="line"><span class="comment">//创建元素 创建jquery对象</span></span><br><span class="line"><span class="keyword">let</span> element = $(<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;&lt;span&gt;111&lt;/span&gt;去百度&lt;/a&gt;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(element)</span><br><span class="line"><span class="comment">//添加给对应的div 底层实现为appendChild</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">append</span>(element)</span><br><span class="line"><span class="comment">//添加到元素之前 parent.insertBefore(node,child) //父元素为body</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">before</span>(element) <span class="comment">//将element放到div之前</span></span><br><span class="line"><span class="comment">//将div放到element之前</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">insertBefore</span>(element)</span><br><span class="line"><span class="comment">// 将element添加到div之后 after</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">after</span>(element)</span><br><span class="line"><span class="comment">//将div添加到element之后</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">insertAfter</span>(element)</span><br><span class="line"><span class="comment">//克隆 clone</span></span><br><span class="line"><span class="keyword">let</span> copy = element.<span class="title function_">clone</span>(<span class="literal">true</span>,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">//替换 用element替换div</span></span><br><span class="line">copy.<span class="title function_">replaceAll</span>($(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line"><span class="comment">//replaceWith 用传入的内容来替换调用的内容</span></span><br><span class="line">copy.<span class="title function_">replaceWith</span>(<span class="string">&#x27;&lt;b&gt;替换的内容&lt;/b&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">//删除 可以传入选择器 （删除其中某一个内容）</span></span><br><span class="line"><span class="comment">// element.remove()</span></span><br><span class="line"><span class="comment">//清空 保留原本的标签 里面的内容被删除</span></span><br><span class="line">element.<span class="title function_">empty</span>()</span><br></pre></td></tr></table></figure><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>获取元素的宽度高度</p><ul><li>width 和 height 获取原始宽度</li><li>innerWidth 和 innerHeight  包含填充 不包含边框 clientWidth</li><li>outerWidth 和 outerHeight 包含边框和填充 传入对应的参数是否包含margin offsetWidth</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//width height 不包含边框和填充</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">width</span>(),$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">height</span>());</span><br><span class="line"><span class="comment">//innerWidth innerHeight 包含填充 不包含边框</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">innerWidth</span>(),$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">innerHeight</span>());</span><br><span class="line"><span class="comment">//outerWidth outerHeight 包含边框和填充 传入对应的参数是否包含margin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerWidth</span>(),$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerWidth</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>),$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>));</span><br></pre></td></tr></table></figure><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><ul><li>position 获取定位的位置</li><li>offset 获取离页面的位置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.inner&#x27;</span>).<span class="title function_">position</span>()) <span class="comment">//获取定位的位置 返回的是一个对象 left top</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;.inner&#x27;</span>).<span class="title function_">offset</span>()) <span class="comment">//相对于页面的位置</span></span><br></pre></td></tr></table></figure><h3 id="jQuery的动画"><a href="#jQuery的动画" class="headerlink" title="jQuery的动画"></a>jQuery的动画</h3><ul><li>animate 方法</li><li>fadeIn 淡入</li><li>fadeOut 淡出</li><li>slideDown 显示</li><li>slideUp 隐藏</li><li>slideToggle 切换</li><li>hide 隐藏</li><li>show 显示</li><li>toggle 切换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过回调函数来解决异步问题 淡入淡出变化的是透明的</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">fadeIn</span>(<span class="number">2000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//dom对象 指向调用的元素</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">fadeOut</span>(<span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// $(&#x27;div&#x27;).fadeTo(2000,1) 到达某个透明的</span></span><br><span class="line"><span class="comment">//传入目标对象（只支持传入number类型的值 如果传入的是颜色需要使用Color这个类） 时间  回调</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="attr">top</span>:<span class="number">50</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>:<span class="string">&#x27;yellow&#x27;</span> <span class="comment">//无效</span></span><br><span class="line">&#125;,<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//切换</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">toggle</span>(<span class="number">2000</span>)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideDown</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123; <span class="comment">//滑下来显示</span></span><br><span class="line">    $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideUp</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123; <span class="comment">//移上去隐藏</span></span><br><span class="line">        $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">slideToggle</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123; <span class="comment">//切换</span></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">show</span>(<span class="number">2000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">hide</span>(<span class="number">2000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery的ajax"><a href="#jQuery的ajax" class="headerlink" title="jQuery的ajax"></a>jQuery的ajax</h3><ul><li>ajax方法 发送任何请求</li><li>get方法 发送get请求</li><li>post方法 发送post请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;$(<span class="string">&#x27;button&#x27;</span>).<span class="property">length</span>;i++)&#123;</span><br><span class="line">    $(<span class="string">&#x27;button&#x27;</span>)[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: $.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos&#x27;</span>,<span class="function">(<span class="params">data,status,xhr</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data,status,xhr)</span><br><span class="line">            &#125;)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: $.<span class="title function_">post</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>,<span class="function">(<span class="params">data,status,xhr</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data,status,xhr)</span><br><span class="line">            &#125;)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: $.<span class="title function_">ajax</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos&#x27;</span>,&#123;</span><br><span class="line">                <span class="attr">data</span>:&#123;&#125;,</span><br><span class="line">                <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">                <span class="title function_">success</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ajaxComplete 请求完成</li><li>ajaxError 请求出错</li><li>ajaxSend 请求发送</li><li>ajaxStart 请求开始发送</li><li>ajaxStop 请求停止发送</li><li>ajaxSuccess 请求成功</li></ul><h3 id="jQuery的事件"><a href="#jQuery的事件" class="headerlink" title="jQuery的事件"></a>jQuery的事件</h3><h5 id="jQuery中实现了观察者模式"><a href="#jQuery中实现了观察者模式" class="headerlink" title="jQuery中实现了观察者模式"></a>jQuery中实现了观察者模式</h5><ul><li>on 监听</li><li>off 取消</li><li>one 执行一次</li></ul><h5 id="对应原有的事件进行增强"><a href="#对应原有的事件进行增强" class="headerlink" title="对应原有的事件进行增强"></a>对应原有的事件进行增强</h5><p>将每个事件的事件名定义为方法</p><ul><li>click 方法</li><li>mousedown 方法</li><li>mousemove 方法</li><li>mouseenter 方法</li><li>mouseleave 方法</li><li>hover 传入俩个处理函数一个处理鼠标进入 一个处理鼠标移出</li><li>….</li></ul><h3 id="jQuery的多库共存"><a href="#jQuery的多库共存" class="headerlink" title="jQuery的多库共存"></a>jQuery的多库共存</h3><p>避免关键词（全局污染）冲突，修改原本的$和对应的jQuery，变成自定义的内容。</p><h5 id="noConfict"><a href="#noConfict" class="headerlink" title="noConfict"></a>noConfict</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键词</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jQuery)</span><br><span class="line"><span class="comment">// 全局污染</span></span><br><span class="line"><span class="comment">// var $ = &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// var jQuery = &#x27;hhaha&#x27;</span></span><br><span class="line"><span class="comment">// console.log($)</span></span><br><span class="line"><span class="comment">// console.log(jQuery)</span></span><br><span class="line"><span class="comment">// var a = $.noConflict() //$符号没有意义 jQuery可以使用</span></span><br><span class="line"><span class="comment">// console.log($)</span></span><br><span class="line"><span class="comment">// console.log(a())</span></span><br><span class="line"><span class="comment">// console.log(jQuery)</span></span><br><span class="line"><span class="keyword">var</span> b = $.<span class="title function_">noConflict</span>(<span class="literal">true</span>) <span class="comment">//$符号没有意义 jQuery也没有意义</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jQuery)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><h3 id="jQuery的插件扩展"><a href="#jQuery的插件扩展" class="headerlink" title="jQuery的插件扩展"></a>jQuery的插件扩展</h3><p>使用extend关键词</p><h5 id="自定义函数到jQuery中"><a href="#自定义函数到jQuery中" class="headerlink" title="自定义函数到jQuery中"></a>自定义函数到jQuery中</h5><ul><li><h6 id="自定义静态函数"><a href="#自定义静态函数" class="headerlink" title="自定义静态函数"></a>自定义静态函数</h6><p>$.extend</p></li><li><p>自定义原型函数</p><p>$.fn.extend</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法扩展</span></span><br><span class="line">$.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="comment">//原型方法扩展</span></span><br><span class="line">$.fn.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="title function_">rmClass</span>(<span class="params">className</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//当前访问的jQuery对象</span></span><br><span class="line">        <span class="comment">//返回的数组</span></span><br><span class="line">        <span class="keyword">let</span> result = []</span><br><span class="line">        <span class="comment">//完成removeClass的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//获取本身的class</span></span><br><span class="line">            <span class="keyword">let</span> element = <span class="variable language_">this</span>[i]</span><br><span class="line">            <span class="keyword">let</span> classStr = element.<span class="property">className</span></span><br><span class="line">            <span class="comment">//再使用对应的空格进行分割</span></span><br><span class="line">            <span class="keyword">let</span> classNames = classStr.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="comment">//查询对应的className是否存在</span></span><br><span class="line">            <span class="keyword">let</span> index = classNames.<span class="title function_">findIndex</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> name == className</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">//判断是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//存在从数组中删除</span></span><br><span class="line">                classNames.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断classNames是否个数为0</span></span><br><span class="line">            <span class="keyword">if</span> (!classNames.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="comment">//移出class</span></span><br><span class="line">                element.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;class&#x27;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//设置对应的className</span></span><br><span class="line">                element.<span class="property">className</span> = classNames.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            result.<span class="title function_">push</span>(element)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回jquery对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">jQuery</span>([]).<span class="title function_">pushStack</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">rmClass</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2023/06/06/TechnicalArticles/js/29.%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/06/06/TechnicalArticles/js/29.%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数据库是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p><h3 id="关系型数据库-SQL"><a href="#关系型数据库-SQL" class="headerlink" title="关系型数据库(SQL)"></a>关系型数据库(SQL)</h3><ul><li>mysql（小型数据库，中小型公司使用）</li><li>oracle（大型数据库 安全性较高，数据较多时使用）</li><li>sql server（配合.net一起使用，多存在于老项目）</li><li>db2（erp项目使用 二次开发）</li><li>sqlit（物联网）</li></ul><h3 id="非关系型数据库-NOSQL"><a href="#非关系型数据库-NOSQL" class="headerlink" title="非关系型数据库(NOSQL)"></a>非关系型数据库(NOSQL)</h3><ul><li>redis</li><li>MongoDb</li></ul><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>关系型数据库遵从sql1999协议，内部采用SQL语句来进行相关操作。非关系型数据库采用指令华操作。</p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h4 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h4><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database;</span><br></pre></td></tr></table></figure><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure><h5 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><hr><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(字段名 类型 约束，字段名 类型 约束...)</span><br></pre></td></tr></table></figure><h5 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h5 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 rename 新表名;</span><br></pre></td></tr></table></figure><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure><h4 id="DML语句（数据库模型语句）"><a href="#DML语句（数据库模型语句）" class="headerlink" title="DML语句（数据库模型语句）"></a>DML语句（数据库模型语句）</h4><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into t_user (id,username,password)VALUE(100,&#x27;hello1&#x27;,&#x27;10086111&#x27;);</span><br></pre></td></tr></table></figure><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from t_user where id=100;</span><br></pre></td></tr></table></figure><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE t_user SET password=&#x27;abc&#x27; where id=2;</span><br></pre></td></tr></table></figure><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_user;</span><br></pre></td></tr></table></figure><h3 id="node-mysql模块"><a href="#node-mysql模块" class="headerlink" title="node mysql模块"></a>node mysql模块</h3><h4 id="导入mysql模块"><a href="#导入mysql模块" class="headerlink" title="导入mysql模块"></a>导入mysql模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="创建连接对象"><a href="#创建连接对象" class="headerlink" title="创建连接对象"></a>创建连接对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建连接对象</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;db_student&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="建立链接"><a href="#建立链接" class="headerlink" title="建立链接"></a>建立链接</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立链接</span></span><br><span class="line">connection.<span class="title function_">connect</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mysql连接成功!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from t_user;&#x27;</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    <span class="comment">//查询后关闭连接</span></span><br><span class="line">    connection.<span class="title function_">destroy</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="关于查询的更多示例"><a href="#关于查询的更多示例" class="headerlink" title="关于查询的更多示例"></a>关于查询的更多示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> username = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="keyword">let</span> password = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="comment">// 使用query方法执行增删改查</span></span><br><span class="line"><span class="comment">// 第一个参数为执行的SQL语句，第二个为占位符(防止sql注入)，第三个参数为回调函数</span></span><br><span class="line"><span class="comment">// 增</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;insert into t_user values(null,?,?)&#x27;</span>,[username,password],<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="comment">// 增删改返回的都是OKPacket对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;delete from t_user where id=?&#x27;</span>,<span class="number">101</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="comment">// 增删改返回的都是OKPacket对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;update t_user set username=? where id=?&#x27;</span>,[<span class="string">&#x27;李四&#x27;</span>,<span class="number">100</span>],<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="comment">// 增删改返回的都是OKPacket对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="comment">// 根据id查询</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from t_user where id=?&#x27;</span>,<span class="number">1</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计查询</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;select count(*) as 用户累计 from t_user&#x27;</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有用户</span></span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from t_user;&#x27;</span>,<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    connection.<span class="title function_">destroy</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mysql连接已销毁！&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="通过连接池操作-mysql-createPool"><a href="#通过连接池操作-mysql-createPool" class="headerlink" title="通过连接池操作 mysql.createPool()"></a>通过连接池操作 mysql.createPool()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">let</span> pool = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;db_student&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">pool.<span class="title function_">getConnection</span>(<span class="function">(<span class="params">err,connection</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">    connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from t_user&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        connection.<span class="title function_">destroy</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="封装一个dbUtil-js模块"><a href="#封装一个dbUtil-js模块" class="headerlink" title="封装一个dbUtil.js模块"></a>封装一个dbUtil.js模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装的一个操作对应的数据库工具类</span></span><br><span class="line"><span class="comment">// 导入mysql模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">// 导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 导入path模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过fs模块读取config.json的配置内容</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../config.json&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">let</span> pool = mysql.<span class="title function_">createPool</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装一个执行sql语句的方法</span></span><br><span class="line"><span class="keyword">const</span> query = <span class="keyword">function</span> (<span class="params">sql, params = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取连接池操作</span></span><br><span class="line">        pool.<span class="title function_">getConnection</span>(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err)</span><br><span class="line">            connection.<span class="title function_">query</span>(sql, params, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err)</span><br><span class="line">                <span class="title function_">resolve</span>(result)</span><br><span class="line">                connection.<span class="title function_">destroy</span>()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = query</span><br></pre></td></tr></table></figure><p>config.js 数据库配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">3306</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db_student&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>MongoDB是一个key-value数据库，存储的数据格式为BSON，属于内存数据库，数据存储在内存上。</p><h4 id="mongodb模块"><a href="#mongodb模块" class="headerlink" title="mongodb模块"></a>mongodb模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MongoClient</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).<span class="property">MongoClient</span></span><br><span class="line"><span class="keyword">let</span> clint = <span class="keyword">new</span> <span class="title class_">MongoClient</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/&#x27;</span>)</span><br><span class="line">clint.<span class="title function_">connect</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">connection</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(connection);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接成功！&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> db = connection.<span class="title function_">db</span>(<span class="string">&#x27;user&#x27;</span>)<span class="comment">//没有数据库会自动新建</span></span><br><span class="line">    <span class="comment">// 创建数据表 获取数据表，如果没有就会创建</span></span><br><span class="line">    <span class="keyword">let</span> tb = db.<span class="title function_">collection</span>(<span class="string">&#x27;t_user&#x27;</span>)</span><br><span class="line">    <span class="comment">// 数据表操作</span></span><br><span class="line">    <span class="comment">// 插入一条数据</span></span><br><span class="line">    <span class="comment">// tb.insertOne(&#123;</span></span><br><span class="line">    <span class="comment">//     // _id 主键 自动生成</span></span><br><span class="line">    <span class="comment">//     username: &#x27;tom11&#x27;,</span></span><br><span class="line">    <span class="comment">//     password: &#x27;123456&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;).then((res)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// // 插入多条数据</span></span><br><span class="line">    <span class="comment">// tb.insertMany([</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         // _id 主键 自动生成</span></span><br><span class="line">    <span class="comment">//         username: &#x27;tom0&#x27;,</span></span><br><span class="line">    <span class="comment">//         password: &#x27;123456&#x27;</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         // _id 主键 自动生成</span></span><br><span class="line">    <span class="comment">//         username: &#x27;tom1&#x27;,</span></span><br><span class="line">    <span class="comment">//         password: &#x27;123456&#x27;</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         // _id 主键 自动生成</span></span><br><span class="line">    <span class="comment">//         username: &#x27;tom2&#x27;,</span></span><br><span class="line">    <span class="comment">//         password: &#x27;123456&#x27;</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         // _id 主键 自动生成</span></span><br><span class="line">    <span class="comment">//         username: &#x27;tom3&#x27;,</span></span><br><span class="line">    <span class="comment">//         password: &#x27;123456&#x27;</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">// ]).then((res)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="comment">// tb.find().toArray().then((res)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户名为tom的</span></span><br><span class="line">    <span class="comment">// tb.find(&#123;</span></span><br><span class="line">    <span class="comment">//     username: &#x27;tom3&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;).toArray().then((res) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询一个</span></span><br><span class="line">    <span class="comment">// tb.findOne(&#123;</span></span><br><span class="line">    <span class="comment">//     username:&#x27;tom3&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;).then((res)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 删除</span></span><br><span class="line">    <span class="comment">// tb.deleteOne(&#123;</span></span><br><span class="line">    <span class="comment">//     username: &#x27;tom3&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;).then((res)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// connection.close()</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="mongoose模块"><a href="#mongoose模块" class="headerlink" title="mongoose模块"></a>mongoose模块</h4>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> MongoDB </tag>
            
            <tag> curd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT</title>
      <link href="/2023/06/06/TechnicalArticles/js/27.GIT/"/>
      <url>/2023/06/06/TechnicalArticles/js/27.GIT/</url>
      
        <content type="html"><![CDATA[<h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>Git（）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是[Linus Torvalds](<a href="https://baike.baidu.com/item/Linus">https://baike.baidu.com/item/Linus</a> Torvalds&#x2F;9336769?fromModule&#x3D;lemma_inlink)为了帮助管理Linux内核开发而开发的一个开放<a href="https://baike.baidu.com/item/%E6%BA%90%E7%A0%81/344212?fromModule=lemma_inlink">源码</a>的版本控制软件。</p><p><img src="/../../images/image-20230316115041175.png" alt="image-20230316115041175"></p><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>分布式（distributed）是指在多台不同的服务器中部署不同的服务模块，通过远程调用远程调用协同工作，对外提供服务。<br>不同服务器中部署不同的功能，通过网络连接起来，组成一个完整的系统。</p><p><img src="https://img-blog.csdnimg.cn/58431d574bfd450abf714bac44c38fb4.png" alt="img"></p><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>集群（cluster）是指在多台不同的服务器中部署相同应用或服务模块，构成一个集群，通过负载均衡负载均衡设备对外提供服务。<br>在不同的服务器中部署相同的功能。</p><p><img src="https://img-blog.csdnimg.cn/3f26685a6cab46ecafcea953f84642d9.png" alt="img"></p><h3 id="GIT和SVN的区别"><a href="#GIT和SVN的区别" class="headerlink" title="GIT和SVN的区别"></a>GIT和SVN的区别</h3><h4 id="SVN优缺点"><a href="#SVN优缺点" class="headerlink" title="SVN优缺点"></a>SVN优缺点</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ol><li>管理方便，逻辑明确，符合一般人思维习惯。 </li><li>易于管理，集中式服务器更能保证安全性。 </li><li>代码一致性非常高。 </li><li>适合开发人数不多的项目开发。</li></ol><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>服务器压力太大，数据库容量暴增。 </li><li>如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。 </li><li>不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。</li></ol><h4 id="Git优缺点"><a href="#Git优缺点" class="headerlink" title="Git优缺点"></a>Git优缺点</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ol><li>适合分布式开发，强调个体。 </li><li>公共服务器压力和数据量都不会太大。 </li><li>速度快、灵活。 </li><li>任意两个开发者之间可以很容易的解决冲突。 </li><li>离线工作。</li></ol><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ol><li>学习周期相对而言比较长。 </li><li>不符合常规思维。 </li><li>代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</li></ol><h3 id="GIT的分区"><a href="#GIT的分区" class="headerlink" title="GIT的分区"></a>GIT的分区</h3><ul><li>工作区（Working Directory） 是直接编辑的地方，直接操作。</li><li>暂存区（Stage 或 Index） 数据暂时存放的区域。</li><li>版本库（commit History） 存放已经提交的数据，push 的时候，就是把这个区的数据 push 到远程git仓库。</li></ul><p><img src="/../../images/cc3510e8f32578ed0f39756e298749de.png" alt="img"></p><h3 id="GIT的相关操作"><a href="#GIT的相关操作" class="headerlink" title="GIT的相关操作"></a>GIT的相关操作</h3><h4 id="指令化操作"><a href="#指令化操作" class="headerlink" title="指令化操作"></a>指令化操作</h4><p>git bash 里面是对应的linux指令区，支持linux指令</p><h6 id="常见的linux指令"><a href="#常见的linux指令" class="headerlink" title="常见的linux指令"></a>常见的linux指令</h6><ul><li>cd 进入某个文件夹</li><li>ls 查看当前的文件</li><li>showdown  关机</li><li>reboot 重启</li><li>tar 解压</li><li>vi 编辑器（编辑文件）</li><li>rm 删除</li><li>mv 移动</li><li>clear 清空控制台</li><li>…</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls </span><br></pre></td></tr></table></figure><h5 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>创建一个隐藏的文件夹 .git文件夹（本地仓库）</p><h3 id="暂存区操作"><a href="#暂存区操作" class="headerlink" title="暂存区操作"></a>暂存区操作</h3><h4 id="加入到暂存区"><a href="#加入到暂存区" class="headerlink" title="加入到暂存区"></a>加入到暂存区</h4><h5 id="存入文件到暂存区"><a href="#存入文件到暂存区" class="headerlink" title="存入文件到暂存区"></a>存入文件到暂存区</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件</span><br></pre></td></tr></table></figure><h5 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h5 id="添加文件夹（添加文件夹的下的所有的文件）"><a href="#添加文件夹（添加文件夹的下的所有的文件）" class="headerlink" title="添加文件夹（添加文件夹的下的所有的文件）"></a>添加文件夹（添加文件夹的下的所有的文件）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件夹路径</span><br></pre></td></tr></table></figure><h5 id="添加所有的文件"><a href="#添加所有的文件" class="headerlink" title="添加所有的文件"></a>添加所有的文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line">git add .</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure><h4 id="从暂存区撤回"><a href="#从暂存区撤回" class="headerlink" title="从暂存区撤回"></a>从暂存区撤回</h4><ul><li>不会影响工作区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD -- 文件名</span><br><span class="line">git reset HEAD -- 文件夹名</span><br><span class="line">git reset HEAD -- * #撤回所有</span><br><span class="line">git reset HEAD -- . #撤回所有</span><br></pre></td></tr></table></figure><h3 id="版本库操作"><a href="#版本库操作" class="headerlink" title="版本库操作"></a>版本库操作</h3><h4 id="从暂存区提交到版本库-暂存区就没有了"><a href="#从暂存区提交到版本库-暂存区就没有了" class="headerlink" title="从暂存区提交到版本库 (暂存区就没有了)"></a>从暂存区提交到版本库 (暂存区就没有了)</h4><h6 id="如果是第一次进行提交操作需要设置对应的用户名及邮箱号"><a href="#如果是第一次进行提交操作需要设置对应的用户名及邮箱号" class="headerlink" title="如果是第一次进行提交操作需要设置对应的用户名及邮箱号"></a>如果是第一次进行提交操作需要设置对应的用户名及邮箱号</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.username 名字 --global</span><br><span class="line">git config user.email 邮箱 --global</span><br></pre></td></tr></table></figure><h6 id="提交指令进入vi编辑器"><a href="#提交指令进入vi编辑器" class="headerlink" title="提交指令进入vi编辑器"></a>提交指令进入vi编辑器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit 文件</span><br><span class="line">git commit 文件夹</span><br><span class="line">git commit *</span><br><span class="line">git commit .</span><br></pre></td></tr></table></figure><h6 id="vim-编辑器模式"><a href="#vim-编辑器模式" class="headerlink" title="vim 编辑器模式"></a>vim 编辑器模式</h6><ul><li>阅读模式 （进入就是阅读模式）</li><li>插入模式 （在阅读模式中 按下 a 或 i 或 o进入对应的插入模式  返回阅读模式按下esc键）</li><li>命令行模式 （通过阅读模式进入命令行模式 :wq (保存后退出)）</li></ul><h6 id="提交指定对应的信息"><a href="#提交指定对应的信息" class="headerlink" title="提交指定对应的信息"></a>提交指定对应的信息</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit 文件 -m 信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><h4 id="从版本库撤回"><a href="#从版本库撤回" class="headerlink" title="从版本库撤回"></a>从版本库撤回</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号 </span><br><span class="line">git reset --hard HEAD #撤回最新一次的提交</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>是否影响工作区</th><th>是否影响暂存区</th></tr></thead><tbody><tr><td>–soft</td><td>√</td><td>×</td></tr><tr><td>–mixed （默认的）</td><td>×</td><td>√</td></tr><tr><td>–hard</td><td>√</td><td>√</td></tr></tbody></table><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>分支是对应的git的主要组成，git通过对应的分支操作来进行功能的合并和对应的冲突的解决。分支相当于将对应的功能进行拆分每个子功能单独开辟一个分支，这样就可以让俩个分支之间的耦合和冲突就减少了。</p><h5 id="分支的命名规范"><a href="#分支的命名规范" class="headerlink" title="分支的命名规范"></a>分支的命名规范</h5><p>git 分支分为集成分支、功能分支和修复分支，分别命名为 master、feature 和 fix，均为单数。不可使用 features、future、hotfixes、hotfixs 等错误名称。</p><ul><li>master（主分支，永远是可用的稳定版本，<strong>不能直接在该分支上开发</strong>）</li><li>master_check（未上线前的开发分支，该分支只做只合并操作，不能直接在该分支上开发，前期开发完成后将feature分支合并到此分支）</li><li>online（线上分支，由发版人员确认测试没问题后，将online_check分支合并到此分支）</li><li>develop 开发主分支</li><li>online_check（开发主分支，所有新功能以这个分支来创建自己的开发分支，该分支只做只合并操作，不能直接在该分支上开发）</li><li>feature-xxx（功能开发分支，在develop上创建分支，以自己开发功能模块命名，功能测试正常后合并到develop分支，开发完成后合并到online_check分支上）</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feature/siliwu_querySchdule</span><br></pre></td></tr></table></figure><ul><li>fix-xxx（修改bug分支，在master分支上创建，修复完成后合并到 online_check）</li></ul><p>注意事项：</p><ul><li>一个分支尽量开发一个功能模块，不要多个功能模块在一个分支上开发。</li><li>feature 分支在申请合并之前，最好是先 pull 一下master_check分支下来，看一下有没有冲突，如果有就先解决冲突后再申请合并。</li></ul><h5 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><h5 id="分支的查询（-表示当前分支）"><a href="#分支的查询（-表示当前分支）" class="headerlink" title="分支的查询（*表示当前分支）"></a>分支的查询（*表示当前分支）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h5 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><h5 id="分支的删除（不能在当前分支内删除当前分支）"><a href="#分支的删除（不能在当前分支内删除当前分支）" class="headerlink" title="分支的删除（不能在当前分支内删除当前分支）"></a>分支的删除（不能在当前分支内删除当前分支）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure><h5 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h5><p>会产生一个新的版本记录</p><h6 id="将对应的分支合并到当前分支"><a href="#将对应的分支合并到当前分支" class="headerlink" title="将对应的分支合并到当前分支"></a>将对应的分支合并到当前分支</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支</span><br></pre></td></tr></table></figure><h5 id="衍合分支"><a href="#衍合分支" class="headerlink" title="衍合分支"></a>衍合分支</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase 分支</span><br></pre></td></tr></table></figure><h2 id="Git-EE"><a href="#Git-EE" class="headerlink" title="Git EE"></a>Git EE</h2><h4 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h4><p>git ee（码云 国内）是一个代码托管平台（远程仓库），它主要是用于托管对应的代码。与之相关的平台还有Git hub（国际）。</p><h4 id="主要代码托管"><a href="#主要代码托管" class="headerlink" title="主要代码托管"></a>主要代码托管</h4><ul><li>gitEE 国内的代码托管</li><li>gitHub 国际的代码托管（很多的框架的代码）</li><li>公司内部如果使用的是git进行对应的版本管理那么会使用<strong>git lab</strong>作为远程仓库（它是自己内部搭建的（私服））</li></ul><h4 id="gitEE仓库创建"><a href="#gitEE仓库创建" class="headerlink" title="gitEE仓库创建"></a>gitEE仓库创建</h4><ul><li><p>注册、登录</p></li><li><p>新建仓库</p></li></ul><h4 id="第一种情况不设置对应的内容"><a href="#第一种情况不设置对应的内容" class="headerlink" title="第一种情况不设置对应的内容"></a>第一种情况不设置对应的内容</h4><p>拷贝对应的路径</p><p>在本地创建对应的git仓库 连接对应的远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin url #远程连接建立 第一次需要输入密码（一次）</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据准备 本地仓库操作</span></span><br><span class="line">git add .</span><br><span class="line">git commit .</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送到对应远程仓库</span></span><br><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure><h4 id="第二种方法内容已经存在"><a href="#第二种方法内容已经存在" class="headerlink" title="第二种方法内容已经存在"></a>第二种方法内容已经存在</h4><p>拷贝路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone url #克隆对应的内容</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">本地仓库操作</span></span><br><span class="line">git add .</span><br><span class="line">git commit .</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送到远程仓库</span></span><br><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure><h3 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h3><ul><li>git pull 拉取最新的数据 （默认会进行合并的操作）</li><li>git fetch 拉取数据 （不会进行合并操作）</li><li>git remote add origin url  建立连接</li><li>git push  origin 分支名  推送到远程仓库</li><li>git diff  比对对应的分支之间的差异</li><li>git clone 克隆对应的远程仓库内容</li></ul><h3 id="对应的冲突解决"><a href="#对应的冲突解决" class="headerlink" title="对应的冲突解决"></a>对应的冲突解决</h3><p>对应的俩个人在完成一个功能的时候 操作同一个分支中的内容，第一个版本号为0，a先提交 那么对应的远程仓库的版本就是1 如果b再进行提交它的版本是0 是小于远程仓库的版本的，这个时候就会产生冲突。需要人工介入。</p><h5 id="解决冲突的方式"><a href="#解决冲突的方式" class="headerlink" title="解决冲突的方式"></a>解决冲突的方式</h5><p>先拉取最新的再进行对应的操作（是保留谁的内容）</p><p>git pull 会合并对应的内容</p><h6 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master:hello</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再进行比对 出现差异</span></span><br><span class="line">git diff hello</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">人工干预</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再合并</span></span><br><span class="line">git merge hello</span><br></pre></td></tr></table></figure><h6 id="使用vscode来解决"><a href="#使用vscode来解决" class="headerlink" title="使用vscode来解决"></a>使用vscode来解决</h6><p><img src="https://www.likecs.com/default/index/img?u=L2RlZmF1bHQvaW5kZXgvaW1nP3U9YUhSMGNITTZMeTl3YVdGdWMyaGxiaTVqYjIwdmFXMWhaMlZ6THprNE9DOWlPREkwTWpNMVl6bGtNR1kzTXprNE5USmtZemN5WVRGbE5XVm1ZVEJtWXk1d2JtYz0=" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> GIT </tag>
            
            <tag> 版本管理 </tag>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express</title>
      <link href="/2023/06/06/TechnicalArticles/js/day33%20express/"/>
      <url>/2023/06/06/TechnicalArticles/js/day33%20express/</url>
      
        <content type="html"><![CDATA[<h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>基于 <a href="https://nodejs.org/en/">Node.js</a> 平台，快速、开放、极简的 Web 开发框架</p><h3 id="express入门"><a href="#express入门" class="headerlink" title="express入门"></a>express入门</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出的核心方法就是创建应用的方法 createApplication</span></span><br><span class="line"><span class="comment">// 所以直接作为函数调用即可</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个为路由地址，第二个为处理函数,处理函数中第一个为请求对象，第二个为响应对象，第三next</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;hello world!中文&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server is running at localhost:8888&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p><img src="/../../images/image-20230323105317858.png" alt="image-20230323105317858"></p><ul><li>express.static() 托管静态资源</li><li>express.json() 读取content-type为JSON 的body里的内容</li><li>express.Router() 产生一个路由对象</li><li>express.urlencode() 读取content-type 为x-www-from-urlencode 借助了第三方包body-parse</li></ul><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li>locals 本地路径</li><li>mountpath 挂载路径</li><li>router 路由对象</li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p><img src="/../../images/image-20230323105258568.png" alt="image-20230323105258568"></p><ul><li><p>all 处理所有请求</p></li><li><p>delete </p></li><li><p>get</p></li><li><p>post</p></li><li><p>put</p></li><li><p>use 使用中间件</p></li><li><p>engine 模板引擎开启</p></li><li><p>get 获取配置</p></li><li><p>set 设置配置</p></li><li><p>listen 监听</p></li><li><p>disable 禁用某个配置</p></li><li><p>enable 开启某个配置</p></li><li><p>render 服务器渲染</p></li><li><p>route 进行路由配置</p></li><li><p>path 路径配置</p></li><li><p>params 参数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 请求处理</span></span><br><span class="line"><span class="comment">// 可以利用all进行拦截</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入了all&#x27;</span>);</span><br><span class="line">    <span class="comment">// res.end(&#x27;all/&#x27;)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;get/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;post/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;delete/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;put/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;eat!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server is running at localhost:8888&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="回调函数中的requset对象"><a href="#回调函数中的requset对象" class="headerlink" title="回调函数中的requset对象"></a>回调函数中的requset对象</h4><p><img src="/../../images/image-20230323111226184.png" alt="image-20230323111226184"></p><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><ul><li><p>query 获取get请求传递的参数(?后面的)</p></li><li><p>params 获取path路径后携带的参数（配合路径地址使用）</p></li><li><p>body 获取请求体（post的数据存于请求体）</p></li><li><p>app 获取应用对象</p></li><li><p>baseUrl 获取请求体的baseUrl</p></li><li><p>cookies 获取携带的cookies</p></li><li><p>ip  获取ip地址</p></li><li><p>host 获取host主机</p></li><li><p>hostname 获取主机名</p></li><li><p>method 请求的类型</p></li><li><p>originalUrl 跨域地址</p></li><li><p>path 路径</p></li><li><p>protocol 协议</p></li><li><p>secure 判断是否为https</p></li><li><p>header 获取请求头内容</p><p>…</p></li></ul><h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><ul><li><p>获取请求相关内容</p><p>…</p></li></ul><h4 id="回调函数中的respose对象"><a href="#回调函数中的respose对象" class="headerlink" title="回调函数中的respose对象"></a>回调函数中的respose对象</h4><p><img src="/../../images/image-20230323112123661.png" alt="image-20230323112123661"></p><h5 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h5><ul><li>app 获取应用对象</li><li>headerSent 响应头相关</li><li>locals 本地地址</li></ul><h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><ul><li>append 追加内容发送</li><li>attchment 下载的相关设置</li><li>cookie 设置响应头的cookie</li><li>clearCookies 清空cookies</li><li>download 下载</li><li>end 结束当前响应</li><li>format 格式化</li><li>get 获取相关内容</li><li>jsonp 接口</li><li>send 发送数据（自动end 自动将发送的对象序列化，可直接发送对象）</li><li>json 发送json数据（自动end 自动将发送的对象序列化，可直接发送对象）</li><li>status 设置对应的状态码</li><li>render 服务器渲染核心 （结合模板引擎进行渲染）</li><li>redirect 重定向</li></ul><h4 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h4><p><img src="/../../images/image-20230323113033992.png" alt="image-20230323113033992"></p><h5 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h5><ul><li>all</li><li>post</li><li>get</li><li>delete</li><li>put</li><li>all</li><li>use</li><li>rouete</li><li>param</li></ul><h5 id="利用route对象来进行分离"><a href="#利用route对象来进行分离" class="headerlink" title="利用route对象来进行分离"></a>利用route对象来进行分离</h5><h3 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h3><p>第三方模板引擎</p><ul><li>art-template</li><li>express-art-template</li><li>jade</li><li>ejs</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Express </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Node </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT</title>
      <link href="/2023/06/06/TechnicalArticles/js/day34%20jwt/"/>
      <url>/2023/06/06/TechnicalArticles/js/day34%20jwt/</url>
      
        <content type="html"><![CDATA[<h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>JSON WEB Token</strong>（<strong>JWT</strong>，读作 [&#x2F;dʒɒt&#x2F;]），是一种基于JSON的、用于在网络上声明某种主张的令牌（token）。JWT通常由三部分组成: </p><p>跨域身份验证解决方案</p><h4 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h4><ul><li>Header(头）记录令牌类型、签名算法等 例如：{“alg”:”HS256”,”type”,”JWT”} </li><li>Payload(有效载荷）携带一些用户信息 例如{“userId”:”1”,”username”:”mayikt”}</li><li>Signature(签名）防止Token被篡改、确保安全性 例如 计算出来的签名，一个字符串</li></ul><h4 id="实际应用时需要的数据"><a href="#实际应用时需要的数据" class="headerlink" title="实际应用时需要的数据"></a>实际应用时需要的数据</h4><ul><li>密钥 （用于加密和解密的密钥）</li><li>信息 （利用用户的非敏感信息，例如id来生成token）</li><li>时效 （token过期时间）</li></ul><h3 id="express-jwt"><a href="#express-jwt" class="headerlink" title="express-jwt"></a>express-jwt</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul><li><p>在路由处理文件中先导入jsonwebtoken包，解构出sion和verify方法，用于生成和解密token</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;verify,sign&#125; = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>先在app.js中拦截对应的需要权限的接口 放行不需要拦截的接口（登陆、注册）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express-jwt中间件拦截</span></span><br><span class="line"><span class="comment">// 参数1为密钥，参数2为加密方式</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">jwt</span>(&#123;<span class="attr">secret</span>:privateKey,<span class="attr">algorithms</span>:[<span class="string">&#x27;RS256&#x27;</span>]&#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>:[<span class="string">&#x27;/users/login&#x27;</span>,<span class="string">&#x27;/users/register&#x27;</span>]</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>在登陆请求中，登陆成功则利用用户id等不敏感信息生成对应的token并携带响应给客户端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户登陆操作</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取post请求体中的用户名和密码</span></span><br><span class="line">  <span class="keyword">let</span> &#123; username, password &#125; = req.<span class="property">body</span></span><br><span class="line">  <span class="comment">// 获取从数据库获取当前用户</span></span><br><span class="line">  <span class="keyword">let</span> checks = <span class="keyword">await</span> <span class="title function_">queryUserByUser</span>(&#123; username &#125;)</span><br><span class="line">  <span class="comment">// 如果用户名存在</span></span><br><span class="line">  <span class="keyword">if</span> (checks.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">// 对前端传来的密码进行加密 createHmac()方法中，第一个为算法，第二个为盐值</span></span><br><span class="line">    password = req.<span class="property">body</span>.<span class="property">password</span> = <span class="title function_">createHmac</span>(<span class="string">&#x27;sha256&#x27;</span>, user.<span class="property">slat</span>).<span class="title function_">update</span>(password).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="comment">// 从数据库返回的数组中获得当前用户</span></span><br><span class="line">    <span class="keyword">let</span> user = checks[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// 若密码比对成功</span></span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">password</span> == password) &#123;</span><br><span class="line">      <span class="comment">// 生成token</span></span><br><span class="line">      <span class="keyword">let</span> token = <span class="title function_">sign</span>(&#123; <span class="attr">id</span>: user.<span class="property">id</span> &#125;, publicKey, &#123;</span><br><span class="line">        <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span>,</span><br><span class="line">        <span class="attr">expiresIn</span>: <span class="string">&quot;10h&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 响应并携带token</span></span><br><span class="line">      res.<span class="title function_">send</span>(<span class="keyword">new</span> <span class="title class_">Response</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: user.<span class="property">id</span>,</span><br><span class="line">        token</span><br><span class="line">      &#125;, <span class="number">200</span>, <span class="string">&#x27;登陆成功&#x27;</span>)).<span class="title function_">status</span>(<span class="number">200</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//若密码比对不成功</span></span><br><span class="line">      res.<span class="title function_">send</span>(<span class="keyword">new</span> <span class="title class_">Response</span>(&#123;&#125;, <span class="string">&#x27;用户名或密码错误&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;<span class="comment">//若用户不存在</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="keyword">new</span> <span class="title class_">Response</span>(&#123;&#125;, <span class="string">&#x27;用户名或密码错误&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>再次请求被拦截的接口则需要带上token</p><p>将token存放到浏览器的本地存储中（localstorage，sessionstorage）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localstorage.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>,token)<span class="comment">//存到本地</span></span><br></pre></td></tr></table></figure><p>从本地获取token，放入请求头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">header</span>[<span class="string">&#x27;Authorization&#x27;</span>] =<span class="string">&#x27;Bearer &#x27;</span>+localstorage.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h4><ul><li>对称加密</li><li>非对称加密</li></ul><p><strong>借助OpenSSL来生成密钥</strong></p><p>git自带openssl，只需要将user里的bin文件的路径配置到环境变量path中即可</p><p><img src="/../../images/image-20230324212953932.png" alt="image-20230324212953932"></p><p><img src="/../../images/image-20230324213033554.png" alt="image-20230324213033554"></p><p>生成私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out private.key</span><br></pre></td></tr></table></figure><p>生成公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in private.key -pubout -out public.key</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Node </tag>
            
            <tag> express </tag>
            
            <tag> 鉴权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js基础进阶</title>
      <link href="/2023/06/06/TechnicalArticles/js/28.node%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/06/06/TechnicalArticles/js/28.node%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="node基础进阶"><a href="#node基础进阶" class="headerlink" title="node基础进阶"></a>node基础进阶</h1><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><p>操作对应的文件路径相关的内容</p><ul><li>dirname获取文件名</li><li>basename获取最后的路径名</li><li>extname获取扩展名 ❤</li><li>isAbsolute判断是否为绝对路径</li><li>relative返回一个路径基于另一个的相对路径</li><li>join连接多个路径返回一个新的路径 ❤</li><li>format将对应的路径字符串转为对象 ❤</li><li>parse将对应的路径对象转为字符串 ❤</li><li>resolve返回对应的绝对路径拼接的字符串</li><li>normalize返回一个路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// global对象</span></span><br><span class="line"><span class="comment">// 路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件夹路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(__dirname));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回文件夹名或文件名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(__dirname));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回后缀</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(__filename));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转为路径对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(__filename));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路径对象变为路径字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">format</span>(&#123;</span><br><span class="line">    <span class="attr">dir</span>:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">ext</span>:<span class="string">&#x27;.png&#x27;</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">isAbsolute</span>(__dirname))<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">join</span>(<span class="string">&#x27;C:&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;.png&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回两个路径之间的相对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">relative</span>(__dirname,__filename))</span><br></pre></td></tr></table></figure><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p>遍历文件和文件夹，并统计个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;join&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fileCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> dirCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducePath</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="title function_">existsSync</span>(path))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前文件不存在&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fileList = fs.<span class="title function_">readdirSync</span>(path)</span><br><span class="line">        fileList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 将文件路径和文件中的文件的路径拼接到一起</span></span><br><span class="line">            <span class="keyword">let</span> stats = fs.<span class="title function_">statSync</span>(<span class="title function_">join</span>(path,file))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(stats.<span class="title function_">isDirectory</span>())&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前文件夹有&#x27;</span>+file);</span><br><span class="line">                dirCount++</span><br><span class="line">                <span class="title function_">reducePath</span>(<span class="title function_">join</span>(path,file))</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前文件有&#x27;</span>+file);</span><br><span class="line">                fileCount++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">reducePath</span>(<span class="string">&#x27;./mydir&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文件个数为<span class="subst">$&#123;fileCount&#125;</span>,文件夹个数为<span class="subst">$&#123;dirCount&#125;</span>`</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的使用</title>
      <link href="/2023/06/05/welcomeArticles/howUse/"/>
      <url>/2023/06/05/welcomeArticles/howUse/</url>
      
        <content type="html"><![CDATA[<div align="center">  <!-- dynamic typing effect 动态打字效果 -->  <div align="center">    <a href="https://nobitayuan.github.io/">      <img src="https://readme-typing-svg.demolab.com?font=Fira+Code&pause=1000&width=435&lines=道阻且长 行则将至;袁同学祝您今天生活愉快!&center=true&size=27" alt="Typing SVG" />    </a>  </div></div><h2 id="关于这个博客使用？"><a href="#关于这个博客使用？" class="headerlink" title="关于这个博客使用？"></a>关于这个博客使用？</h2><p>哈哈哈哈哈哈哈，其实随便逛逛就可以啦~</p><p>当然你想看到系统一些的目录就点击上部导航栏的分类，里面有我对文章详细的分类</p><p>其次你也可以点击标签查看词云，看看是否有你感兴趣的词条？</p><p>该博客的文章皆是我结合网上的内容和自己的理解而整理出来的，可能文章水平不是很高，但是个人认为多少是有些可看的</p><h2 id="道阻且长，行则将至，共勉"><a href="#道阻且长，行则将至，共勉" class="headerlink" title="道阻且长，行则将至，共勉~"></a>道阻且长，行则将至，共勉~</h2>]]></content>
      
      
      <categories>
          
          <category> 关于我的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作者 </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome</title>
      <link href="/2023/06/05/welcomeArticles/welcome/"/>
      <url>/2023/06/05/welcomeArticles/welcome/</url>
      
        <content type="html"><![CDATA[<!-- title【必需】文章标题date【必需】文章创建日期updated【可选】文章更新日期tags【可选】文章标籤categories【可选】文章分类keywords【可选】文章关键字description【可选】文章描述top_img【可选】文章顶部图片cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)comments【可选】显示文章评论模块(默认 true)toc【可选】显示文章TOC(默认为设置中toc的enable配置)toc_number【可选】显示toc_number(默认为设置中toc的number配置)toc_style_simple【可选】显示 toc 简洁模式copyright【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)copyright_author【可选】文章版权模块的文章作者copyright_author_href【可选】文章版权模块的文章作者链接copyright_url【可选】文章版权模块的文章连结链接copyright_info【可选】文章版权模块的版权声明文字mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置highlight_shrink【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)aside【可选】显示侧边栏 (默认 true) --><div align="center">  <!-- dynamic typing effect 动态打字效果 -->  <div align="center">    <a href="https://nobitayuan.github.io/">      <img src="https://readme-typing-svg.demolab.com?font=Fira+Code&pause=1000&width=435&lines=道阻且长 行则将至;袁同学祝您今天生活愉快!&center=true&size=27" alt="Typing SVG" />    </a>  </div></div><h2 id="欢迎来到我的小屋"><a href="#欢迎来到我的小屋" class="headerlink" title="欢迎来到我的小屋"></a>欢迎来到我的小屋</h2><p>这里是是我分享个人生活，分享所学知识点的小地方👀~</p><p>哈哈哈哈哈来了就是客人，请随便逛~😁😜</p><hr>]]></content>
      
      
      <categories>
          
          <category> 关于我的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作者 </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的搭建</title>
      <link href="/2023/06/05/welcomeArticles/howBuild/"/>
      <url>/2023/06/05/welcomeArticles/howBuild/</url>
      
        <content type="html"><![CDATA[<div align="center">  <!-- dynamic typing effect 动态打字效果 -->  <div align="center">    <a href="https://nobitayuan.github.io/">      <img src="https://readme-typing-svg.demolab.com?font=Fira+Code&pause=1000&width=435&lines=道阻且长 行则将至;袁同学祝您今天生活愉快!&center=true&size=27" alt="Typing SVG" />    </a>  </div></div><h2 id="关于这个博客"><a href="#关于这个博客" class="headerlink" title="关于这个博客"></a>关于这个博客</h2><ul><li>这个博客的搭建所使用的框架是： <a href="https://hexo.io/zh-cn/">hexo</a></li><li>主题是butterfly： <a href="https://butterfly.js.org/">butterfly</a></li><li>博客额外功能的增强和美化皆来自这位大佬： <a href="https://www.fomal.cc/">Fomalhaut🥝</a></li><li>托管平台是： <a href="https://github.com/NobitaYuan/NobitaYuan.github.io">GitHub</a></li><li>图床是七牛云的：<a href="https://sso.qiniu.com/">OSS对象存储</a></li><li>文章的格式当然是： <a href="http://markdown.p2hp.com/">Markdown</a></li><li>编辑文章的软件： <a href="https://typoraio.cn/">Typora</a></li></ul><h2 id="具体如何从0到1搭建起来的可以看看Fomalhaut🥝大佬的系列文章"><a href="#具体如何从0到1搭建起来的可以看看Fomalhaut🥝大佬的系列文章" class="headerlink" title="具体如何从0到1搭建起来的可以看看Fomalhaut🥝大佬的系列文章"></a>具体如何从0到1搭建起来的可以看看Fomalhaut🥝大佬的系列文章</h2><p>当然，搭建这个博客还是需要很多的前端的前置的知识的，最基本的html、js、css、node、git、github的等知识还是需要要掌握的</p><blockquote><p>链接在这里👉 <a href="https://www.fomal.cc/posts/e593433d.html">https://www.fomal.cc/posts/e593433d.html</a><br><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/20230608211136.png" alt="网站快照"></p></blockquote><h2 id="也祝你早日有个自己的博客，拜托这真的很酷呀-🤪🤪🤪🤣🤣🤣"><a href="#也祝你早日有个自己的博客，拜托这真的很酷呀-🤪🤪🤪🤣🤣🤣" class="headerlink" title="也祝你早日有个自己的博客，拜托这真的很酷呀~🤪🤪🤪🤣🤣🤣"></a>也祝你早日有个自己的博客，拜托这真的很酷呀~🤪🤪🤪🤣🤣🤣</h2><br>]]></content>
      
      
      <categories>
          
          <category> 关于我的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作者 </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Vue</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/0.1%E5%88%9D%E8%AF%86Vue/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/0.1%E5%88%9D%E8%AF%86Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​渐进式 JavaScript 框架，采用mvvm模式（数据驱动视图），易学易用（指令华操作），性能出色（封装了部分内容，可进行部分优化），适用场景丰富的 Web 前端框架（生态体系完善（阿里巴巴））。</p><h3 id="渐进式框架"><a href="#渐进式框架" class="headerlink" title="渐进式框架"></a>渐进式框架</h3><p>渐进式可以理解为：用什么拿什么；</p><p>​因为Vue主张少，不强势。你可以在核心功能的基础上任意选用其他的部件，不一定要全部整合在一起。可以看到，所说的“渐进式”，其实就是Vue的使用方式，同时也体现了Vue的设计的理念，总而言之，你可以有很多选择，并不是非常强制你一定要用那种方式，vue只是为我们提供了视图层，至于底层的实现，还是有非常多的选择的。</p><p><strong>代表框架</strong></p><ul><li>vue（尤雨溪 2016）</li><li>react（Facebook 2013）</li><li>angular（Google 2009）</li></ul><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><p>是Model-View-ViewModel的简写，本质是个MVC的改进版</p><ul><li><p>M：模型 Model  —&gt;也就是data中的数据</p></li><li><p>V：视图 View  —&gt;也就是模板代码</p></li><li><p>VM：视图模型 ViewModel  —&gt;也就是Vue实例（vm）</p><p>DOM listeners DOM 监听器（监听DOM ）</p><p>Data Bindings 数据绑定器 （负责监听Model中的数据变化）</p></li></ul><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/3b2deed9e76142798a44ee3bbc33f39b.png" alt="img"></p><h3 id="Vue的虚拟DOM及diff算法"><a href="#Vue的虚拟DOM及diff算法" class="headerlink" title="Vue的虚拟DOM及diff算法"></a>Vue的虚拟DOM及diff算法</h3><h4 id="虚拟DOM（抽取于实体DOM而生成的虚拟对象）"><a href="#虚拟DOM（抽取于实体DOM而生成的虚拟对象）" class="headerlink" title="虚拟DOM（抽取于实体DOM而生成的虚拟对象）"></a>虚拟DOM（抽取于实体DOM而生成的虚拟对象）</h4><p>​通过js创建一个Object对象来模拟真实DOM结构，这个对象包含标签名 (tag)、属性 (attrs) 和子元素对象 (children) 三个属性，通过vue中的render()函数把虚拟dom编译成真实dom，在通过appendChild()添加到页面中。</p><h4 id="为什么要用虚拟DOM来描述真实DOM呢？"><a href="#为什么要用虚拟DOM来描述真实DOM呢？" class="headerlink" title="为什么要用虚拟DOM来描述真实DOM呢？"></a><strong>为什么要用虚拟DOM来描述真实DOM呢？</strong></h4><p>​创建真实DOM成本比较高，如果用 js对象来描述一个dom节点，成本比较低，另外我们在频繁操作dom是一种比较大的开销。所以建议用虚拟dom来描述真实dom。</p><h4 id="diff算法-（用于比对与虚拟DOM的差异）"><a href="#diff算法-（用于比对与虚拟DOM的差异）" class="headerlink" title="diff算法 （用于比对与虚拟DOM的差异）"></a>diff算法 （用于比对与虚拟DOM的差异）</h4><p>diff算法用于比对新旧虚拟dom，利用patch打补丁包的形式来比对的。</p><h3 id="Vue的版本"><a href="#Vue的版本" class="headerlink" title="Vue的版本"></a>Vue的版本</h3><h4 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h4><p>2015年发布，底层采用Object.defineProperty，全面兼容es5语法</p><h4 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h4><p>2020年发布，底层采用Proxy，全面兼容es6，简化了对应了指令操作，提高了对应的效率，全面兼容vue2</p><h3 id="Vue入门案例"><a href="#Vue入门案例" class="headerlink" title="Vue入门案例"></a>Vue入门案例</h3><p><strong>引入vue.js</strong></p><ul><li><p>通过webpack来构建对应的脚手架，通过模块化导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue -s</span><br></pre></td></tr></table></figure></li><li><p>cdn导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/vue@2.7.1/dist/vue.global.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>入门代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,<span class="comment">//挂载点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;this is vue2&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="comment">//数据 利用递归进行数据劫持</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue的配置参数"><a href="#Vue的配置参数" class="headerlink" title="Vue的配置参数"></a>Vue的配置参数</h3><ul><li>el 挂载点</li><li>data 数据</li><li>methods 方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue2.7.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$data</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$el</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">names</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">sayHi</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue的指令"><a href="#Vue的指令" class="headerlink" title="Vue的指令"></a>Vue的指令</h3><p>vue封装了对应的指令去操作dom</p><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>html解析显示，vue做了专门优化，可以防止xss攻击</p><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>文本显示</p><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>一定会渲染，只渲染一次</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>不一定渲染 ，可控制重新渲染</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:username</span>=<span class="string">&quot;name&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:username</span>=<span class="string">&quot;name&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;isDarkblue?&#x27;pink&#x27;:&#x27;darkblue&#x27;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue2.7.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">className</span>:<span class="string">&#x27;darkblue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isDarkblue</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(key,value) in obj&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;key&#125;&#125;：&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;value&#125;&#125;[&#123;&#123;index&#125;&#125;]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据number对象的值遍历个数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;v in number&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;v&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">email</span>: <span class="string">&#x27;123@123email&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number</span>:<span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-if和v-for的优先级问题"><a href="#v-if和v-for的优先级问题" class="headerlink" title="v-if和v-for的优先级问题"></a>v-if和v-for的优先级问题</h4><ul><li>vue2 v-for要高于v-if</li><li>vue3 v-if 要高于v-for 且会报错</li></ul><p><strong>vue官方文档提示：不建议两者在同一个标签上使用</strong></p><h4 id="v-on事件绑定"><a href="#v-on事件绑定" class="headerlink" title="v-on事件绑定"></a>v-on事件绑定</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handlerClick()&quot;</span>&gt;</span>带括号的点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handlerClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;handlerParent&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;handlerChild&quot;</span>&gt;</span>子元素按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;aClick&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 函数不能是箭头函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handlerClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 这里的this指向vue实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&#x27;袁同学 点击了&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handlerChild</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子元素点击了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handlerParent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父元素点击了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a点击了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><ul><li><code>.stop</code> 停止冒泡</li><li><code>.prevent</code> 阻止默认事件</li><li><code>.capture</code> 捕获</li><li><code>.self</code> 自身触发</li><li><code>.once</code> 只执行一次</li><li><code>.passive</code>会 告诉浏览器你不想阻止事件的默认行为</li></ul><h4 id="辅助相关指令"><a href="#辅助相关指令" class="headerlink" title="辅助相关指令"></a>辅助相关指令</h4><h5 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h5><p>跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</p><h5 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h5><p>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] &#123; display: none &#125;</code> 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p><h5 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h5><p>只渲染元素和组件一次。随后的重新渲染，元素&#x2F;组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p><p><strong>这三个指令都不需要表达式，直接用即可</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handClick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">names</span> = <span class="string">&#x27;袁同学 点击了&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-model的双向数据绑定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 监听input框的change事件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 普通输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文本区 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    &#123;&#123;text&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 拖拉条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;number&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;list&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;长沙&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;list&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;list&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;list&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;list&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;杭州&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;list&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;sex&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下拉框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;option&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;前端开发&quot;</span>&gt;</span>前端开发<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;后端开发&quot;</span>&gt;</span>后端开发<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;c++开发&quot;</span>&gt;</span>c++开发<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;算法工程师&quot;</span>&gt;</span>算法工程师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;嵌入式工程师&quot;</span>&gt;</span>嵌入式工程师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    &#123;&#123;option&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&#x27;msg&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">text</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number</span>:<span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>:[<span class="string">&#x27;长沙&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">option</span>:<span class="string">&#x27;前端开发&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue动画及组件</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/03.vue%E5%8A%A8%E7%94%BB%E5%8F%8A%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/03.vue%E5%8A%A8%E7%94%BB%E5%8F%8A%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="vue动画及组件"><a href="#vue动画及组件" class="headerlink" title="vue动画及组件"></a>vue动画及组件</h1><h3 id="vue动画"><a href="#vue动画" class="headerlink" title="vue动画"></a>vue动画</h3><p>transition</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/QQ%25E6%2588%25AA%25E5%259B%25BE20220826212438.png" alt="img"></p><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./animate.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scope&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        v-enter 隐藏到显示</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        v-enter-to 隐藏到显示的过程</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        v-enter-from 隐藏到</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.v-enter</span>,<span class="selector-class">.v-leave</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: <span class="number">1s</span> all;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition</span> <span class="attr">enter-to-class</span>=<span class="string">&quot;animated fadeInLeft&quot;</span> <span class="attr">leave-to-class</span>=<span class="string">&quot;animated fadeOutRight&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isShow</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态添加li的缓动效果"><a href="#动态添加li的缓动效果" class="headerlink" title="动态添加li的缓动效果"></a>动态添加li的缓动效果</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./animate.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">duration</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">enter-to-class</span>=<span class="string">&quot;animated fadeInLeft&quot;</span> <span class="attr">leave-to-class</span>=<span class="string">&quot;animated fadeOutRight&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;v&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">arr</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">item</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">item</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">item</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue中的组件"><a href="#Vue中的组件" class="headerlink" title="Vue中的组件"></a>Vue中的组件</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>组件是一个对象，是模块化的体现，包含了html,css,js，组件的设计是为了复用</p><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将组件名当做标签名使用使用-来分割驼峰命名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以是双标签也可以是单标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first-component</span>&gt;</span><span class="tag">&lt;/<span class="name">first-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 声明全局组件 Vue.component声明（组件名，组件内容）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> firstComponent = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;firstComponent&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;/h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,<span class="comment">//组件内对外暴露的标签只有一个</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;你好！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将组件名当做标签名使用使用-来分割驼峰命名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">last-component</span>&gt;</span><span class="tag">&lt;/<span class="name">last-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 局部组件使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> lastComponent = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;lastComponent&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h3&gt;&#123;&#123;msg&#125;&#125;&lt;/h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 组件名：组件对象</span></span></span><br><span class="line"><span class="language-javascript">            lastComponent</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件使用的注意事项"><a href="#组件使用的注意事项" class="headerlink" title="组件使用的注意事项"></a>组件使用的注意事项</h4><ul><li>组件内部的属性和vue实例的属性是一致的（Vue实例是最大的组件）</li><li>组件内部的data是一个函数，通过对象的形式返回数据（如果是对象的形式可能会和其他组件的data产生冲突，导致对象覆盖问题，从而造成全局污染）</li><li>组件内的显示利用template属性，template对外暴露的元素根节点只能有一个，否则会报错</li><li>组件的使用直接把组件名当做标签名（不能使用驼峰命名法，使用-来分割驼峰）</li><li>组件的使用可以是单标签也可以是双标签</li></ul><h4 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h4><p>利用内置组件component中的is来切换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;name=(name==&#x27;one&#x27;?&#x27;two&#x27;:&#x27;one&#x27;)&quot;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> one = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;one&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;组件one&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> two = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;two&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;组件two&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;one&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            one,</span></span><br><span class="line"><span class="language-javascript">            two</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件之间的关系"><a href="#组件之间的关系" class="headerlink" title="组件之间的关系"></a>组件之间的关系</h4><h5 id="主要关系"><a href="#主要关系" class="headerlink" title="主要关系"></a>主要关系</h5><ul><li>父子关系</li><li>兄弟关系</li></ul><h5 id="组件之间的通信"><a href="#组件之间的通信" class="headerlink" title="组件之间的通信"></a>组件之间的通信</h5><h6 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子(props)"></a>父传子(props)</h6><p>利用子组件的props属性，可以接受父组件所有的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 准备子组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h5&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &#123;&#123;msg&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &#123;&#123;message&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/h5&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;子组件&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//第一种写法，里面为接收的属性名(类似于data中的数据，可以直接使用)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// props:[&#x27;message&#x27;],</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 第二种写法，对象写法，可以指定默认值和类型验证（推荐写法）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:<span class="string">&#x27;这是默认值default&#x27;</span>,<span class="comment">//指定默认值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">String</span><span class="comment">//类型验证</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> parent = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &#123;&#123;msg&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;child :message=&#x27;message&#x27;&gt;&lt;/child&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;父组件&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&#x27;来自父组件的数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            child<span class="comment">//在父组件中注册子组件</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            parent<span class="comment">//在最大的vue实例对象中注册父组件</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="子传父-emit"><a href="#子传父-emit" class="headerlink" title="子传父($emit)"></a>子传父($emit)</h6><ul><li>在子组件通过$emit来派发对应的事件，并传入数据</li><li>父组件通过监听对应的事件执行，来获取数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 准备子组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &#123;&#123;msg&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;button @click=&quot;handler&quot;&gt;click&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;子组件&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&#x27;来自子组件的数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过执行对应的事件来传递对应的值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 第一个参数为事件名，第二个为传递的值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;sendMsg&#x27;</span>,<span class="variable language_">this</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> parent = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在父组件内，监听对的事件执行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &#123;&#123;msg&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;child @sendMsg=&quot;handler&quot;&gt;&lt;/child&gt;&#123;&#123;args&#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;父组件&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">args</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">arg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">args</span> = arg</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            child<span class="comment">//在父组件中注册子组件</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            parent<span class="comment">//在最大的vue实例对象中注册父组件</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><ul><li>父传子，利用属性进行传值，子组件利用props来接收</li><li>如果父组件传递的是一个对象，子组件最好是利用工厂函数来返回一个新对象</li><li>如果传值过程中，不希望数据被更改，则最好是利用深拷贝，传递一个全新的对象</li><li>子传父，是利用观察者模式进行传值，通过$emit触发发布事件，父组件通过监听事件来获取对应的数据</li></ul><h6 id="兄弟组件通信-bus"><a href="#兄弟组件通信-bus" class="headerlink" title="兄弟组件通信(bus)"></a>兄弟组件通信(bus)</h6><p>方案一：子传父，再父传子（不建议使用）</p><p>方案二：bus传值</p><ul><li>创建一个公共的bus对象（Vue实例对象）</li><li>在需要传值的组件触发 bus.$emit(‘事件名’,数据)</li><li>在需要数据的组件监听并接收 bus.$on(‘事件名’,(传来的数据)&#x3D;&gt;{})</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first</span>&gt;</span><span class="tag">&lt;/<span class="name">first</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">last</span>&gt;</span><span class="tag">&lt;/<span class="name">last</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> first = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;first组件：&lt;button @click=&quot;handler&quot;&gt;给last组件传值&lt;/button&gt;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&#x27;first组件的数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                bus.$emit(<span class="string">&#x27;send&#x27;</span>,<span class="variable language_">this</span>.<span class="property">msg</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> last = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;last组件：&#123;&#123;arg&#125;&#125;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">arg</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            bus.$on(<span class="string">&#x27;send&#x27;</span>,<span class="function">(<span class="params">arg</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">arg</span> = arg</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            first,</span></span><br><span class="line"><span class="language-javascript">            last</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="provide-inject传值"><a href="#provide-inject传值" class="headerlink" title="provide inject传值"></a>provide inject传值</h6><p>主要是为高阶组件&#x2F;组件库提供用例，可以用于跨组件传值〈不建议使用)，必须基于<strong>父子关系</strong>〈不管嵌套多少级都传值)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;child：&#123;&#123;msg&#125;&#125;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inject</span>: [<span class="string">&#x27;msg&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> parent = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`&lt;div&gt;parent&lt;child&gt;&lt;/child&gt;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            child</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            parent</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="variable language_">this</span>.<span class="property">msg</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">getValue</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="ref传值"><a href="#ref传值" class="headerlink" title="ref传值"></a>ref传值</h6><p>ref传值主要传递的是当前的组件</p><p>ref如果是用于普通的dom元素，那么接受的就是普通的dom对象，如果是组件，则接受的是组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;ele&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`&lt;div&gt;child组件&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;传递的数据&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">value</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            child</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 直接获取了整个vue组件和dom</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">child</span>.<span class="property">msg</span>,<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ele</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 动画 </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的生命周期及axios</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/02.vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8Aaxios/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/02.vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8Aaxios/</url>
      
        <content type="html"><![CDATA[<h1 id="vue的生命周期及axios"><a href="#vue的生命周期及axios" class="headerlink" title="vue的生命周期及axios"></a>vue的生命周期及axios</h1><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="img"  /><h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><ul><li>beforeCreate 创建之前（可以预加载）</li><li>created 创建完成（可以请求数据）</li><li>beforeMount 挂载之前 （可以对虚拟dom的优化）</li><li>mounted 挂载完成（可以阻止渲染）</li><li>beforeUpdate 修改之前 （可以阻止修改）</li><li>updated 修改完成 （可以进行修改完成的后续操作）</li><li>beforeDestroy 销毁之前（回收资源）</li><li>destroyed 销毁完成（）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button @click=&quot;close&quot;&gt;销毁&lt;/button&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 若有template，则会直接渲染template，不会渲染el里的html元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;h3&gt;hello world！&lt;/h3&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate，创建之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created，创建完成&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount，挂载之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted，挂载完成&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate，更新之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated，更新完成&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy，销毁之前&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy，销毁完成&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br></pre></td></tr></table></figure><h3 id="vue内置的网络请求"><a href="#vue内置的网络请求" class="headerlink" title="vue内置的网络请求"></a>vue内置的网络请求</h3><p>vue.resource（已废弃）</p><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h4 id="简易的用户管理系统"><a href="#简易的用户管理系统" class="headerlink" title="简易的用户管理系统"></a>简易的用户管理系统</h4><h5 id="数据-user-json"><a href="#数据-user-json" class="headerlink" title="数据(user.json)"></a>数据(user.json)</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://img2.baidu.com/it/u=2043310493,2206067123&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nobita@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isEdit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://img2.baidu.com/it/u=2043310493,2206067123&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123@163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://img2.baidu.com/it/u=2043310493,2206067123&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=500&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123@163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jerry&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://img0.baidu.com/it/u=912844464,1907087211&amp;fm=253&amp;app=138&amp;size=w931&amp;n=0&amp;f=PNG&amp;fmt=auto?sec=1680109200&amp;t=ad9a44000082b932d0cf48960b84b5ee&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123@163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jerry&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://img0.baidu.com/it/u=912844464,1907087211&amp;fm=253&amp;app=138&amp;size=w931&amp;n=0&amp;f=PNG&amp;fmt=auto?sec=1680109200&amp;t=ad9a44000082b932d0cf48960b84b5ee&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123@163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">预先在终端配置服务：</span><br><span class="line">json-server -w .\user.json</span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.saveBox</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.showBox</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.showBox</span> <span class="selector-tag">td</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加用户 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;saveBox&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;basic-url&quot;</span>&gt;</span>usename<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;basic-url&quot;</span>&gt;</span>age<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.age&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;basic-url&quot;</span>&gt;</span>avatar<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.avatar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;basic-url&quot;</span>&gt;</span>email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.email&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;saveUser&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 用户列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;showBox&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Default panel contents --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span>Users<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Table --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-for</span>=<span class="string">&quot;(users,index) in users&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;users.id&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;!users.isEdit&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index=1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;users.username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;users.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;users.avatar&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;users.email&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;users.isEdit=true&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteById(users.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index=1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;users.username&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 80px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;users.age&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;users.avatar&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;users.email&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateById(users.id)&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;users.isEdit=false&quot;</span>&gt;</span>取消更改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://localhost:3000/&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">users</span>: [],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/users&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 添加一个编辑的状态到对象中</span></span></span><br><span class="line"><span class="language-javascript">                    data.<span class="title function_">forEach</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        user.<span class="property">isEdit</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">users</span> = data</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> <span class="title function_">deleteById</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">await</span> axios.<span class="title function_">delete</span>(<span class="string">`/users/<span class="subst">$&#123;id&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">getUsers</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> <span class="title function_">saveUser</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">check</span>(<span class="variable language_">this</span>.<span class="property">user</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 发送添加的请求</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&quot;/users&quot;</span>, <span class="variable language_">this</span>.<span class="property">user</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">getUsers</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">check</span>(<span class="params">user</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title class_">Object</span>.<span class="title function_">keys</span>(user).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span> (user[key].<span class="title function_">toString</span>().<span class="title function_">trim</span>() == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>()</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;请将填写完整&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> <span class="title function_">updateById</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> newUser = <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> user.<span class="property">id</span> == id</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">check</span>(newUser)) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 发送请求修改数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">await</span> axios.<span class="title function_">put</span>(<span class="string">`/users/<span class="subst">$&#123;id&#125;</span>`</span>, newUser)</span></span><br><span class="line"><span class="language-javascript">                        newUser.<span class="property">isEdit</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 重新获取新的数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">getUsers</span>()</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">getUsers</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>vue官方提供了v-text、v-html、v-model、v-if等一些常用的指令。除此之外vue还允许开发者自定义指令。</p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>使用v-开头</li><li>使用:来传入对应属性</li><li>使用&#x3D;去传递对应的数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color:name</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color:name</span>=<span class="string">&quot;color&quot;</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-placeholder</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-myhtml</span>=<span class="string">&quot;htmlCode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局自定义必须声明在vue实例之前</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一个为自定义指令的名字,第二个为对应的处理，包含五个生命周期的钩子函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绑定的生命周期</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el当前操作的dom元素， binding（传入的数据及属性等），vnode虚拟dom节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">bind</span>(<span class="params">el, binding, vnode</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bind&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(el, binding, vnode);</span></span><br><span class="line"><span class="language-javascript">            el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 组件更新的时候调用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">componentUpdated</span>(<span class="params">el, binding, vnode, oldvnode</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentUpdated&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 插入自定义指令的时候调用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">inserted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inserted&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 解绑时调用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">unbind</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unbind&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&#x27;pink&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">htmlCode</span>:<span class="string">&quot;&lt;h3&gt;你好&lt;/h3&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                指令名:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    钩子函数</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// placeholder(el,binding,vnode)&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     el.setAttribute(&#x27;placeholder&#x27;,binding.value)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;placeholder&quot;</span>:<span class="keyword">function</span>(<span class="params">el,binding,vnode</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;placeholder&#x27;</span>,binding.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 所有钩子全部填入</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;myhtml&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">bind</span>(<span class="params">el,binding,vnode</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    el.<span class="property">innerHTML</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">inserted</span>(<span class="params">el,binding,vnode</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">componentUpdated</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">unbind</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="filter过滤器-vue3已废弃"><a href="#filter过滤器-vue3已废弃" class="headerlink" title="filter过滤器(vue3已废弃)"></a>filter过滤器(vue3已废弃)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基础使用 --&gt;</span></span><br><span class="line">    &#123;&#123;db | fixed&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持传参 --&gt;</span></span><br><span class="line">    &#123;&#123;db | fixed(3)&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 常用于格式化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; new Date() | format&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">db</span>: <span class="number">3.1415926</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 类似于方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 小数点</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fixed</span>(<span class="params">data, len = <span class="number">2</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> data.<span class="title function_">toFixed</span>(len)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">format</span>(<span class="params">date</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> year = date.<span class="title function_">getFullYear</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> day = date.<span class="title function_">getDate</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number1&quot;</span>&gt;</span>+</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;number2&quot;</span>&gt;</span>=</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;sum&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;&#123;sum1&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum1=20&quot;</span>&gt;</span>sum1=20<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number1</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number2</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number3</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 基础版本</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sum</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">number1</span>) + <span class="title class_">Number</span>(<span class="variable language_">this</span>.<span class="property">number2</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 完整版本</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sum1</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">number3</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">set</span>(<span class="params">v</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">number3</span> = v</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="computed和methods的区别（面试题）"><a href="#computed和methods的区别（面试题）" class="headerlink" title="computed和methods的区别（面试题）"></a>computed和methods的区别（面试题）</h3><ul><li>computed会缓存数据，只有当数据变化了才会重新编译</li><li>methods每次调用都会重新编译</li><li>computed的效率高于methods</li></ul><h3 id="watch监听器"><a href="#watch监听器" class="headerlink" title="watch监听器"></a>watch监听器</h3><p>用于监听劫持的数据变化的</p><p><strong>三个属性</strong></p><ul><li>handler 处理函数</li><li>deep 是否深度监听</li><li>immediate 是否开始就监听</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 &#123;&#123;names&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123;number&#125;&#125;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;number=2&quot;</span>&gt;</span>改变number<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;&#123;number2&#125;&#125;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;number2=2&quot;</span>&gt;</span>改变number2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;&#123;user&#125;&#125;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;user.username=&#x27;tom&#x27;&quot;</span>&gt;</span>改变user.username<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number2</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">username</span>:<span class="string">&#x27;jerrry&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 默认是用的是handler ，deep和immediate默认为false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// handler有两个参数newValue oldValue</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">number</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">                newValue = oldValue + <span class="number">10</span> </span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">number</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;number监听了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">immediate</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;user&quot;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;user监听了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">immediate</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="computed和watch的区别（面试题）"><a href="#computed和watch的区别（面试题）" class="headerlink" title="computed和watch的区别（面试题）"></a>computed和watch的区别（面试题）</h3><ul><li>computed有缓存，不支持异步操作</li><li>watch没有缓存，支持异步操作</li><li>computed 有get和set属性</li><li>watch 有handler、deep、immediate</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础知识回顾及CLI脚手架</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/06.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE%E5%8F%8ACli%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/06.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE%E5%8F%8ACli%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="vue基础知识回顾及CLI脚手架"><a href="#vue基础知识回顾及CLI脚手架" class="headerlink" title="vue基础知识回顾及CLI脚手架"></a>vue基础知识回顾及CLI脚手架</h1><h3 id="vue基础知识回顾"><a href="#vue基础知识回顾" class="headerlink" title="vue基础知识回顾"></a>vue基础知识回顾</h3><h4 id="vue中的mvvm"><a href="#vue中的mvvm" class="headerlink" title="vue中的mvvm"></a>vue中的mvvm</h4><p>mvvm（model数据 view视图 viewmodel视图模型）</p><p>数据劫持的原理（vue2：Object.defineProperty  vue3：Proxy）被数据劫持的数据被称为响应式数据</p><p>观察者模式来实现对数据变化的监听</p><h4 id="vue中的相关指令"><a href="#vue中的相关指令" class="headerlink" title="vue中的相关指令"></a>vue中的相关指令</h4><ul><li><p>v-html</p></li><li><p>v-text</p></li><li><p>v-show</p></li><li><p>v-if</p></li><li><p>v-else</p></li><li><p>v-else-if</p></li><li><p>v-for</p></li><li><p>v-bind(:)</p></li><li><p>v-on(@)</p></li><li><p>v-model</p></li><li><p>v-pre</p></li><li><p>v-cloack</p></li><li><p>v-once</p></li><li><p>v-slot(#)(2.6版本以上可用)</p></li></ul><h4 id="vue动画"><a href="#vue动画" class="headerlink" title="vue动画"></a>vue动画</h4><p>transition（动画）</p><p>transition-group（分组动画）</p><h4 id="vue相关属性"><a href="#vue相关属性" class="headerlink" title="vue相关属性"></a>vue相关属性</h4><p>el：用于指定vue实例对象挂载的元素</p><p>data：存储的数据</p><p>methods 方法定义</p><p>filters 过滤器（VUE3中废弃）</p><p>computed 计算属性（内置get和set，默认使用get）</p><p>watch 监听属性（handler处理函数 deep是否深度监听 immediate立即执行）</p><p>template 模板（优先采用template，大于el）</p><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><ul><li>beforeCreate</li><li>beforeCreated</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeDestroy</li><li>destroyed</li></ul><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/%25E7%2594%259F%25E5%2591%25BD%25E5%2591%25A8%25E6%259C%259F.png" alt="img"  /><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>axios是一个封装好的http请求库</p><p>返回的方法都是promise</p><p>返回的数据和发送的数据都是JSON类型（会多嵌套一个data）</p><p>axios.defaults.baseUrl </p><p>axios.defaults.timeOut</p><h5 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h5><ul><li>axios.get(参数必须在对象中，且属性名必须为params)</li><li>axios.post</li><li>axios.put</li><li>axios.delete</li><li>axios.all</li></ul><h5 id="axios的拦截器"><a href="#axios的拦截器" class="headerlink" title="axios的拦截器"></a>axios的拦截器</h5><p>请求拦截、响应拦截（可完成对应axios的二次封装）</p><h4 id="vue中的组件"><a href="#vue中的组件" class="headerlink" title="vue中的组件"></a>vue中的组件</h4><h5 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h5><p>组件分为全局组件（Vue.component注册）和局部组件（componets属性中注册）</p><p>组件是抽取html+JavaScript+css形成一个模块，可在各处复用。</p><p>因为组件需要在各处使用，故本身没有数据，依赖于传递</p><p>组件中的data是一个函数来返回数据（避免数据的污染）</p><p>Vue实例是最大的一个组件</p><p>组件动态切换（component是内置组件，通过is来指定对应的组件名）</p><h5 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h5><p>父传子（父组件利用属性传值，子组件利用props属性接收值）</p><p>子传父（子组件通过<code>$emit</code>来派发和执行事件，父组件利用<code>v-on</code>来监听对应事件，在处理函数的参数接收数据）</p><p>bus（通过创建一个公共的vue实例对象（bus对象）通过<code>$emit</code>和 <code>$on</code>来进行事件的发布和订阅）</p><p>provide inject （基于父子关系provide用于数据传递，inject接收对应数据）</p><p>作用域插槽传递（扩大对应的子组件的作用域）</p><p>ref传参（通过$ref来获取对应的组件对象）</p><h5 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h5><p>插槽简单来讲就是组件预留的一个入口，帮助你将内容放到组件中</p><p>通过<slot></slot>标签来指定对应的插槽，通过name属性来指定对应的插槽名</p><ul><li>匿名插槽（有一个默认名default）</li><li>具名插槽</li><li>作用域插槽（利用slot-scope&#x3D;”scope”来获取插槽中通过属性传递过来的数据）（2.6版本后可用v-slot代替slot及slot-scope属性（v-slot:header&#x3D;”scope”））</li></ul><h5 id="组件封装的原则"><a href="#组件封装的原则" class="headerlink" title="组件封装的原则"></a>组件封装的原则</h5><ul><li>所有数据都应该来源于外界的传递（例如props）</li><li>所有的事件都应该调用的父组件处理（$emit派发事件）</li><li>至少具备一个插槽</li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><h5 id="相关对象"><a href="#相关对象" class="headerlink" title="相关对象"></a>相关对象</h5><ul><li><p>router 路由对象（传递给vue实例对象）</p><p>相关属性：</p><ul><li>mode（hash、history、abstract）</li></ul><p>相关方法：</p><ul><li>addRoutes 添加路由表</li></ul></li><li><p>routes 路由表（包含多个route配置对象）</p></li><li><p>route 路由配置对象</p><p>相关的属性：</p><ul><li>path 路由</li><li>name 路由名</li><li>component 对应的组件</li><li>hildren 子路由（子路由的path不能以<code>/</code>开头）</li><li>redirect 重定向</li><li>meta 相关配置属性</li><li>props 传递给对应组件的数据</li></ul></li></ul><h5 id="相关标签"><a href="#相关标签" class="headerlink" title="相关标签"></a>相关标签</h5><p>router-link 路由切换（to属性 tag标签 exact精确匹配）</p><p>router-view 路由视图</p><p>KeepAlive 是否缓存（对应的组件会有两个钩子函数activated和deactivated）</p><h5 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h5><p>query传参 ？拼接</p><p>params传参 &#x2F;后面接数据，定义对应的path路径:key来接收</p><hr><h3 id="Vue脚手架"><a href="#Vue脚手架" class="headerlink" title="Vue脚手架"></a>Vue脚手架</h3><h4 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h4><blockquote><p>⚠️ Vue CLI 现已处于维护模式!</p><p>现在官方推荐使用 <a href="https://github.com/vuejs/create-vue"><code>create-vue</code></a> 来创建基于 <a href="https://cn.vitejs.dev/">Vite</a> 的新项目。 另外请参考 <a href="https://cn.vuejs.org/guide/scaling-up/tooling.html">Vue 3 工具链指南</a> 以了解最新的工具推荐。</p></blockquote><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p><ul><li><p>通过 <code>@vue/cli</code> 实现的交互式的项目脚手架。</p></li><li><p>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 实现的零配置原型开发。</p></li><li><p>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：</p><ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；</li><li>可以通过项目内的配置文件进行配置；</li><li>可以通过插件进行扩展。</li></ul></li><li><p>一个丰富的官方插件集合，集成了前端生态中最好的工具。</p></li><li><p>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</p></li></ul><p>​Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p><h5 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h5><p>使用下列命令安装vue-cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli@版本号 -g</span><br></pre></td></tr></table></figure><p>安装之后，你就可以在命令行中访问 <code>vue</code> 命令。你可以通过简单运行 <code>vue</code>，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p><p>你还可以用这个命令来检查其版本是否正确：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h6 id="使用init-webpack创建项目"><a href="#使用init-webpack创建项目" class="headerlink" title="使用init webpack创建项目"></a>使用init webpack创建项目</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue-cli2-project</span><br></pre></td></tr></table></figure><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403113614586.png" alt="image-20230403113614586"></p><p>该命令创建的项目使用<strong>vue run dev</strong>启动</p><h6 id="使用create创建项目（vue-cli5版本）"><a href="#使用create创建项目（vue-cli5版本）" class="headerlink" title="使用create创建项目（vue-cli5版本）"></a>使用create创建项目（vue-cli5版本）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-cli5-project</span><br></pre></td></tr></table></figure><p>前两项为默认构建项目,最后一项为自定义构建，这里第三项选择自定义构建</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403115535908.png" alt="image-20230403115535908"></p><p>选择需要安装的模块</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403120820372.png" alt="image-20230403120820372"></p><p>选择vue版本</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403121118809.png" alt="image-20230403121118809"></p><p>选择路由模式</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403121219105.png" alt="image-20230403121219105"></p><p>选择css预编译器</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403121247491.png" alt="image-20230403121247491"></p><p>选择eslint语法检查方式</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403121808847.png" alt="image-20230403121808847"></p><p>选择校验规则生效时间</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403121915736.png" alt="image-20230403121915736"></p><p>选择规则的保存位置</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403122007324.png" alt="image-20230403122007324"></p><p>是否保存这个项目配置，以便后续使用，并重命名项目名</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403122052165.png" alt="image-20230403122052165"></p><p>整体预览</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403122240269.png" alt="image-20230403122240269"></p><p>该指令创建的项目使用<strong>vue run serve</strong>启动</p><h4 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h4><p>使用vie创建vue3项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest vite-project --template vue</span><br></pre></td></tr></table></figure><p>使用<strong>npm run dev</strong>启动项目</p><p>vite和webpack构建项目的比较</p><p>webpack：</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403143509321.png" alt="image-20230403143509321"></p><p>vite：</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403143529791.png" alt="image-20230403143529791"></p><h4 id="项目目录（vue2）"><a href="#项目目录（vue2）" class="headerlink" title="项目目录（vue2）"></a>项目目录（vue2）</h4><p>vue-cli5构建的项目</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403145237162.png" alt="image-20230403145237162"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插槽及组件的获取</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/04.%E6%8F%92%E6%A7%BD%E5%8F%8A%E7%BB%84%E4%BB%B6%E7%9A%84%E8%8E%B7%E5%8F%96/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/04.%E6%8F%92%E6%A7%BD%E5%8F%8A%E7%BB%84%E4%BB%B6%E7%9A%84%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="插槽及组件的获取"><a href="#插槽及组件的获取" class="headerlink" title="插槽及组件的获取"></a>插槽及组件的获取</h1><h3 id="插槽概述"><a href="#插槽概述" class="headerlink" title="插槽概述"></a>插槽概述</h3><p>​Vue插槽是Vue中常见的一种组件间的相互通信方式，<strong>作用是让父组件可以向子组件指定位置插入html结构</strong>，适用于父组件&#x3D;&#x3D;&#x3D;&gt;子组件，在要接收数据的组件页面通过<code>&lt;slot&gt;</code>标签来表示，简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置。</p><p>​简单来讲就是组件预留的一个入口，帮助你将内容放到组件中</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>匿名插槽</li><li>具名插槽</li><li>作用域插槽</li></ul><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><p>没有具体名字，默认名为default</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first</span>&gt;</span>world<span class="tag">&lt;/<span class="name">first</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> first = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 匿名插槽的定义</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                hello</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;slot&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            first</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>通过name属性，指定插槽的名字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽的使用一般使用template标签来包裹传入的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">            传入的数据                                       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">first</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    let first = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 具名插槽的定义</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                具名插槽<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                header插槽：<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                footer插槽：<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            first</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-slot指令"><a href="#v-slot指令" class="headerlink" title="v-slot指令"></a>v-slot指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具名插槽的使用一般使用template标签来包裹传入的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">            vue的版本需要2.6及以上</span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过v-slot属性来指定插入的插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">            传入的数据                                       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">            传入的数据,简写了v-slot为#      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">first</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    let first = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 具名插槽的定义</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                匿名插槽<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                具名插槽<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            first</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可简写为#header=&quot;scope&quot; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>=<span class="string">&quot;scope&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                你好世界&#123;&#123;scope&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;scope.user.username=&#x27;tom&#x27;&quot;</span>&gt;</span>改为tom<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;scope.sayHelloFn(&#x27;父组件调用了&#x27;)&quot;</span>&gt;</span>调用sayhello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">first</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> first = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                作用域插槽：&#123;&#123;msg&#125;&#125;&lt;br&gt; </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;slot name=&quot;header&quot; :msg=&quot;msg&quot; :user=&quot;user&quot; :sayHelloFn=&quot;sayHello&quot; &gt;&lt;/slot&gt;&lt;br&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            `</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&#x27;插槽里的数据&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">user</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">username</span>:<span class="string">&#x27;jerry&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>:<span class="number">22</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sayHello</span>(<span class="params">arg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;袁同学!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            first</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230330174020762.png" alt="image-20230330174020762"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用slot来定义插槽</li><li>匿名插槽又称默认插槽，内容默认传递给对应的具名插槽</li><li>slot标签通过name属性来指定插槽名</li><li>需要插入的内容建议用template标签包裹</li><li>作用域插槽是扩大了对应的组件作用域，通过对应的插槽数据中的属性来传递数据</li><li>父组件使用对应的slot-scope属性来接收对应的传递的属性对象（2.6之前的写法）</li><li>v-slot（2.6及以上版本才支持）（v-slot:name）可简写为(#name)</li><li>v-slot和slot的写法不要混用，容易造成兼容问题</li></ul><h3 id="组件获取"><a href="#组件获取" class="headerlink" title="组件获取"></a>组件获取</h3><ul><li>$root获取根组件</li><li>$children获取子组件</li><li>$parent获取父组件</li><li>$refs获取ref标记的组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">last</span>&gt;</span><span class="tag">&lt;/<span class="name">last</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logMsg&quot;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    let first = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            第一个组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>第一个组件button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;firstSlot&quot;</span> <span class="attr">:hdfn</span>=<span class="string">&quot;handler&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;firstSlot2&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            handler() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                console.log(this.$scopedSlots)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    let last = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>第二个组件<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;hdl&quot;</span>&gt;</span>last-btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">first</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">firstSlot</span>=<span class="string">&quot;scope&quot;</span>&gt;</span>放入插件的内容</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                                    </span><span class="template-variable">&#123;&#123;<span class="name">scope.hdfn</span>()&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;hdl(scope)&quot;</span>&gt;</span>hdl(scope)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">first</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                msg: &#x27;父组件&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            hdl(arg) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                console.log(arg)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                console.log(this.$children)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            first</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            names: &#x27; !&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            last</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            logMsg() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                console.log(this.$slot)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽的获取"><a href="#插槽的获取" class="headerlink" title="插槽的获取"></a>插槽的获取</h3><ul><li><p>$slots 获取调用的插槽(不包括作用域插槽)</p></li><li><p>$scopedSlots 获取调用的作用域插槽</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
            <tag> slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云audio组件的封装</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/07.%E7%BD%91%E6%98%93%E4%BA%91audio%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/07.%E7%BD%91%E6%98%93%E4%BA%91audio%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="网易云audio组件的封装"><a href="#网易云audio组件的封装" class="headerlink" title="网易云audio组件的封装"></a>网易云audio组件的封装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;audio class=&quot;audio-play&quot; :src=&quot;src&quot; ref=&quot;audio&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;audio-play&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        // 音源</span><br><span class="line">        src: &#123;</span><br><span class="line">            default: &#x27;&#x27;,</span><br><span class="line">            type: String</span><br><span class="line">        &#125;,</span><br><span class="line">        // 静音</span><br><span class="line">        muted: &#123;</span><br><span class="line">            default: false,</span><br><span class="line">            type: Boolean</span><br><span class="line">        &#125;,</span><br><span class="line">        // 是否循环</span><br><span class="line">        loop: &#123;</span><br><span class="line">            default: false,</span><br><span class="line">            type: Boolean</span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前播放时间</span><br><span class="line">        currentTime: &#123;</span><br><span class="line">            default: 0,</span><br><span class="line">            type: Number</span><br><span class="line">        &#125;,</span><br><span class="line">        // 音频的总时长</span><br><span class="line">        duration: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        // 是否结束</span><br><span class="line">        isEnded: &#123;</span><br><span class="line">            default: false,</span><br><span class="line">            type: Boolean</span><br><span class="line">        &#125;,</span><br><span class="line">        // 用户是否在音频中移动或者跳跃到新的播放点</span><br><span class="line">        seeking: &#123;</span><br><span class="line">            default: 1,</span><br><span class="line">            type: Number</span><br><span class="line">        &#125;,</span><br><span class="line">        // 是否暂停</span><br><span class="line">        paused: &#123;</span><br><span class="line">            default: false,</span><br><span class="line">            type: Boolean</span><br><span class="line">        &#125;,</span><br><span class="line">        // 音量</span><br><span class="line">        volume: &#123;</span><br><span class="line">            default: 0,</span><br><span class="line">            type: Number</span><br><span class="line">        &#125;,</span><br><span class="line">        /* 播放倍速:</span><br><span class="line">        设置或者查询音频的播放速度，</span><br><span class="line">        1表示正常速度，大于1表示快进，</span><br><span class="line">        0-1之间表示慢进,</span><br><span class="line">        0表示暂停(控制面板仍然是播放，仅仅是速度为0)</span><br><span class="line">        */</span><br><span class="line">        playbackRate: &#123;</span><br><span class="line">            default: 0,</span><br><span class="line">            type: Number</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    // 相关方法</span><br><span class="line">    // play()播放</span><br><span class="line">    // pause()暂停</span><br><span class="line">    // 事件</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        // loadstart:开始载入音频时触发</span><br><span class="line">        this.$refs.audio.onloadstart = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;loadstart&#x27;, this.$refs.audio.duration)</span><br><span class="line">        &#125;</span><br><span class="line">        // duracyionchange:duration属性更新时触发</span><br><span class="line">        this.$refs.audio.onduracyionchange = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;duracyionchange&#x27;, this.$refs.audio.duration)</span><br><span class="line">        &#125;</span><br><span class="line">        // loadeddata:音频的第一帧加载完成时触发，此时整个音频还未加载完</span><br><span class="line">        this.$refs.audio.onloadeddata = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;loadeddata&#x27;, this.$refs.audio.duration)</span><br><span class="line">        &#125;</span><br><span class="line">        // loadedmetadata:音频元数据加载完成时触发</span><br><span class="line">        this.$refs.audio.onloadedmetadata = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;loadedmetadat&#x27;, this.$refs.audio.duration)</span><br><span class="line">        &#125;</span><br><span class="line">        // progress:音屏正在加载时触发</span><br><span class="line">        this.$refs.audio.onprogress = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;progress&#x27;, this.$refs.audio.duration)</span><br><span class="line">        &#125;</span><br><span class="line">        // canplay :浏览器能够开始播放音频时触发</span><br><span class="line">        this.$refs.audio.oncanplay = () =&gt; &#123;</span><br><span class="line">            // 播放</span><br><span class="line">            if (!this.paused) &#123;</span><br><span class="line">                this.play()</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.pause()</span><br><span class="line">            &#125;</span><br><span class="line">            this.$emit(&#x27;canplay&#x27;, this)</span><br><span class="line">        &#125;</span><br><span class="line">        // canplaythrough:浏览器预计在不停下来进行缓冲的情况下，能够持续播放指定的音频时会触发</span><br><span class="line">        this.$refs.audio.oncanplaythrough = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;canplaythrough&#x27;, this)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        // ended播放结束</span><br><span class="line">        this.$refs.audio.onended = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;ended&#x27;, this)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        // error播放错误</span><br><span class="line">        this.$refs.audio.onerror = (err) =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;error&#x27;, err)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        // timeupdate时间更改</span><br><span class="line">        this.$refs.audio.ontimeupdate = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;timeupdate&#x27;, this.$refs.audio.currentTime)</span><br><span class="line">        &#125;</span><br><span class="line">        // volumechange音量更改</span><br><span class="line">        this.$refs.audio.onvolumechange = () =&gt; &#123;</span><br><span class="line">            this.$emit(&#x27;volumechange&#x27;, this.$refs.audio.volume)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123; &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        play() &#123;</span><br><span class="line">            if (this.$refs.audio) &#123;</span><br><span class="line">                this.$refs.audio.play()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        pause() &#123;</span><br><span class="line">            if (this.$refs.audio) &#123;</span><br><span class="line">                this.$refs.audio.pause()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        // props传参时第一次时不会立即触发对应的watch</span><br><span class="line">        // 音源没法设置</span><br><span class="line">        // src: &#123;</span><br><span class="line">        //     handler(newValue, oldValue) &#123;</span><br><span class="line">        //         if (newValue) &#123;</span><br><span class="line">        //             this.$refs.audio.src = newValue</span><br><span class="line">        //         &#125;</span><br><span class="line">        //     &#125;,</span><br><span class="line">        //     immediate: true</span><br><span class="line">        // &#125;,</span><br><span class="line">        // 静音</span><br><span class="line">        muted: &#123;</span><br><span class="line">            handler(newValue) &#123;</span><br><span class="line">                if (newValue) &#123;</span><br><span class="line">                    this.$refs.audio.muted = newValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;,</span><br><span class="line">        // 是否循环</span><br><span class="line">        loop: &#123;</span><br><span class="line">            handler(newValue) &#123;</span><br><span class="line">                if (newValue) &#123;</span><br><span class="line">                    this.$refs.audio.loop = newValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前播放时间</span><br><span class="line">        currentTime: &#123;</span><br><span class="line">            handler(newValue) &#123;</span><br><span class="line">                if(newValue)&#123;</span><br><span class="line">                    this.$refs.audio.currentTime = newValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;,</span><br><span class="line">        // 是否暂停</span><br><span class="line">        paused: &#123;</span><br><span class="line">            handler(newValue) &#123;</span><br><span class="line">                if (newValue) &#123;</span><br><span class="line">                    this.pause()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 音量</span><br><span class="line">        volume: &#123;</span><br><span class="line">            handler(newValue) &#123;</span><br><span class="line">                if(newValue)&#123;</span><br><span class="line">                    this.$refs.audio.volume = newValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;,</span><br><span class="line">        /* 播放倍速:</span><br><span class="line">        设置或者查询音频的播放速度，</span><br><span class="line">        1表示正常速度，大于1表示快进，</span><br><span class="line">        0-1之间表示慢进,</span><br><span class="line">        0表示暂停(控制面板仍然是播放，仅仅是速度为0)</span><br><span class="line">        */</span><br><span class="line">        playbackRate: &#123;</span><br><span class="line">            handler(newValue) &#123;</span><br><span class="line">                if(newValue)&#123;</span><br><span class="line">                    this.$refs.audio.playbackRate = newValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 组件封装 </tag>
            
            <tag> audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/05.vue%E8%B7%AF%E7%94%B1/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/05.vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​路由的本质就是一种对应关系（此处的路由含义同之前node.js的路由)，根据不同的URL请求，返回对应不同的资源。那么URL地址和真实的资源之间就有一种对应的关系，就是路由。</p><h3 id="前端路由和后端路由"><a href="#前端路由和后端路由" class="headerlink" title="前端路由和后端路由"></a>前端路由和后端路由</h3><blockquote><p>前端路由：根据不同的<strong>事件</strong>来显示不同的页面内容，是事件与事件处理函数之间的对应关系</p><ul><li>概念：根据不同的用户事件，显示不同的页面内容（<strong>地址与事件</strong>产生对应关系）</li><li>本质：用户事件与事件处理函数之间的对应关系</li></ul><p><img src="https://img-blog.csdnimg.cn/b6163dc8274548e489ecea2249ba7f1e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn6IGq5piO56CB5Yac5b6Q,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></blockquote><hr><blockquote><p>后端路由：由服务器端进行实现并实现资源映射分发（node.js、JSP、PHP等）</p><ul><li>概念：根据不同的用户URL请求，返回不同的内容（<strong>地址与资源</strong>产生对应关系）</li><li>本质：URL请求地址与服务器资源之间的对应关系（映射）</li></ul><p><img src="https://img-blog.csdnimg.cn/51035abe250d4ef583ea904ff1caa2c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn6IGq5piO56CB5Yac5b6Q,size_18,color_FFFFFF,t_70,g_se,x_16" alt="img"></p></blockquote><h3 id="模式分类"><a href="#模式分类" class="headerlink" title="模式分类"></a>模式分类</h3><h4 id="hash路由和history路由"><a href="#hash路由和history路由" class="headerlink" title="hash路由和history路由"></a>hash路由和history路由</h4><ul><li>显示格式方面<ul><li>hash路由包含#符号，后面跟着的是hash值，相对的形式没有那么美观</li><li>history路由是以&#x2F;分割路径</li></ul></li><li>实现原理：<ul><li>hash路由是通过监听hashchange事件的触发来实现的</li><li>history路由是通过HTML5中新增的History API，History API 提供了两个函数：pushState()和replaceState()，它们可以在当前历史记录中添加或修改一个状态，从而改变URL地址，但不会导致页面的重新加载。通过监听popstate事件，可以实现页面的跳转。</li></ul></li><li>兼容性：<ul><li>hash路由兼容性好，兼容所有浏览器</li><li>history路由是通过html5新增的api实现的，所以兼容性不如hash路由</li></ul></li></ul><h3 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h3><h4 id="导入vue的路由"><a href="#导入vue的路由" class="headerlink" title="导入vue的路由"></a>导入vue的路由</h4><h5 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.1.6/vue-router.cjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="webpack构建的脚手架中安装"><a href="#webpack构建的脚手架中安装" class="headerlink" title="webpack构建的脚手架中安装"></a>webpack构建的脚手架中安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i </span><br></pre></td></tr></table></figure><h4 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">路由链接组件 </span></span><br><span class="line"><span class="comment">内置组件 </span></span><br><span class="line"><span class="comment">用于路由切换 </span></span><br><span class="line"><span class="comment">会被解析为a标签 </span></span><br><span class="line"><span class="comment">to属性指定路由切换的地址</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>tomain<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/first&quot;</span>&gt;</span>tofirst<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/last&quot;</span>&gt;</span>tolast<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">路由视图组件 </span></span><br><span class="line"><span class="comment">内置组件</span></span><br><span class="line"><span class="comment">根据路由渲染对应的组件到里面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 准备好对应的组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> main = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;main组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> first = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;第一个组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> last = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;最后一个组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 配置路由表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.准备路由配置，routes路由配置列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> routes = [</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// route对象</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: main</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;first&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/first&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: first</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;last&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/last&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: last</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 传入路由表构建路由</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.将路由配置传入对应的路由构造函数，router对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        routes,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mode</span>: <span class="string">&#x27;hash&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.将路由对象传入路由实例</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue路由中的相关对象"><a href="#vue路由中的相关对象" class="headerlink" title="vue路由中的相关对象"></a>vue路由中的相关对象</h3><ul><li>router 路由对象</li><li>routes 路由表</li><li>route 路由配置对象</li></ul><h4 id="route及其的属性"><a href="#route及其的属性" class="headerlink" title="route及其的属性"></a>route及其的属性</h4><p>route是一个路由配置对象，里面主要是用于配置对应的路由</p><h5 id="name"><a href="#name" class="headerlink" title="name"></a>name</h5><p>指定路由配置的名字（标识、唯一）</p><h5 id="path"><a href="#path" class="headerlink" title="path"></a>path</h5><p>指定路由配置的访问地址（访问路径、唯一）</p><h5 id="component"><a href="#component" class="headerlink" title="component"></a>component</h5><p>指定路由渲染的组件</p><h5 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h5><p>重定向（访问到该路由的时候，切换到其他路由）</p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230331113244185.png" alt="image-20230331113244185" style="zoom:90%;" /><h5 id="children"><a href="#children" class="headerlink" title="children"></a>children</h5><p>子路由（嵌套路由）</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230331113135792.png" alt="image-20230331113135792"></p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230331112921237.png" alt="image-20230331112921237" style="zoom: 70%;" /><blockquote><p><strong>注意事项</strong>：</p><ul><li>如果是第一级的路由path路径前面必须带&#x2F;，如果是嵌套的路径那么path前面不需要&#x2F;</li><li>嵌套路由它的子路由是在父组件的页面中显示而不是在全局的页面上显示（必须在父组件中存在对应的<router-view></router-view>)</li><li>嵌套路由的实际路径为当前父路由的路径+自身当前的路径</li></ul></blockquote><h5 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h5><p>路由别名</p><h5 id="props"><a href="#props" class="headerlink" title="props()"></a>props()</h5><p>向组件中传递数据 组件通过对应的props属性接收</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230331114201288.png" alt="image-20230331114201288"></p><h5 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h5><p>相关配置</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230331114601084.png" alt="image-20230331114601084"></p><h5 id="获取配置对象-route"><a href="#获取配置对象-route" class="headerlink" title="获取配置对象($route)"></a>获取配置对象($route)</h5><p>页面中访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;$route.meta.属性&#125;&#125;</span><br></pre></td></tr></table></figure><p>方法中访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>.属性</span><br></pre></td></tr></table></figure><h4 id="router-link及其的属性"><a href="#router-link及其的属性" class="headerlink" title="router-link及其的属性"></a>router-link及其的属性</h4><p><router-link>组件支持用户在具有路由功能的应用中点击导航。通过to属性指定目标地址，默认渲染为带有正确连接的 <code>&lt;a&gt;</code> 标签，可以通过配置tag属性生成别的标签。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的css类名(.router-link-active)</p><h5 id="to"><a href="#to" class="headerlink" title="to"></a>to</h5><p>用于指定路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用属性to绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>tomain<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 绑定属性name对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;/last&#x27;&#125;&quot;</span>&gt;</span>tolast<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定属性path切换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/last&#x27;&#125;&quot;</span>&gt;</span>tolast<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h5><p>用于指定router-link解析后的标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 该标签会被解析为button标签，也是点击触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span>&gt;</span>tomain<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="replace-x2F-push"><a href="#replace-x2F-push" class="headerlink" title="replace&#x2F;push"></a>replace&#x2F;push</h5><p>是否添加历史记录，默认为push</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认是 push 会新增历史记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/last&quot;</span>&gt;</span>tolast(push)<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若设置了replace 则不会新增跳转历史记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/last&quot;</span> <span class="attr">repalce</span>&gt;</span>tolast(repalce)<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h5><p>路由精准匹配</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- exact 路由精准匹配，若声明了exact属性，则路由必须全部匹配才可以触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/last&quot;</span> <span class="attr">exact</span>&gt;</span>tolast(exact)<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="router-view及其属性"><a href="#router-view及其属性" class="headerlink" title="router-view及其属性"></a>router-view及其属性</h4><h5 id="name-1"><a href="#name-1" class="headerlink" title="name"></a>name</h5><p>如果 <code>&lt;router-view&gt;</code> 设置了 <code>name</code>，则会渲染对应的路由配置中 <code>components</code> 下的相应组件。</p><h4 id="VueRouter构造函数"><a href="#VueRouter构造函数" class="headerlink" title="VueRouter构造函数"></a>VueRouter构造函数</h4><p>相关传入的option属性</p><ul><li><p>routes属性 传入对应的路由表</p></li><li><p>mode属性 指定路由模式</p><p>mode属性的取值：</p><ul><li>hash</li><li>history</li><li>abstract （用于原生app的开发 完全不依赖于浏览器）</li></ul></li></ul><p><strong>注意事项：</strong></p><p>vue2对应版本vue-router3</p><p>vue3对应版本vue-router4</p><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">路由链接组件 </span></span><br><span class="line"><span class="comment">内置组件 </span></span><br><span class="line"><span class="comment">用于路由切换 </span></span><br><span class="line"><span class="comment">会被解析为a标签 </span></span><br><span class="line"><span class="comment">to属性指定路由切换的地址</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;/&#x27;)&quot;</span>&gt;</span>tomain<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;/first&#x27;)&quot;</span>&gt;</span>tofirst<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;/last&#x27;)&quot;</span>&gt;</span>tolast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;first&#x27;)&quot;</span>&gt;</span>tofirst<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;last&#x27;)&quot;</span>&gt;</span>tolast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">路由视图组件 </span></span><br><span class="line"><span class="comment">内置组件</span></span><br><span class="line"><span class="comment">根据路由渲染对应的组件到里面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 准备好对应的组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> main = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;main组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> first = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;第一个组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> last = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;最后一个组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 配置路由表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.准备路由配置，routes路由配置列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> routes = [</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// route对象</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: main</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;first&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/first&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: first</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;last&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/last&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: last</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 传入路由表构建路由</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.将路由配置传入对应的路由构造函数，router对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        routes,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mode</span>: <span class="string">&#x27;hash&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.将路由对象传入路由实例</span></span></span><br><span class="line"><span class="language-javascript">        router,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">path</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;path&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handlerName</span>(<span class="params">name</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;name&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><p><strong>属性</strong></p><ul><li>include 需要被缓存的组件名</li><li>exclude 不需要缓存的组件名</li><li>两个属性支持传入字符串、正则、数组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接缓存所有的组件，不管叫什么名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 利用include来缓存对应名字的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;first&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 利用include缓存多个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;first&#x27;,&#x27;last&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 利用meta和v-if缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>路由传参主要是利用路由来传递对应的数据，它有俩种传递的方式分布为query和params。</p><h4 id="query传参"><a href="#query传参" class="headerlink" title="query传参"></a>query传参</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">路由传参</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 普通传递 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/?name=jack&amp;age=18&quot;</span>&gt;</span>普通传递<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定to属性传递 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/&#x27;,query:&#123;name:&#x27;tom&#x27;,age:18&#125;&#125;&quot;</span>&gt;</span>绑定path传递<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定name属性传递 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;first&#x27;,query:&#123;name:&#x27;rose&#x27;,age:19&#125;&#125;&quot;</span>&gt;</span>绑定name传递<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编程式导航传递 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#x27;/?name=jack&amp;age=18&#x27;)&quot;</span>&gt;</span>编程式导航传递1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#123;path:&#x27;/&#x27;,query:&#123;name:&#x27;jerry&#x27;,age:20&#125;&#125;)&quot;</span>&gt;</span>编程式导航传递2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#123;name:&#x27;first&#x27;,query:&#123;name:&#x27;jack&#x27;,age:20&#125;&#125;)&quot;</span>&gt;</span>编程式导航传递3<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/last&quot;</span>&gt;</span>tolast<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">路由视图组件 </span></span><br><span class="line"><span class="comment">内置组件</span></span><br><span class="line"><span class="comment">根据路由渲染对应的组件到里面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 准备好对应的组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let main = &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     template: &#x27;&lt;h3&gt;main组件&#123;&#123;$route.query&#125;&#125;&lt;/h3&gt;&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     created() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         console.log(this.$route.query)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> main = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;main组件-&#123;&#123;name&#125;&#125;-&#123;&#123;age&#125;&#125;&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:<span class="string">&#x27;默认值&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">Number</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> first = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;第一个组件&#123;&#123;$route.query&#125;&#125;&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> last = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;最后一个组件&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 配置路由表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.准备路由配置，routes路由配置列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> routes = [</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// route对象</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;main&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: main,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// return ($route.query || &#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:$route.<span class="property">query</span>.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>:<span class="title class_">Number</span>($route.<span class="property">query</span>.<span class="property">age</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;first&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/first&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: first</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;last&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/last&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: last</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 传入路由表构建路由</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.将路由配置传入对应的路由构造函数，router对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        routes,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mode</span>: <span class="string">&#x27;hash&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.将路由对象传入路由实例</span></span></span><br><span class="line"><span class="language-javascript">        router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="params传参"><a href="#params传参" class="headerlink" title="params传参"></a>params传参</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>​路由守卫，简单理解来说就是，当用户要进行一些操作时，我需要用户的一些信息或数据或行为，我判断过后，才会同意用户进行操作，说到这里，我想大家心里都或多或少有点理解了吧，官方一点的解释就是进行操作的鉴权，当操作与之条件匹配时，操作成功，当操作与之不匹配时，操作终止，作用就是是<strong>对路由进行权限控制。</strong></p><h4 id="路由守卫分类"><a href="#路由守卫分类" class="headerlink" title="路由守卫分类"></a>路由守卫分类</h4><h5 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h5><ul><li>router.beforeEach</li><li>router.beforeResolve</li><li>router.afterEach</li></ul><h5 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h5><ul><li>beforeEnter</li></ul><h5 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h5><ul><li>beforeRouteEnter<ul><li>在路由进入前调用，因为此时的vue实例还没有创建，所以beforeRouteEnter是唯一一个不能使用this的钩子函数</li><li>to:即将要进入的路由对象</li><li>from：正要离开的路由对象</li><li>next：路由控制参数</li></ul></li><li>beforeRouteUpdate (2.2 新增)<ul><li>在路由发生修改的时候进行调用</li></ul></li><li>beforeRouteLeave<ul><li>在路由离开该组件时调用</li></ul></li></ul><h4 id="路由守卫的使用场景"><a href="#路由守卫的使用场景" class="headerlink" title="路由守卫的使用场景"></a>路由守卫的使用场景</h4><ul><li><p>登录权限控制：在用户访问需要登录才能访问的页面或路由时，路由守卫可以检测用户是否已经登录，如果没有登录，则跳转到登录页面，从而保证页面的安全性和用户数据的保密性。</p></li><li><p>权限控制：在用户访问需要特定权限才能访问的页面或路由时，路由守卫可以检测用户是否具有相应的权限，如果没有，则跳转到无权限访问的页面，从而保证系统的安全性和用户数据的保密性。</p></li><li><p>数据加载控制：在用户访问需要加载大量数据的页面或路由时，路由守卫可以检测用户的网络连接情况，如果网络连接比较差，则可以提示用户进行网络连接优化或者延迟加载数据，从而提高用户体验。</p></li><li><p>数据缓存控制：在用户访问需要缓存数据的页面或路由时，路由守卫可以检测用户设备的存储空间情况，如果存储空间不足，则提示用户进行设备存储空间释放或者关闭缓存功能，从而提高用户体验。</p></li><li><p>离开表单前进行询问</p></li><li><p>路由进入前最典型的可以做一些权限控制，路由离开时可以清除或存储一些信息&#x2F;任务等。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
            <tag> vurRouter </tag>
            
            <tag> hash </tag>
            
            <tag> history </tag>
            
            <tag> 路由传参 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/08.vuex/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/08.vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>这个状态自管理应用包含以下几个部分：</p><ul><li><strong>state</strong>，驱动应用的数据源；</li><li><strong>view</strong>，以声明方式将 <strong>state</strong> 映射到视图；</li><li><strong>actions</strong>，响应在 <strong>view</strong> 上的用户输入导致的状态变化。</li></ul><p>以下是一个表示“单向数据流”理念的简单示意：</p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/flow.png" alt="img" style="zoom:40%;" /><p>但是，当我们的应用遇到<strong>多个组件共享状态</strong>时，单向数据流的简洁性很容易被破坏：</p><ul><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。</li></ul><p>对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p><p>因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p><p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p><p>这就是 Vuex 背后的基本思想，借鉴了 <a href="https://facebook.github.io/flux/docs/overview">Flux (opens new window)</a>、<a href="http://redux.js.org/">Redux (opens new window)</a>和 <a href="https://guide.elm-lang.org/architecture/">The Elm Architecture (opens new window)</a>。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</p><p>如果你想交互式地学习 Vuex，可以看这个 <a href="https://scrimba.com/g/gvuex">Scrimba 上的 Vuex 课程 (opens new window)</a>，它将录屏和代码试验场混合在了一起，你可以随时暂停并尝试。</p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/vuex.png" alt="vuex"></p><h3 id="什么情况下我应该使用-Vuex？"><a href="#什么情况下我应该使用-Vuex？" class="headerlink" title="什么情况下我应该使用 Vuex？"></a>什么情况下我应该使用 Vuex？</h3><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 <a href="https://v2.cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">store 模式 (opens new window)</a>就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：</p><blockquote><p>Flux 架构就像眼镜：您自会知道什么时候需要它。</p></blockquote><h3 id="Vuex的五大核心"><a href="#Vuex的五大核心" class="headerlink" title="Vuex的五大核心"></a>Vuex的五大核心</h3><ul><li>state：数据中心 </li><li>actions：动作中心，支持异步</li><li>mutations：操作中心，不支持异步</li><li>getters：get相关的方法</li><li>modules：模块划分</li></ul><h3 id="Vuex数据流"><a href="#Vuex数据流" class="headerlink" title="Vuex数据流"></a>Vuex数据流</h3><p>组件 —— dispatch——actions——commit——mutations——操作——state</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>安装(高于vue版本+1)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex@3 -s</span><br></pre></td></tr></table></figure><p>使用（新建store&#x2F;index.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 中间件使用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 核心对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">changeMs</span>(<span class="params">store,payload</span>)&#123;</span><br><span class="line">            store.<span class="title function_">commit</span>(<span class="string">&#x27;MUTATIONS&#x27;</span>,payload)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">CHANGEMSG</span>(<span class="params">state,payload</span>)&#123;</span><br><span class="line">            state.<span class="property">msg</span> = payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>在main.js中注册store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vant</span> <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vant/lib/index.css&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vant</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>getter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">getMsg</span>(<span class="params">store</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> store.<span class="property">msg</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; $store.<span class="property">getters</span>.<span class="property">getMsg</span> &#125;&#125;</span><br></pre></td></tr></table></figure><p>modules</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="title class_">ModuleA</span>: &#123;</span><br><span class="line">        <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">state</span>: &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>: &#123;</span><br><span class="line">            <span class="title function_">changeCount</span>(<span class="params">store</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">mutations</span>:&#123;</span><br><span class="line">            <span class="title function_">CHANGECOUNT</span>(<span class="params">state</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; $store.<span class="property">state</span>.<span class="property">ModuleA</span>.<span class="property">count</span> &#125;&#125;</span><br><span class="line"><span class="comment">//相关方法</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="string">&#x27;ModuleA/CHANGECOUNT&#x27;</span>)<span class="comment">//actions</span></span><br><span class="line">store.<span class="title function_">commit</span>(<span class="string">&#x27;ModuleA/CHANGECOUNT&#x27;</span>)<span class="comment">//mutations</span></span><br></pre></td></tr></table></figure><p>辅助函数</p><ul><li>mapState</li><li>mapActions</li><li>mapMutations</li><li>mapGetters</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/10.Vue3/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/10.Vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h3 id="Vue3带来了什么"><a href="#Vue3带来了什么" class="headerlink" title="Vue3带来了什么"></a>Vue3带来了什么</h3><h4 id="性能的提升"><a href="#性能的提升" class="headerlink" title="性能的提升"></a>性能的提升</h4><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h4 id="源码的升级"><a href="#源码的升级" class="headerlink" title="源码的升级"></a>源码的升级</h4><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking（移除未用的代码，减少构建体积）</p><p>……</p></li></ul><h4 id="拥抱TypeScript"><a href="#拥抱TypeScript" class="headerlink" title="拥抱TypeScript"></a>拥抱TypeScript</h4><ul><li>Vue3可以更好的支持TypeScript</li></ul><h4 id="新的特性"><a href="#新的特性" class="headerlink" title="新的特性"></a>新的特性</h4><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>移除了filter</li><li>……</li></ul></li></ol><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><h4 id="Options-API-存在的问题"><a href="#Options-API-存在的问题" class="headerlink" title="Options API 存在的问题"></a>Options API 存在的问题</h4><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> </div><h4 id="Composition-API-的优势-1"><a href="#Composition-API-的优势-1" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h4><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><h3 id="组件新增"><a href="#组件新增" class="headerlink" title="组件新增"></a>组件新增</h3><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h4 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h4><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h4><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="创建Vue3-0工程"><a href="#创建Vue3-0工程" class="headerlink" title="创建Vue3.0工程"></a>创建Vue3.0工程</h3><h4 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h4><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h4><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403143509321.png" alt="image-20230403143509321"></p><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230403143529791.png" alt="image-20230403143529791"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line"><span class="comment"># npm 6.x</span></span><br><span class="line">npm create vite@latest my-vue-app --template vue</span><br><span class="line"><span class="comment"># npm 7+, extra double-dash is needed:</span></span><br><span class="line">npm create vite@latest my-vue-app -- --template vue</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn create vite my-vue-app --template vue</span><br><span class="line"><span class="comment"># pnpm</span></span><br><span class="line">pnpm create vite my-vue-app --template vue</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> my-vue-app</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="App相关"><a href="#App相关" class="headerlink" title="App相关"></a>App相关</h3><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230413105103186.png" alt="image-20230413105103186"></p><h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h3><p>computed watch</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &#123;&#123; hello &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; user &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;user.username=&#x27;tom&#x27;&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  &#123;&#123; number &#125;&#125;</span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count=10&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive, computed, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> hello = <span class="title function_">ref</span>(<span class="string">&#x27;123123&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> user = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>:<span class="string">&#x27;jack&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hello)</span></span><br><span class="line"><span class="language-javascript">  hello.<span class="property">value</span> = <span class="string">&#x27;1008611&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 只有get</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> number = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="number">13</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 带get和set</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> _count = <span class="title function_">ref</span>(<span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> count = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> _count</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">set</span>(<span class="params">v</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    _count.<span class="property">value</span> = v</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// watch</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 基础监听</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(_count,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>user.<span class="property">username</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;user.username变化了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230413173351598.png" alt="image-20230413173351598"></p><table><thead><tr><th>vue2生命周期</th><th>vue3生命周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup</td></tr><tr><td>created</td><td>setup</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnMount</td></tr><tr><td>destroyed</td><td>onUnMounted</td></tr></tbody></table><p>一个简单的hooks</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">handlerUpdate</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改相关业务&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayhello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">newReactiveUser</span> = (<span class="params">username</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="title function_">reactive</span>(<span class="keyword">new</span> <span class="title class_">User</span>(username))</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3 </tag>
            
            <tag> $attrs </tag>
            
            <tag> $listener </tag>
            
            <tag> mixin </tag>
            
            <tag> devserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3管理系统登陆流程</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/12.Vue3%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/12.Vue3%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h1><h3 id="生成环境与开发环境"><a href="#生成环境与开发环境" class="headerlink" title="生成环境与开发环境"></a>生成环境与开发环境</h3><p>新建文件</p><p>.env.development</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 标志</span><br><span class="line"><span class="variable constant_">ENV</span> = <span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line"># base api</span><br><span class="line"><span class="variable constant_">VUE_APP_BASE_API</span> = <span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure><p>.env.production</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 标志</span><br><span class="line"><span class="variable constant_">ENV</span> = <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"># base api</span><br><span class="line"><span class="variable constant_">VUE_APP_BASE_API</span> = <span class="string">&#x27;/prod-api&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">//用npm run serve启动时，为开发环境，会调用.env.development中的VUE_APP_BASE_API = &#x27;/api&#x27;</span></span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://rvt7oeuw4.hn-bkt.clouddn.com/blog/image-20230419155858060.png" alt="image-20230419155858060"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3 </tag>
            
            <tag> 管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2补充内容</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/09.vue2%E8%A1%A5%E5%85%85%E5%86%85%E5%AE%B9/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/09.vue2%E8%A1%A5%E5%85%85%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="vue2补充内容"><a href="#vue2补充内容" class="headerlink" title="vue2补充内容"></a>vue2补充内容</h1><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><h4 id="attrs传值"><a href="#attrs传值" class="headerlink" title="$attrs传值"></a>$attrs传值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">hello</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">color</span>=<span class="string">&quot;color&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;子组件&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">hello</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$attrs</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> parent = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;父组件&lt;child v-bind=&quot;$attrs&quot;&gt;&lt;/child&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    child</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    parent</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字传父"><a href="#字传父" class="headerlink" title="字传父"></a>字传父</h3><h4 id="listener传事件"><a href="#listener传事件" class="headerlink" title="$listener传事件"></a>$listener传事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> child = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;子组件&lt;button @click=&quot;handler&quot;&gt;传值&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;传递的数据&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$listeners</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> parent = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;父组件&lt;child v-on=&quot;$listeners&quot;&gt;&lt;/child&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    child</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$listeners</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    parent</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">handler</span>(<span class="params">v</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="混入-mixin"><a href="#混入-mixin" class="headerlink" title="混入 mixin"></a>混入 mixin</h3><p>mixin相当于一个公共代码块，它其实也是一个对象，也就是说这个里面的内容是提供给其他组件使用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line">        //mixin的内容设计和组件中的内容设计基本一致</span><br><span class="line">        let public_mixin = &#123;</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    msg: &#x27;hello&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //方法</span><br><span class="line">            methods: &#123;</span><br><span class="line">                sayhello() &#123;</span><br><span class="line">                    console.log(&#x27;hello&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //计算属性</span><br><span class="line">            computed: &#123;</span><br><span class="line">                sum() &#123;</span><br><span class="line">                    return 1 + 0</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //钩子函数</span><br><span class="line">            created() &#123;</span><br><span class="line">                console.log(&#x27;hello Vue is created！&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            //监听</span><br><span class="line">            watch: &#123;</span><br><span class="line">                msg() &#123;</span><br><span class="line">                    console.log(&#x27;msg changed&#x27;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 全局混入mixin</span><br><span class="line">        // Vue.mixin(public_mixin)//data中数据名冲突时，vue实例的data优先级更高</span><br><span class="line"></span><br><span class="line">        new Vue(&#123;</span><br><span class="line">            el: &quot;#app&quot;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                message:&#x27;hello&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            // 局部混入mixin</span><br><span class="line">            mixins:[public_mixin]</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="devserver配置"><a href="#devserver配置" class="headerlink" title="devserver配置"></a>devserver配置</h3><h3 id="项目相关命令"><a href="#项目相关命令" class="headerlink" title="项目相关命令"></a>项目相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run serve 运行项目</span><br><span class="line">npm run dev 启动开发服务</span><br><span class="line">npm run lint 运行eslint检索格式化</span><br><span class="line">npm run build 打包</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> $attrs </tag>
            
            <tag> $listener </tag>
            
            <tag> mixin </tag>
            
            <tag> devserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3数据传递</title>
      <link href="/2023/06/05/TechnicalArticles/Vue/11.Vue3%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
      <url>/2023/06/05/TechnicalArticles/Vue/11.Vue3%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3数据传递"><a href="#Vue3数据传递" class="headerlink" title="Vue3数据传递"></a>Vue3数据传递</h1><h3 id="setup中数据传递相关"><a href="#setup中数据传递相关" class="headerlink" title="setup中数据传递相关"></a>setup中数据传递相关</h3><h4 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h4><p>直接导入即可使用，无需注册</p><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><p>props</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><h5 id="emits派发事件"><a href="#emits派发事件" class="headerlink" title="emits派发事件"></a>emits派发事件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> em = <span class="title function_">defineEmits</span>([<span class="string">&#x27;send&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 第一个参数为事件名，第二个为传递的数据</span></span><br><span class="line">  <span class="title function_">em</span>(<span class="string">&#x27;send&#x27;</span>,<span class="string">&#x27;子向父传值&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ref子传父"><a href="#ref子传父" class="headerlink" title="ref子传父"></a>ref子传父</h5><h6 id="在子组件中先暴露"><a href="#在子组件中先暴露" class="headerlink" title="在子组件中先暴露"></a><strong>在子组件中先暴露</strong></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = <span class="string">&#x27;子组件暴露的数据&#x27;</span></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">  params</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="在父组件中获取"><a href="#在父组件中获取" class="headerlink" title="在父组件中获取"></a><strong>在父组件中获取</strong></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前实例，this指向</span></span><br><span class="line"><span class="keyword">const</span> that = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">refs</span>.<span class="property">helloworld</span>.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3 </tag>
            
            <tag> defineProps </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
